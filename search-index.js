var searchIndex = new Map(JSON.parse('[\
["cargo_run",{"doc":"","t":"FNNNNNNOOHNNNNNOHHOOONNNONN","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","cpus","debug","find_makefile","from","from_arg_matches","from_arg_matches_mut","group_id","into","kvm","main","mem","mem","release","test","try_from","try_into","type_id","uefi","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"cargo_run"],[27,"clap_builder::builder::command"],[28,"clap_builder::parser::matches::arg_matches"],[29,"clap_builder"],[30,"core::result"],[31,"clap_builder::util::id"],[32,"core::option"],[33,"alloc::string"],[34,"core::any"]],"d":["","","","","","","","number of SMP CPUs","QEMU debug level","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","enable KVM in QEMU","","","amount of physical memory","build the kernel with optimizations","run unit tests in QEMU","","","","enable UEFI in QEMU","",""],"i":[0,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,0,0,4,4,4,4,4,4,4,4,4],"f":"`{bb}0{ce{}{}}0{{}b}0``{{}d}{cc{}}{f{{l{hj}}}}0{{}{{A`{n}}}}5`3{Ab{{l{AdAd}}}}```{c{{l{e}}}{}{}}0{cAf{}}`{{hf}{{l{dj}}}}0","c":[],"p":[[5,"Command",27],[1,"unit"],[5,"ArgMatches",28],[5,"Args",0],[8,"Error",29],[6,"Result",30],[5,"Id",31],[6,"Option",32],[1,"str"],[5,"String",33],[5,"TypeId",34]],"b":[]}],\
["coreutils",{"doc":"","t":"CHCCCCHCCCFNNHNNNNNNNNHHHHHHHHHH","n":["cat","cmd","cp","date","echo","ls","main","random","sleep","touch","Bytes","borrow","borrow_mut","cmd","fmt","from","into","to_string","try_from","try_into","type_id","vzip","cmd","cmd","cmd","cmd","cmd","parse","random","rng","cmd","cmd"],"q":[[0,"coreutils"],[10,"coreutils::cat"],[22,"coreutils::cp"],[23,"coreutils::date"],[24,"coreutils::echo"],[25,"coreutils::ls"],[26,"coreutils::random"],[30,"coreutils::sleep"],[31,"coreutils::touch"],[32,"anyhow"],[33,"core::iter::traits::iterator"],[34,"core::fmt"],[35,"core::fmt"],[36,"core::result"],[37,"core::any"],[38,"core::str::traits"],[39,"core::option"],[40,"rand_chacha::chacha"]],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,6,6,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0],"f":"`{{}{{d{b}}}}````{{}b}````{ce{}{}}0{c{{d{b}}}{{j{}{{f{h}}}}}}{{ln}A`}{cc{}}3{cAb{}}{c{{Ad{e}}}{}{}}0{cAf{}}655555{{hh}{{d{c}}}Ah}{{{Al{Aj}}AnAnAn}b}{{{Al{Aj}}}B`}88","c":[],"p":[[1,"unit"],[8,"Result",32],[17,"Item"],[1,"str"],[10,"Iterator",33],[5,"Bytes",10],[5,"Formatter",34],[8,"Result",34],[5,"String",35],[6,"Result",36],[5,"TypeId",37],[10,"FromStr",38],[1,"u64"],[6,"Option",39],[1,"isize"],[5,"ChaCha8Rng",40]],"b":[]}],\
["fbtest",{"doc":"","t":"FNNONNHNNHNONHONNNNO","n":["Framebuffer","borrow","borrow_mut","buf","draw_cube","draw_line","drawing","fill","fmt","framebuffer_info","from","height","into","main","pitch","pixel","try_from","try_into","type_id","width"],"q":[[0,"fbtest"],[20,"glam::f32::sse2::mat4"],[21,"hyperion_color"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"]],"d":["","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,1,1,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1,1],"f":"`{ce{}{}}0`{{bddfhj}l}{{bddddj}l}{{b{A`{n}}}l}{{bAbAbAbAbj}l}{{bAd}Af}{{}b}{cc{}}`7{{}l}`{{bAbAbj}l}{c{{Ah{e}}}{}{}}0{cAj{}}`","c":[],"p":[[5,"Framebuffer",0],[1,"i32"],[5,"Mat4",20],[1,"f32"],[5,"Color",21],[1,"unit"],[1,"u8"],[1,"slice"],[1,"usize"],[5,"Formatter",22],[8,"Result",22],[6,"Result",23],[5,"TypeId",24]],"b":[]}],\
["hyperion_abi",{"doc":"","t":"E","n":["sys"],"q":[[0,"hyperion_abi"]],"d":[""],"i":[0],"f":"`","c":[],"p":[],"b":[]}],\
["hyperion_arch",{"doc":"","t":"CCHHHCCCHHCHCCCHFNNONNNNNONNNNOHONNNNFNNNNNNNNNCOCOHNNCNNNCONNFFNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNOONNFNNNNNNNNNNNNNNNJJHHHHHHHHHHHHCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHFFNNNNNNNNNNNNNNNNNONNNNONNNNNNNNNHHHHHHHPFPFPFPFPPPPPPGGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNFFSTFFKFTSSFSSSONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNOMNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNONNNNNNNFOOOOONNNNNNNNNHNNOHONNNNOOHNFNNONNNNHNNNONNNONSSSJSPPPFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["context","cpu","dbg_cpu","die","init","int","paging","pmm","rng_seed","spin_loop","stack","stack_pages","syscall","tls","vmm","wake_cpus","Context","borrow","borrow_mut","cr3","deref","deref_mut","drop","fmt","from","fs","init","into","invalid","new","rsp","switch","syscall_stack","try_from","try_into","type_id","vzip","CpuState","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","gdt","gdt","idt","idt","init","init","into","ints","to_owned","try_from","try_into","tss","tss","type_id","vzip","Gdt","SegmentSelectors","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","kernel_code","kernel_data","load","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","user_code","user_data","vzip","vzip","Idt","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","load","new","try_from","try_into","type_id","vzip","GP_FAULT_HANDLER","PAGE_FAULT_HANDLER","alignment_check","bound_range_exceeded","breakpoint","debug","device_not_available","divide_error","double_fault","general_protection_fault","invalid_opcode","invalid_tss","machine_check","non_maskable_interrupt","other","overflow","page_fault","security_exception","segment_not_present","simd_floating_point","stack_segment_fault","virtualization","vmm_communication_exception","x87_floating_point","int_handler_100","int_handler_101","int_handler_102","int_handler_103","int_handler_104","int_handler_105","int_handler_106","int_handler_107","int_handler_108","int_handler_109","int_handler_110","int_handler_111","int_handler_112","int_handler_113","int_handler_114","int_handler_115","int_handler_116","int_handler_117","int_handler_118","int_handler_119","int_handler_120","int_handler_121","int_handler_122","int_handler_123","int_handler_124","int_handler_125","int_handler_126","int_handler_127","int_handler_128","int_handler_129","int_handler_130","int_handler_131","int_handler_132","int_handler_133","int_handler_134","int_handler_135","int_handler_136","int_handler_137","int_handler_138","int_handler_139","int_handler_140","int_handler_141","int_handler_142","int_handler_143","int_handler_144","int_handler_145","int_handler_146","int_handler_147","int_handler_148","int_handler_149","int_handler_150","int_handler_151","int_handler_152","int_handler_153","int_handler_154","int_handler_155","int_handler_156","int_handler_157","int_handler_158","int_handler_159","int_handler_160","int_handler_161","int_handler_162","int_handler_163","int_handler_164","int_handler_165","int_handler_166","int_handler_167","int_handler_168","int_handler_169","int_handler_170","int_handler_171","int_handler_172","int_handler_173","int_handler_174","int_handler_175","int_handler_176","int_handler_177","int_handler_178","int_handler_179","int_handler_180","int_handler_181","int_handler_182","int_handler_183","int_handler_184","int_handler_185","int_handler_186","int_handler_187","int_handler_188","int_handler_189","int_handler_190","int_handler_191","int_handler_192","int_handler_193","int_handler_194","int_handler_195","int_handler_196","int_handler_197","int_handler_198","int_handler_199","int_handler_200","int_handler_201","int_handler_202","int_handler_203","int_handler_204","int_handler_205","int_handler_206","int_handler_207","int_handler_208","int_handler_209","int_handler_210","int_handler_211","int_handler_212","int_handler_213","int_handler_214","int_handler_215","int_handler_216","int_handler_217","int_handler_218","int_handler_219","int_handler_220","int_handler_221","int_handler_222","int_handler_223","int_handler_224","int_handler_225","int_handler_226","int_handler_227","int_handler_228","int_handler_229","int_handler_230","int_handler_231","int_handler_232","int_handler_233","int_handler_234","int_handler_235","int_handler_236","int_handler_237","int_handler_238","int_handler_239","int_handler_240","int_handler_241","int_handler_242","int_handler_243","int_handler_244","int_handler_245","int_handler_246","int_handler_247","int_handler_248","int_handler_249","int_handler_250","int_handler_251","int_handler_252","int_handler_253","int_handler_254","int_handler_255","int_handler_32","int_handler_33","int_handler_34","int_handler_35","int_handler_36","int_handler_37","int_handler_38","int_handler_39","int_handler_40","int_handler_41","int_handler_42","int_handler_43","int_handler_44","int_handler_45","int_handler_46","int_handler_47","int_handler_48","int_handler_49","int_handler_50","int_handler_51","int_handler_52","int_handler_53","int_handler_54","int_handler_55","int_handler_56","int_handler_57","int_handler_58","int_handler_59","int_handler_60","int_handler_61","int_handler_62","int_handler_63","int_handler_64","int_handler_65","int_handler_66","int_handler_67","int_handler_68","int_handler_69","int_handler_70","int_handler_71","int_handler_72","int_handler_73","int_handler_74","int_handler_75","int_handler_76","int_handler_77","int_handler_78","int_handler_79","int_handler_80","int_handler_81","int_handler_82","int_handler_83","int_handler_84","int_handler_85","int_handler_86","int_handler_87","int_handler_88","int_handler_89","int_handler_90","int_handler_91","int_handler_92","int_handler_93","int_handler_94","int_handler_95","int_handler_96","int_handler_97","int_handler_98","int_handler_99","Tss","TssStacks","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","inner","into","into","new","set_privilege_stack","stacks","take_interrupt_stack","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","are_enabled","debug","disable","enable","enable_and_nop64","wait","without","FrameNotPresent","Level1","Level1","Level2","Level2","Level3","Level3","Level4","Size1GiB","Size1GiB","Size2MiB","Size2MiB","Size4KiB","Size4KiB","WalkTableIterResult","WalkTableResult","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_pml4","init","init","init","init","init","init","into","into","into","into","into","into","iter","iter","iter","iter","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Pfa","allocate_frame","borrow","borrow_mut","deallocate_frame","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","AddressSpace","KernelStack","MAX_STACK_COUNT","PAGE_FLAGS","Stack","StackLimitHit","StackType","Stacks","TY","USER_HEAP_TOP","USER_STACK_TOP","UserStack","VIRT_STACK_PAGES","VIRT_STACK_SIZE","VIRT_STACK_SIZE_ALL","base_alloc","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cleanup","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","empty","eq","eq","eq","extent_4k_pages","extra_alloc","fmt","fmt","fmt","fmt","free","from","from","from","from","from","from","grow","guard_page","init","init","init","init","init","init","init","into","into","into","into","into","into","kernel_stacks","limit_4k_pages","new","new","new","page_fault","page_map","region","region","region","take","take_kernel_stack_lazy","take_kernel_stack_prealloc","take_lazy","take_prealloc","take_user_stack_lazy","take_user_stack_prealloc","to_owned","to_owned","to_owned","to_owned","top","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","user_stacks","vzip","vzip","vzip","vzip","vzip","vzip","with_limit","SyscallRegs","arg0","arg1","arg2","arg3","arg4","borrow","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","from","init","init","into","rflags","set_handler","syscall_id","to_string","try_from","try_into","type_id","user_instr_ptr","user_stack_ptr","userland","vzip","ThreadLocalStorage","borrow","borrow_mut","cpu","deref","deref_mut","drop","from","init","init","init","into","kernel_stack","try_from","try_into","type_id","user_stack","vzip","CURRENT_ADDRESS_SPACE","HIGHER_HALF_DIRECT_MAPPING","KERNEL_EXECUTABLE","KERNEL_EXECUTABLE_MAPS","KERNEL_STACKS","MapToError","NotAligned","Overflow","PageMap","TryMapSizedError","WrongSize","activate","borrow","borrow","borrow_mut","borrow_mut","cr3","current","debug","deref","deref","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","init","init","into","into","is_active","is_mapped","map","mark_owned","new","page_fault","phys_to_virt","try_from","try_from","try_into","try_into","type_id","type_id","unmap","virt_to_phys","vzip","vzip"],"q":[[0,"hyperion_arch"],[16,"hyperion_arch::context"],[37,"hyperion_arch::cpu"],[62,"hyperion_arch::cpu::gdt"],[99,"hyperion_arch::cpu::idt"],[115,"hyperion_arch::cpu::ints"],[139,"hyperion_arch::cpu::ints::other"],[363,"hyperion_arch::cpu::tss"],[397,"hyperion_arch::int"],[404,"hyperion_arch::paging"],[501,"hyperion_arch::pmm"],[516,"hyperion_arch::stack"],[654,"hyperion_arch::syscall"],[683,"hyperion_arch::tls"],[701,"hyperion_arch::vmm"],[751,"x86_64::addr"],[752,"core::ops::range"],[753,"core::fmt"],[754,"core::fmt"],[755,"core::any"],[756,"x86_64::structures::idt"],[757,"x86_64::structures::idt"],[758,"core::ops::function"],[759,"x86_64::structures::paging::page_table"],[760,"x86_64::structures::paging::page_table"],[761,"x86_64::structures::paging::frame"],[762,"core::fmt"],[763,"core::cmp"],[764,"hyperion_mem::vmm"],[765,"hyperion_mem::vmm"],[766,"core::mem::maybe_uninit"],[767,"x86_64::structures::paging::page"],[768,"x86_64::addr"]],"d":["","","","<code>HCF</code> - halt the cpu forever","","","","","","","","","","","<code>PageMap</code> is the Page Table Manager","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Safety","","","Safety","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Safety","","","","","","","","","","","","","","","","","","","PT (Page Table)","","PD (Page Directory)","","PDP (Page Directory Pointer)","","PML4 (Level 4 Page Map)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","also the max thread count per process","","stacks have a guard page to trigger the page fault","","","","","","the first frame of the stack","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","size of the stack in 4k pages, used in PageFault stack …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","won’t allocate the stack, this only makes sure the guard …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","limit how much the stack is allowed to grow, in 4k pages …","","","","","","","","","Safety","","","","","","","","","","","the location of where the top of the stack is mapped in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","init <code>syscall</code> and <code>sysret</code>","","Calls <code>U::from(self)</code>.","","","","","","","","","","jump into the instruction pointer with a given stack and …","","","","","GDT + IDT + TSS","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","kernel stack for syscalls","","","","temporary store for user space stack","","","","","level 3 entries 510 and 511 in level 4 entry 511","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Safety","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,7,0,13,13,13,13,13,13,13,13,13,0,13,0,13,0,13,13,0,13,13,13,0,13,13,13,0,0,15,14,15,14,14,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,14,14,15,15,14,15,14,15,14,15,14,14,14,15,14,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,20,16,20,16,16,20,16,20,16,20,16,20,16,20,16,20,16,16,20,16,16,16,20,16,20,16,20,16,20,16,20,0,0,0,0,0,0,0,58,0,33,0,33,0,33,0,58,33,58,33,58,33,0,0,58,33,26,27,28,29,58,33,26,27,28,29,58,33,26,27,28,29,58,33,26,27,28,29,58,33,26,27,28,29,26,27,28,29,58,33,26,27,28,29,26,58,33,26,27,28,29,58,33,26,27,28,29,26,27,28,29,58,33,26,27,28,29,58,33,26,27,28,29,58,33,26,27,28,29,58,33,26,27,28,29,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,0,39,0,0,0,0,39,0,0,0,0,0,0,38,45,47,41,42,38,44,45,47,41,42,38,44,38,41,42,38,44,41,42,38,44,45,38,45,47,41,42,38,44,45,47,41,42,38,44,45,47,41,42,38,38,44,38,41,42,38,38,38,41,42,38,44,45,45,47,41,42,38,44,38,38,45,47,41,42,38,38,44,45,47,41,42,38,44,47,38,45,47,38,38,47,39,41,42,45,47,47,45,45,47,47,41,42,38,44,38,45,47,41,42,38,44,45,47,41,42,38,44,45,47,41,42,38,44,47,45,47,41,42,38,44,38,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,50,50,50,0,50,50,50,50,50,50,50,0,50,0,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,0,0,0,0,0,54,54,54,0,0,54,11,11,54,11,54,11,11,11,11,54,11,54,11,11,54,54,11,54,11,54,11,54,11,11,11,11,11,11,11,11,54,11,54,11,54,11,11,11,54],"f":"``{{}b}{{}d}1```{{}f}2`{{}{{j{h}}}}```3`{ce{}{}}0`{lc{}}0{lb}{{nA`}{{Ad{bAb}}}}{cc{}}`{{}l}5{Afn}{{Afh}n}`{{nn}b}`{c{{Ad{e}}}{}{}}0{cAh{}}:`::{AjAj}{{ce}b{}{}};;:{{AjA`}{{Ad{bAb}}}}9````{{}b}9>`>55``4>``>>>>{AlAl}3>>>>=={{AnA`}{{Ad{bAb}}}}{{AlA`}{{Ad{bAb}}}}==<<{ce{}{}}0``{Anb}{B`An}2;;;;::``22`22{lc{}}0{lb}{{BbA`}{{Ad{bAb}}}}{cc{}}{{}l}7{Bbb}{B`Bb}{c{{Ad{e}}}{}{}}0{cAh{}};``{{Bdf}b}{Bdb}0000{{Bdf}d}212{Bdd}2`2{{BdBf}b}443434333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333``{ce{}{}}000{{}B`}????>>{{B`A`}{{Ad{bAb}}}}{{BhA`}{{Ad{bAb}}}}>>==`332{{B`h}b}`{Bh{{Bl{Bj}}}}<<<<;;55{{}Bn}{{}b}0000{ec{}{{Cb{}{{C`{c}}}}}}````````````````888888888888{lc{}}00000000000{lb}00000{{CdA`}{{Ad{bAb}}}}{{CfA`}{{Ad{bAb}}}}{{ChA`}{{Ad{bAb}}}}{{CjA`}{{Ad{bAb}}}}{cc{}}00000{ClCd}{{}l}00000{ce{}{}}00000{Cd{{`{{Df{}{{Cn{{Dd{lD`Db}}}}}}}}}}{Cf{{`{{Df{}{{Cn{{Dd{lD`Db}}}}}}}}}}{Ch{{`{{Df{}{{Cn{{Dd{lD`Db}}}}}}}}}}{Cj{{`{{Df{}{{Cn{{Dd{lD`Db}}}}}}}}}}{c{{Ad{e}}}{}{}}00000000000{cAh{}}00000666666`{Dh{{Bl{Dj}}}}77{{DhDj}b}{lc{}}0{lb}=;:554:````````````````::::::::::::{{{Dl{c}}Af}b{DnE`}}{EbEb}{EdEd}{{{Dl{c}}}{{Dl{c}}}Ef}{EhEh}{{ce}b{}{}}000{{}{{Ej{c}}}{DnE`}}{{}{{Dl{c}}}{}}9999999999998888{{{Dl{c}}}b{}}991{{EbEb}Bn}{{EdEd}Bn}{{{Dl{c}}{Dl{c}}}BnEl}``{{EbA`}{{Ad{bAb}}}}{{EdA`}{{Ad{bAb}}}}{{{Dl{c}}A`}{{Ad{bAb}}}E`}{{EhA`}{{Ad{bAb}}}}{{{Ej{c}}{Dl{c}}}b{DnE`}}{cc{}}00000{{{Dl{c}}Aff}{{Ad{bEh}}}{DnE`}}{{{Dl{c}}}h{DnE`}}{{}l}0000{{{Dl{c}}Af}b{DnE`}}1{ce{}{}}00000``{{}{{Ej{c}}}{DnE`}}{AfEn}{h{{Dl{c}}}{DnE`}}{{{Dl{c}}Aff}{{Ad{F`Fb}}}{DnE`}}`{{}{{j{f}}}}00{{{Ej{c}}}{{Dl{c}}}{DnE`}}{En{{Dl{Eb}}}}{{Enf}{{Dl{Eb}}}}{{{Ej{c}}Af}{{Dl{c}}}{DnE`}}{{{Ej{c}}Aff}{{Dl{c}}}{DnE`}}{En{{Dl{Ed}}}}{{Enf}{{Dl{Ed}}}}<<<<`{c{{Ad{e}}}{}{}}00000000000{cAh{}}00000`>>>>>>{{hf}{{Dl{c}}}{DnE`}}``````??{{}Fd}{lc{}}0{lb}{{FdA`}{{Ad{bAb}}}}0{cc{}}{Alb}{{}l}{ce{}{}}`{{}b}`{cFf{}}<<;``{{hhff}d}3`33`9986{Fhb}5{{{Fj{Fh}}Aj}Fh}5`??>`5```````````{Afb}6666{AfDj}{{}Af}2>>>>2=={{{Fl{c}}A`}{{Ad{bAb}}}{E`Fn}}<<::99{AfBn}{{Af{j{h}}D`}Bn}{{Af{j{h}}G`D`}b}64{{AfhGb}{{Ad{F`Fb}}}}{{AfG`}h}{c{{Ad{e}}}{}{}}000{cAh{}}0{{Af{j{h}}}b}{{Afh}{{Bl{G`}}}}{ce{}{}}0","c":[],"p":[[1,"unit"],[1,"never"],[1,"u64"],[5,"VirtAddr",751],[5,"Range",752],[1,"usize"],[5,"Context",16],[5,"Formatter",753],[5,"Error",753],[6,"Result",754],[5,"PageMap",701],[5,"TypeId",755],[5,"CpuState",37],[5,"SegmentSelectors",62],[5,"Gdt",62],[5,"Tss",363],[5,"Idt",99],[5,"InterruptStackFrame",756],[5,"PageFaultErrorCode",756],[5,"TssStacks",363],[1,"u16"],[6,"Option",757],[1,"bool"],[17,"Output"],[10,"FnOnce",758],[5,"Level4",404],[5,"Level3",404],[5,"Level2",404],[5,"Level1",404],[5,"PageTable",759],[17,"Item"],[5,"PageTableFlags",759],[6,"WalkTableIterResult",404],[1,"tuple"],[10,"Iterator",760],[5,"Pfa",501],[5,"PhysFrame",761],[5,"Stack",516],[10,"StackType",516],[10,"Debug",753],[5,"KernelStack",516],[5,"UserStack",516],[10,"Clone",762],[5,"StackLimitHit",516],[5,"Stacks",516],[10,"PartialEq",763],[5,"AddressSpace",516],[5,"NotHandled",764],[5,"Handled",764],[5,"SyscallRegs",654],[5,"String",765],[5,"ThreadLocalStorage",683],[20,"MaybeUninit",766],[6,"TryMapSizedError",701],[10,"PageSize",767],[5,"PhysAddr",751],[6,"Privilege",764],[6,"WalkTableResult",404]],"b":[[666,"impl-Debug-for-SyscallRegs"],[667,"impl-Display-for-SyscallRegs"]]}],\
["hyperion_arch_x86_64",{"doc":"","t":"CCHHHCCCHHCHCCCHFNNONNNNNONNNNOHONNNNFNNNNNNNNNCOCOHNNCNNNCONNFFNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNOONNFNNNNNNNNNNNNNNNJJHHHHHHHHHHHHCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHFFNNNNNNNNNNNNNNNNNONNNNONNNNNNNNNHHHHHHHPFPFPFPFPPPPPPGGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNFFSTFFKFTSSFSSSONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNOMNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNONNNNNNNFOOOOONNNNNNNNNHNNOHONNNNOOHNFNNONNNNHNNNONNNONSSSJSPPPFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["context","cpu","dbg_cpu","die","init","int","paging","pmm","rng_seed","spin_loop","stack","stack_pages","syscall","tls","vmm","wake_cpus","Context","borrow","borrow_mut","cr3","deref","deref_mut","drop","fmt","from","fs","init","into","invalid","new","rsp","switch","syscall_stack","try_from","try_into","type_id","vzip","CpuState","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","gdt","gdt","idt","idt","init","init","into","ints","to_owned","try_from","try_into","tss","tss","type_id","vzip","Gdt","SegmentSelectors","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","kernel_code","kernel_data","load","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","user_code","user_data","vzip","vzip","Idt","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","load","new","try_from","try_into","type_id","vzip","GP_FAULT_HANDLER","PAGE_FAULT_HANDLER","alignment_check","bound_range_exceeded","breakpoint","debug","device_not_available","divide_error","double_fault","general_protection_fault","invalid_opcode","invalid_tss","machine_check","non_maskable_interrupt","other","overflow","page_fault","security_exception","segment_not_present","simd_floating_point","stack_segment_fault","virtualization","vmm_communication_exception","x87_floating_point","int_handler_100","int_handler_101","int_handler_102","int_handler_103","int_handler_104","int_handler_105","int_handler_106","int_handler_107","int_handler_108","int_handler_109","int_handler_110","int_handler_111","int_handler_112","int_handler_113","int_handler_114","int_handler_115","int_handler_116","int_handler_117","int_handler_118","int_handler_119","int_handler_120","int_handler_121","int_handler_122","int_handler_123","int_handler_124","int_handler_125","int_handler_126","int_handler_127","int_handler_128","int_handler_129","int_handler_130","int_handler_131","int_handler_132","int_handler_133","int_handler_134","int_handler_135","int_handler_136","int_handler_137","int_handler_138","int_handler_139","int_handler_140","int_handler_141","int_handler_142","int_handler_143","int_handler_144","int_handler_145","int_handler_146","int_handler_147","int_handler_148","int_handler_149","int_handler_150","int_handler_151","int_handler_152","int_handler_153","int_handler_154","int_handler_155","int_handler_156","int_handler_157","int_handler_158","int_handler_159","int_handler_160","int_handler_161","int_handler_162","int_handler_163","int_handler_164","int_handler_165","int_handler_166","int_handler_167","int_handler_168","int_handler_169","int_handler_170","int_handler_171","int_handler_172","int_handler_173","int_handler_174","int_handler_175","int_handler_176","int_handler_177","int_handler_178","int_handler_179","int_handler_180","int_handler_181","int_handler_182","int_handler_183","int_handler_184","int_handler_185","int_handler_186","int_handler_187","int_handler_188","int_handler_189","int_handler_190","int_handler_191","int_handler_192","int_handler_193","int_handler_194","int_handler_195","int_handler_196","int_handler_197","int_handler_198","int_handler_199","int_handler_200","int_handler_201","int_handler_202","int_handler_203","int_handler_204","int_handler_205","int_handler_206","int_handler_207","int_handler_208","int_handler_209","int_handler_210","int_handler_211","int_handler_212","int_handler_213","int_handler_214","int_handler_215","int_handler_216","int_handler_217","int_handler_218","int_handler_219","int_handler_220","int_handler_221","int_handler_222","int_handler_223","int_handler_224","int_handler_225","int_handler_226","int_handler_227","int_handler_228","int_handler_229","int_handler_230","int_handler_231","int_handler_232","int_handler_233","int_handler_234","int_handler_235","int_handler_236","int_handler_237","int_handler_238","int_handler_239","int_handler_240","int_handler_241","int_handler_242","int_handler_243","int_handler_244","int_handler_245","int_handler_246","int_handler_247","int_handler_248","int_handler_249","int_handler_250","int_handler_251","int_handler_252","int_handler_253","int_handler_254","int_handler_255","int_handler_32","int_handler_33","int_handler_34","int_handler_35","int_handler_36","int_handler_37","int_handler_38","int_handler_39","int_handler_40","int_handler_41","int_handler_42","int_handler_43","int_handler_44","int_handler_45","int_handler_46","int_handler_47","int_handler_48","int_handler_49","int_handler_50","int_handler_51","int_handler_52","int_handler_53","int_handler_54","int_handler_55","int_handler_56","int_handler_57","int_handler_58","int_handler_59","int_handler_60","int_handler_61","int_handler_62","int_handler_63","int_handler_64","int_handler_65","int_handler_66","int_handler_67","int_handler_68","int_handler_69","int_handler_70","int_handler_71","int_handler_72","int_handler_73","int_handler_74","int_handler_75","int_handler_76","int_handler_77","int_handler_78","int_handler_79","int_handler_80","int_handler_81","int_handler_82","int_handler_83","int_handler_84","int_handler_85","int_handler_86","int_handler_87","int_handler_88","int_handler_89","int_handler_90","int_handler_91","int_handler_92","int_handler_93","int_handler_94","int_handler_95","int_handler_96","int_handler_97","int_handler_98","int_handler_99","Tss","TssStacks","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","inner","into","into","new","set_privilege_stack","stacks","take_interrupt_stack","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","are_enabled","debug","disable","enable","enable_and_nop64","wait","without","FrameNotPresent","Level1","Level1","Level2","Level2","Level3","Level3","Level4","Size1GiB","Size1GiB","Size2MiB","Size2MiB","Size4KiB","Size4KiB","WalkTableIterResult","WalkTableResult","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_pml4","init","init","init","init","init","init","into","into","into","into","into","into","iter","iter","iter","iter","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Pfa","allocate_frame","borrow","borrow_mut","deallocate_frame","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","vzip","AddressSpace","KernelStack","MAX_STACK_COUNT","PAGE_FLAGS","Stack","StackLimitHit","StackType","Stacks","TY","USER_HEAP_TOP","USER_STACK_TOP","UserStack","VIRT_STACK_PAGES","VIRT_STACK_SIZE","VIRT_STACK_SIZE_ALL","base_alloc","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cleanup","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","empty","eq","eq","eq","extent_4k_pages","extra_alloc","fmt","fmt","fmt","fmt","free","from","from","from","from","from","from","grow","guard_page","init","init","init","init","init","init","init","into","into","into","into","into","into","kernel_stacks","limit_4k_pages","new","new","new","page_fault","page_map","region","region","region","take","take_kernel_stack_lazy","take_kernel_stack_prealloc","take_lazy","take_prealloc","take_user_stack_lazy","take_user_stack_prealloc","to_owned","to_owned","to_owned","to_owned","top","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","user_stacks","vzip","vzip","vzip","vzip","vzip","vzip","with_limit","SyscallRegs","arg0","arg1","arg2","arg3","arg4","borrow","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","from","init","init","into","rflags","set_handler","syscall_id","to_string","try_from","try_into","type_id","user_instr_ptr","user_stack_ptr","userland","vzip","ThreadLocalStorage","borrow","borrow_mut","cpu","deref","deref_mut","drop","from","init","init","init","into","kernel_stack","try_from","try_into","type_id","user_stack","vzip","CURRENT_ADDRESS_SPACE","HIGHER_HALF_DIRECT_MAPPING","KERNEL_EXECUTABLE","KERNEL_EXECUTABLE_MAPS","KERNEL_STACKS","MapToError","NotAligned","Overflow","PageMap","TryMapSizedError","WrongSize","activate","borrow","borrow","borrow_mut","borrow_mut","cr3","current","debug","deref","deref","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","init","init","into","into","is_active","is_mapped","map","mark_owned","new","page_fault","phys_to_virt","try_from","try_from","try_into","try_into","type_id","type_id","unmap","virt_to_phys","vzip","vzip"],"q":[[0,"hyperion_arch_x86_64"],[16,"hyperion_arch_x86_64::context"],[37,"hyperion_arch_x86_64::cpu"],[62,"hyperion_arch_x86_64::cpu::gdt"],[99,"hyperion_arch_x86_64::cpu::idt"],[115,"hyperion_arch_x86_64::cpu::ints"],[139,"hyperion_arch_x86_64::cpu::ints::other"],[363,"hyperion_arch_x86_64::cpu::tss"],[397,"hyperion_arch_x86_64::int"],[404,"hyperion_arch_x86_64::paging"],[501,"hyperion_arch_x86_64::pmm"],[516,"hyperion_arch_x86_64::stack"],[654,"hyperion_arch_x86_64::syscall"],[683,"hyperion_arch_x86_64::tls"],[701,"hyperion_arch_x86_64::vmm"],[751,"x86_64::addr"],[752,"core::ops::range"],[753,"core::fmt"],[754,"core::fmt"],[755,"core::any"],[756,"x86_64::structures::idt"],[757,"x86_64::structures::idt"],[758,"core::ops::function"],[759,"x86_64::structures::paging::page_table"],[760,"x86_64::structures::paging::page_table"],[761,"x86_64::structures::paging::page"],[762,"x86_64::structures::paging::frame"],[763,"core::fmt"],[764,"core::cmp"],[765,"hyperion_mem::vmm"],[766,"alloc::string"],[767,"core::mem::maybe_uninit"],[768,"x86_64::structures::paging::page"]],"d":["","","","<code>HCF</code> - halt the cpu forever","","","","","","","","","","","<code>PageMap</code> is the Page Table Manager","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Safety","","","Safety","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Safety","","","","","","","","","","","","","","","","","","","PT (Page Table)","","PD (Page Directory)","","PDP (Page Directory Pointer)","","PML4 (Level 4 Page Map)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","also the max thread count per process","","stacks have a guard page to trigger the page fault","","","","","","the first frame of the stack","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","size of the stack in 4k pages, used in PageFault stack …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","won’t allocate the stack, this only makes sure the guard …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","limit how much the stack is allowed to grow, in 4k pages …","","","","","","","","","Safety","","","","","","","","","","","the location of where the top of the stack is mapped in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","init <code>syscall</code> and <code>sysret</code>","","Calls <code>U::from(self)</code>.","","","","","","","","","","jump into the instruction pointer with a given stack and …","","","","","GDT + IDT + TSS","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","kernel stack for syscalls","","","","temporary store for user space stack","","","","","level 3 entries 510 and 511 in level 4 entry 511","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Safety","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,7,0,13,13,13,13,13,13,13,13,13,0,13,0,13,0,13,13,0,13,13,13,0,13,13,13,0,0,15,14,15,14,14,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,14,14,15,15,14,15,14,15,14,15,14,14,14,15,14,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,20,16,20,16,16,20,16,20,16,20,16,20,16,20,16,20,16,16,20,16,16,16,20,16,20,16,20,16,20,16,20,0,0,0,0,0,0,0,58,0,33,0,33,0,33,0,58,33,58,33,58,33,0,0,58,33,26,27,28,29,58,33,26,27,28,29,58,33,26,27,28,29,58,33,26,27,28,29,58,33,26,27,28,29,26,27,28,29,58,33,26,27,28,29,26,58,33,26,27,28,29,58,33,26,27,28,29,26,27,28,29,58,33,26,27,28,29,58,33,26,27,28,29,58,33,26,27,28,29,58,33,26,27,28,29,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,0,40,0,0,0,0,40,0,0,0,0,0,0,39,46,48,42,43,39,45,46,48,42,43,39,45,39,42,43,39,45,42,43,39,45,46,39,46,48,42,43,39,45,46,48,42,43,39,45,46,48,42,43,39,39,45,39,42,43,39,39,39,42,43,39,45,46,46,48,42,43,39,45,39,39,46,48,42,43,39,39,45,46,48,42,43,39,45,48,39,46,48,39,39,48,40,42,43,46,48,48,46,46,48,48,42,43,39,45,39,46,48,42,43,39,45,46,48,42,43,39,45,46,48,42,43,39,45,48,46,48,42,43,39,45,39,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,50,50,50,0,50,50,50,50,50,50,50,0,50,0,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,0,0,0,0,0,54,54,54,0,0,54,10,10,54,10,54,10,10,10,10,54,10,54,10,10,54,54,10,54,10,54,10,54,10,10,10,10,10,10,10,10,54,10,54,10,54,10,10,10,54],"f":"``{{}b}{{}d}1```{{}f}2`{{}{{j{h}}}}```3`{ce{}{}}0`{lc{}}0{lb}{{nA`}Ab}{cc{}}`{{}l}5{Adn}{{Adh}n}`{{nn}b}`{c{{Af{e}}}{}{}}0{cAh{}}:`::{AjAj}{{ce}b{}{}};;:{{AjA`}Ab}9````{{}b}9>`>55``4>``>>>>{AlAl}3>>>>=={{AnA`}Ab}{{AlA`}Ab}==<<{ce{}{}}0``{Anb}{B`An}2;;;;::``22`22{lc{}}0{lb}{{BbA`}Ab}{cc{}}{{}l}7{Bbb}{B`Bb}{c{{Af{e}}}{}{}}0{cAh{}};``{{Bdf}b}{Bdb}0000{{Bdf}d}212{Bdd}2`2{{BdBf}b}443434333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333``{ce{}{}}000{{}B`}????>>{{B`A`}Ab}{{BhA`}Ab}>>==`332{{B`h}b}`{Bh{{Bl{Bj}}}}<<<<;;55{{}Bn}{{}b}0000{ec{}{{Cb{}{{C`{c}}}}}}````````````````888888888888{lc{}}00000000000{lb}00000{{CdA`}Ab}{{CfA`}Ab}{{ChA`}Ab}{{CjA`}Ab}{cc{}}00000{ClCd}{{}l}00000{ce{}{}}00000{Cd{{`{{Df{}{{Cn{{Dd{lD`Db}}}}}}}}}}{Cf{{`{{Df{}{{Cn{{Dd{lD`Db}}}}}}}}}}{Ch{{`{{Df{}{{Cn{{Dd{lD`Db}}}}}}}}}}{Cj{{`{{Df{}{{Cn{{Dd{lD`Db}}}}}}}}}}{c{{Af{e}}}{}{}}00000000000{cAh{}}00000666666`{Dh{{Bl{{Dl{Dj}}}}}}77{{Dh{Dl{Dj}}}b}{lc{}}0{lb}=;:554:````````````````::::::::::::{{{Dn{c}}Ad}b{E`Eb}}{EdEd}{EfEf}{{{Dn{c}}}{{Dn{c}}}Eh}{EjEj}{{ce}b{}{}}000{{}{{El{c}}}{E`Eb}}{{}{{Dn{c}}}{}}99999999999988888{{{Dn{c}}}b{}}91{{EdEd}Bn}{{EfEf}Bn}{{{Dn{c}}{Dn{c}}}BnEn}``{{EdA`}Ab}{{EfA`}Ab}{{{Dn{c}}A`}AbEb}{{EjA`}Ab}{{{El{c}}{Dn{c}}}b{E`Eb}}{cc{}}00000{{{Dn{c}}Adf}{{Af{bEj}}}{E`Eb}}{{{Dn{c}}}h{E`Eb}}{{}l}000{{{Dn{c}}Ad}b{E`Eb}}11{ce{}{}}00000``{{}{{El{c}}}{E`Eb}}{AdF`}{h{{Dn{c}}}{E`Eb}}{{{Dn{c}}Adf}Fb{E`Eb}}`{{}{{j{f}}}}00{{{El{c}}}{{Dn{c}}}{E`Eb}}{F`{{Dn{Ed}}}}{{F`f}{{Dn{Ed}}}}{{{El{c}}Ad}{{Dn{c}}}{E`Eb}}{{{El{c}}Adf}{{Dn{c}}}{E`Eb}}{F`{{Dn{Ef}}}}{{F`f}{{Dn{Ef}}}}<<<<`{c{{Af{e}}}{}{}}00000000000{cAh{}}00000`>>>>>>{{hf}{{Dn{c}}}{E`Eb}}``````??{{}Fd}{lc{}}0{lb}{{FdA`}Ab}0{cc{}}{Alb}{{}l}{ce{}{}}`{{}b}`{cFf{}}<<;``{{hhff}d}3`33`9986{Fhb}5{{{Fj{Fh}}Aj}Fh}5`??>`5```````````{Adb}6666{AdDl}{{}Ad}2>>>>2=={{{Fl{c}}A`}Ab{EbFn}}<<::99{AdBn}{{Ad{j{h}}D`}Bn}{{Ad{j{h}}G`D`}b}64{{AdhGb}Fb}{{AdG`}h}{c{{Af{e}}}{}{}}000{cAh{}}0{{Ad{j{h}}}b}{{Adh}{{Bl{G`}}}}{ce{}{}}0","c":[],"p":[[1,"unit"],[1,"never"],[1,"u64"],[5,"VirtAddr",751],[5,"Range",752],[1,"usize"],[5,"Context",16],[5,"Formatter",753],[8,"Result",753],[5,"PageMap",701],[6,"Result",754],[5,"TypeId",755],[5,"CpuState",37],[5,"SegmentSelectors",62],[5,"Gdt",62],[5,"Tss",363],[5,"Idt",99],[5,"InterruptStackFrame",756],[5,"PageFaultErrorCode",756],[5,"TssStacks",363],[1,"u16"],[6,"Option",757],[1,"bool"],[17,"Output"],[10,"FnOnce",758],[5,"Level4",404],[5,"Level3",404],[5,"Level2",404],[5,"Level1",404],[5,"PageTable",759],[17,"Item"],[5,"PageTableFlags",759],[6,"WalkTableIterResult",404],[1,"tuple"],[10,"Iterator",760],[5,"Pfa",501],[6,"Size4KiB",761],[5,"PhysFrame",762],[5,"Stack",516],[10,"StackType",516],[10,"Debug",753],[5,"KernelStack",516],[5,"UserStack",516],[10,"Clone",763],[5,"StackLimitHit",516],[5,"Stacks",516],[10,"PartialEq",764],[5,"AddressSpace",516],[8,"PageFaultResult",765],[5,"SyscallRegs",654],[5,"String",766],[5,"ThreadLocalStorage",683],[20,"MaybeUninit",767],[6,"TryMapSizedError",701],[10,"PageSize",761],[5,"PhysAddr",751],[6,"Privilege",765],[6,"WalkTableResult",404]],"b":[[666,"impl-Display-for-SyscallRegs"],[667,"impl-Debug-for-SyscallRegs"]]}],\
["hyperion_backtrace",{"doc":"","t":"GIPPPFPPPHNNNNNNNNNNONNHHHHHOHONNNNNNNHH","n":["BacktraceError","BacktraceResult","ElfNotLoaded","ElfParse","Err","FrameInfo","Inner","NoSymtabOrStrtab","Ok","base_ptr","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","instr_ptr","into","into","kernel_base","print_backtrace","print_backtrace_from","print_symtab","symbol","symbol_name","symbol_noerr","symbol_offs","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwind_stack","unwind_stack_from"],"q":[[0,"hyperion_backtrace"],[40,"x86_64::addr"],[41,"core::fmt"],[42,"core::fmt"],[43,"core::any"],[44,"core::ops::function"]],"d":["","","","","Contains the error value","","","","Contains the success value","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Safety","","returns the <code>symbol_name + offset</code> for the provided …","","","","","","","","","","","","Safety"],"i":[0,0,4,4,14,0,4,4,14,0,4,2,4,2,2,2,4,2,4,2,2,4,2,0,0,0,0,0,2,0,2,2,4,2,4,2,4,2,0,0],"f":"`````````{{}b}{ce{}{}}000{dd}{{ce}f{}{}}{{hj}l}{{dj}l}{cc{}}0`55{{}n}{{}f}{bf}{{}{{A`{fh}}}}{n{{A`{{Af{AbAd}}h}}}}`{nd}`;{c{{A`{e}}}{}{}}000{cAh{}}0{cf{{Aj{d}}}}{{bc}f{{Aj{d}}}}","c":[],"p":[[5,"VirtAddr",40],[5,"FrameInfo",0],[1,"unit"],[6,"BacktraceError",0],[5,"Formatter",41],[8,"Result",41],[1,"u64"],[6,"Result",42],[1,"str"],[1,"usize"],[1,"tuple"],[5,"TypeId",43],[10,"FnMut",44],[8,"BacktraceResult",0]],"b":[]}],\
["hyperion_bitmap",{"doc":"","t":"FFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["AtomicBitmap","Bitmap","borrow","borrow","borrow_mut","borrow_mut","default","fill","fill","fmt","from","from","from","from","from_mut","get","into","into","is_empty","is_empty","iter","iter_bytes","iter_false","iter_true","len","len","load","new","new","set","store","swap","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"hyperion_bitmap"],[38,"core::sync::atomic"],[39,"core::fmt"],[40,"core::fmt"],[41,"core::iter::traits::iterator"],[42,"core::sync::atomic"],[43,"core::any"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","iterator over indexes of 0 bits","iterator over indexes of 1 bits","","","","","","","","","","","","","",""],"i":[0,0,2,1,2,1,1,2,1,1,2,2,2,1,2,1,2,1,2,1,1,1,1,1,2,1,2,2,1,1,2,2,2,1,2,1,2,1],"f":"``{ce{}{}}000{{}b}{{dfh}j}{{bf}j}{{bl}n}{{{Ab{A`}}}d}{{{Ad{A`}}}d}{cc{}}01{{bAf}{{Ah{f}}}}88{df}{bf}{b{{`{{Al{}{{Aj{f}}}}}}}}{b{{`{{Al{}{{Aj{A`}}}}}}}}{b{{`{{Al{}{{Aj{Af}}}}}}}}0{dAf}{bAf}{{dAfh}{{Ah{f}}}}{{{Ad{An}}}d}{{{Ad{A`}}}b}{{bAff}{{Ah{j}}}}{{dAffh}{{Ah{j}}}}{{dAffh}{{Ah{f}}}}{c{{B`{e}}}{}{}}000{cBb{}}0","c":[],"p":[[5,"Bitmap",0],[5,"AtomicBitmap",0],[1,"bool"],[6,"Ordering",38],[1,"unit"],[5,"Formatter",39],[8,"Result",39],[1,"u8"],[1,"array"],[1,"slice"],[1,"usize"],[6,"Option",40],[17,"Item"],[10,"Iterator",41],[5,"AtomicU8",38],[6,"Result",42],[5,"TypeId",43]],"b":[[10,"impl-From%3C%26mut+%5Bu8;+N%5D%3E-for-AtomicBitmap%3C\'a%3E"],[11,"impl-From%3C%26mut+%5Bu8%5D%3E-for-AtomicBitmap%3C\'a%3E"]]}],\
["hyperion_boot",{"doc":"","t":"JJCHHHHHHHHHHHHHFNNNNONNNNHNONNONNNNO","n":["BOOT_STACK_SIZE","NAME","args","boot_cpu","cmdline","cpu_count","framebuffer","hhdm_offset","init","kernel_file","lapics","memmap","phys_addr","rsdp","smp_init","virt_addr","Arguments","borrow","borrow_mut","clone","clone_into","cmdline","default","eq","fmt","from","get","get","had_unrecognized","into","parse","serial_log_level","to_owned","try_from","try_into","type_id","video_log_level"],"q":[[0,"hyperion_boot"],[16,"hyperion_boot::args"],[37,"hyperion_boot_interface::smp"],[38,"core::option"],[39,"hyperion_boot_interface::framebuffer"],[40,"core::iter::traits::iterator"],[41,"hyperion_boot_interface::map"],[42,"core::fmt"],[43,"core::fmt"],[44,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14],"f":"```{{}b}{{}{{f{d}}}}{{}h}{{}{{f{j}}}}{{}l}{{}n}{{}{{f{{Ab{A`}}}}}}{{}{{`{{Ah{}{{Ad{Af}}}}}}}}{{}{{`{{Ah{}{{Ad{Aj}}}}}}}}6{{}{{f{n}}}}47`{ce{}{}}0{AlAl}{{ce}n{}{}}`{{}Al}{{AlAl}An}{{AlB`}Bb}{cc{}}33`6{dAl}`7{c{{Bd{e}}}{}{}}0{cBf{}}`","c":[],"p":[[5,"Cpu",37],[1,"str"],[6,"Option",38],[1,"usize"],[5,"FramebufferCreateInfo",39],[1,"u64"],[1,"unit"],[1,"u8"],[1,"slice"],[17,"Item"],[1,"u32"],[10,"Iterator",40],[5,"Memmap",41],[5,"Arguments",16],[1,"bool"],[5,"Formatter",42],[8,"Result",42],[6,"Result",43],[5,"TypeId",44]],"b":[]}],\
["hyperion_boot_interface",{"doc":"","t":"PFPFPFGPONNNNNNNNONNNNNNNNNNNNNNONNNNNNNNNNNNNOONOONNNNNNNNONNNNO","n":["BootloaderReclaimable","Cpu","Framebuffer","FramebufferCreateInfo","KernelAndModules","Memmap","Memtype","Usable","base","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","clone","clone","clone","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","height","into","into","into","into","is_boot","is_bootloader_reclaimable","is_bootloader_reclaimable","is_framebuffer","is_framebuffer","is_kernel_and_modules","is_kernel_and_modules","is_usable","is_usable","len","local_apic_id","new","pitch","processor_id","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","width"],"q":[[0,"hyperion_boot_interface"],[65,"core::fmt"],[66,"core::fmt"],[67,"core::any"]],"d":["","","","","","","","","physical address memory region base (bottom)","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the memtype is <code>BootloaderReclaimable</code>.","Returns <code>true</code> if the memtype is <code>BootloaderReclaimable</code>.","Returns <code>true</code> if the memtype is <code>Framebuffer</code>.","Returns <code>true</code> if the memtype is <code>Framebuffer</code>.","Returns <code>true</code> if the memtype is <code>KernelAndModules</code>.","Returns <code>true</code> if the memtype is <code>KernelAndModules</code>.","Returns <code>true</code> if the memtype is <code>Usable</code>.","Returns <code>true</code> if the memtype is <code>Usable</code>.","length of the memory region (top - bottom)","","","","","","","","","","","","","","","","","",""],"i":[2,0,2,0,2,0,0,2,1,10,1,2,3,10,1,2,3,10,1,2,3,1,2,3,1,2,3,3,10,1,2,3,10,10,1,2,3,3,1,2,1,2,1,2,1,2,1,3,3,10,3,10,1,2,3,10,1,2,3,1,10,1,2,3,10],"f":"`````````{ce{}{}}0000000`{bb}{dd}{ff}{{bb}h}{{dd}h}{{ff}h}{{bj}l}{{dj}l}{{fj}l}0{cc{}}000`::::{fh}{bh}{dh}101010``{{nn}f}``{c{{A`{e}}}{}{}}0000000`{cAb{}}000`","c":[],"p":[[5,"Memmap",0],[6,"Memtype",0],[5,"Cpu",0],[1,"bool"],[5,"Formatter",65],[8,"Result",65],[1,"u32"],[6,"Result",66],[5,"TypeId",67],[5,"FramebufferCreateInfo",0]],"b":[[26,"impl-Display-for-Cpu"],[27,"impl-Debug-for-Cpu"]]}],\
["hyperion_boot_limine",{"doc":"","t":"JJHHHHHHHHHHHHH","n":["BOOT_STACK_SIZE","NAME","boot_cpu","cmdline","cpu_count","framebuffer","hhdm_offset","init","kernel_file","lapics","memmap","phys_addr","rsdp","smp_init","virt_addr"],"q":[[0,"hyperion_boot_limine"],[15,"hyperion_boot_interface::smp"],[16,"core::option"],[17,"hyperion_boot_interface::framebuffer"],[18,"core::iter::traits::iterator"],[19,"hyperion_boot_interface::map"]],"d":["","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"``{{}b}{{}{{f{d}}}}{{}h}{{}{{f{j}}}}{{}l}{{}n}{{}{{f{{Ab{A`}}}}}}{{}{{`{{Ah{}{{Ad{Af}}}}}}}}{{}{{`{{Ah{}{{Ad{Aj}}}}}}}}6{{}{{f{n}}}}47","c":[],"p":[[5,"Cpu",15],[1,"str"],[6,"Option",16],[1,"usize"],[5,"FramebufferCreateInfo",17],[1,"u64"],[1,"unit"],[1,"u8"],[1,"slice"],[17,"Item"],[1,"u32"],[10,"Iterator",18],[5,"Memmap",19]],"b":[]}],\
["hyperion_clock",{"doc":"","t":"KFMNNNNNNNHNNMNHMNNNN","n":["ClockSource","NopClock","_apic_sleep_simple_blocking","_apic_sleep_simple_blocking","borrow","borrow_mut","deref","deref_mut","drop","from","get","init","into","nanosecond_now","nanosecond_now","set_source_picker","trigger_interrupt_at","trigger_interrupt_at","try_from","try_into","type_id"],"q":[[0,"hyperion_clock"],[21,"core::ops::function"],[22,"core::result"],[23,"core::any"]],"d":["","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,1,5,5,5,5,5,5,5,0,5,5,1,5,0,1,5,5,5,5],"f":"``{{bdf}h}{{jdf}h}{ce{}{}}0{lc{}}0{lh}{cc{}}{{}b}{{}l}5{bn}{jn}{{}h}{{bn}h}{{jn}h}{c{{A`{e}}}{}{}}0{cAb{}}","c":[],"p":[[10,"ClockSource",0],[1,"u16"],[10,"FnMut",21],[1,"unit"],[5,"NopClock",0],[1,"usize"],[1,"u128"],[6,"Result",22],[5,"TypeId",23]],"b":[]}],\
["hyperion_color",{"doc":"","t":"TTFTTTNNONNNNNNNNNNNONNONNN","n":["BLACK","BLUE","Color","GREEN","RED","WHITE","as_arr","as_u32","b","borrow","borrow_mut","clone","default","eq","fmt","from","from_hex","from_hex_bytes","from_hex_bytes_2","from_u32","g","into","new","r","try_from","try_into","type_id"],"q":[[0,"hyperion_color"],[27,"core::fmt"],[28,"core::fmt"],[29,"core::result"],[30,"core::any"]],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"``````{b{{f{d}}}}{bh}`{ce{}{}}0{bb}{{}b}{{bb}j}{{bl}n}{cc{}}{A`{{Ab{b}}}}{{{Ad{d}}}{{Ab{b}}}}{{{f{d}}}b}{hb}`9{{ddd}b}`{c{{Af{e}}}{}{}}0{cAh{}}","c":[],"p":[[5,"Color",0],[1,"u8"],[1,"array"],[1,"u32"],[1,"bool"],[5,"Formatter",27],[8,"Result",27],[1,"str"],[6,"Option",28],[1,"slice"],[6,"Result",29],[5,"TypeId",30]],"b":[]}],\
["hyperion_cpu_id",{"doc":"","t":"FNNHHHNNHNNNNNN","n":["Tls","borrow","borrow_mut","cpu_count","cpu_id","cpu_id_dyn_type","deref","from","init","inner","into","new","try_from","try_into","type_id"],"q":[[0,"hyperion_cpu_id"],[15,"core::cell"],[16,"core::ops::function"],[17,"core::result"],[18,"core::any"]],"d":["","","","<code>cpu_id()</code> &lt; <code>cpu_count()</code>","technically UB to read before a call to <code>init</code> on this CPU","","","Returns the argument unchanged.","initialize <code>cpu_id</code>","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,3,3,0,0,0,3,3,0,3,3,3,3,3,3],"f":"`{ce{}{}}0{{}b}0{{}d}{{{f{c}}}e{}{}}{cc{}}{{}h}{{{f{c}}}{{l{{j{c}}}}}{}}6{e{{f{c}}}{}{{A`{}{{n{c}}}}}}{c{{Ab{e}}}{}{}}0{cAd{}}","c":[],"p":[[1,"usize"],[1,"u8"],[5,"Tls",0],[1,"unit"],[5,"UnsafeCell",15],[1,"slice"],[17,"Output"],[10,"FnMut",16],[6,"Result",17],[5,"TypeId",18]],"b":[]}],\
["hyperion_defer",{"doc":"","t":"FFNNNNNNNNNNNNNNNNNNNN","n":["Defer","DeferInit","borrow","borrow","borrow_mut","borrow_mut","deref","deref_mut","drop","from","from","into","into","new","new","take","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"hyperion_defer"],[22,"core::ops::function"],[23,"core::result"],[24,"core::any"]],"d":["","aka mutable unsync lazy","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,4,1,4,1,1,1,4,4,1,4,1,4,1,4,4,1,4,1,4,1],"f":"``{ce{}{}}000{{{b{ec}}}g{}{{f{}{{d{c}}}}}{}}0{{{h{c}}}jf}{cc{}}033{c{{h{c}}}f}{e{{b{ec}}}{}{{f{}{{d{c}}}}}}{{{h{c}}}cf}{c{{l{e}}}{}{}}000{cn{}}0","c":[],"p":[[5,"DeferInit",0],[17,"Output"],[10,"FnOnce",22],[5,"Defer",0],[1,"unit"],[6,"Result",23],[5,"TypeId",24]],"b":[]}],\
["hyperion_driver_acpi",{"doc":"","t":"GGPPPPPPFFFFGFPPPFCNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCHNNNNNNNNNNNNNNNNNNCNCNNNNNNNHCCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSJFFFSFONNNNNNNNNNNNNNNNNNNNNNNONNNNHHNONNNNNNNHNNNNNNNNNNNNOOOOOOOOONNNONNOOOOOONNNNNNNNNNNNNIPFFFJFFGFFPFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNJFFFONNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNONNNNNNNNNNNNOPJFGPNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNPPPPJFGPNNNNNNNNNNNNNNNONNNNNNNNNNNONNNNNNNNNJFGPNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNN","n":["AcpiOem","AcpiVersion","Bochs","InvalidChecksum","InvalidRevision","InvalidSignature","InvalidStructure","Other","RawSdtHeader","ReadOnly","ReadWrite","Reserved","SdtError","StructUnpacker","Utf8Error","V1","V2","WriteOnly","apic","backtrack","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checksum_of","checksum_of_slice","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","hpet","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","ioapic","left","madt","new","next","next_unchecked","now_at","parse","read","read","read_unaligned_volatile","rsdp","rsdt","skip","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpack","write","write","APIC_PERIOD_MULT","APIC_TIMER_HANDLER","ApicId","ApicRegs","ApicTls","IRQ_APIC_SPURIOUS","Lapic","arbitration_priority","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","current","current","current_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","destination_format","drop","drop","drop","drop","enable","enable_timer","eoi","eoi","eq","fmt","fmt","from","from","from","from","get_apic_regs","hash","init","init","init","init","inner","into","into","into","into","is_ioapic_compatible","iter","lapic_id","lapic_ver","logical_destination","lvt_error","lvt_lint_0","lvt_lint_1","lvt_perf_mon_counters","lvt_thermal_sensor","lvt_timer","new","new","partial_cmp","processor_priority","regs","regs_mut","remote_read","spurious_interrupt_vector","task_priority","timer_current","timer_divide","timer_init","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","CounterValue","DoesntExist","GeneralCaps","GeneralConfig","GeneralInterruptStatus","HPET","Hpet","HpetDevice","HpetError","HpetRegs","RawHpetBits","Sdt","TimerN","TimerNConfigAndCaps","TimerNHandle","_apic_sleep_simple_blocking","as_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","caps","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comparator_count","comparator_value","config","config_and_caps","count_size_cap","counter_size","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","enable","femtos","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","fsb_enable","fsb_int_del_cap","handler","init","init","init","init","init","init","init","init","init","init","init","init","init","int_ack","int_enable","int_route","int_route_cap","int_trigger","interrupt_status","into","into","into","into","into","into","into","into","into","into","into","leg_rt","leg_rt_cap","legacy_replacement","len","main_counter_value","micros","millis","minutes","mode","nanos","nanos_to_deadline","nanos_to_ticks_i","nanos_to_ticks_u","nanosecond_now","next_timer","now_bytes","num_tim_cap","period","period","periodic_int_cap","picos","read","reserved","rev_id","seconds","set_comparator_count","set_comparator_value","set_config","set_config_and_caps","set_count_size_cap","set_counter_size","set_enable","set_fsb_enable","set_fsb_int_del_cap","set_int_enable","set_int_route","set_int_route_cap","set_int_trigger","set_interrupt_status","set_leg_rt","set_leg_rt_cap","set_legacy_replacement","set_len","set_main_counter_value","set_mode","set_num_tim_cap","set_period","set_periodic_int_cap","set_reserved","set_rev_id","set_size_cap","set_value_set","set_vendor_id","size_cap","sleep_until","ticks_to_nanos_i","ticks_to_nanos_u","timer_n_int_status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","trigger_interrupt_at","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_init","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_set","vendor_id","write","IO_APICS","IoApic","IoApicInfo","IoApicRegs","addr","any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","fmt","fmt","from","from","from","gsi_base","id","init","init","init","init","into","into","into","iter","register_select_register","set_irq","set_irq_any","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","window_register","DoesntExist","MADT","Madt","MadtError","Sdt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","from","from","from","init","init","init","into","into","io_apics","local_apic_addr","to_owned","to_owned","try_from","try_from","try_init","try_into","try_into","type_id","type_id","InvalidChecksum","InvalidRevision","InvalidSignature","NoRsdp","RSDP","Rsdp","RsdpError","Utf8Error","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","extended","fmt","fmt","from","from","from","get","init","init","init","into","into","ptr","to_owned","to_owned","try_from","try_from","try_init","try_into","try_into","type_id","type_id","RSDT","Rsdt","RsdtError","SdtHeader","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","extended","find_table","fmt","fmt","from","from","from","from","get","init","init","init","into","into","iter","iter_headers","to_owned","to_owned","try_from","try_from","try_init","try_into","try_into","type_id","type_id"],"q":[[0,"hyperion_driver_acpi"],[173,"hyperion_driver_acpi::apic"],[267,"hyperion_driver_acpi::hpet"],[520,"hyperion_driver_acpi::ioapic"],[573,"hyperion_driver_acpi::madt"],[615,"hyperion_driver_acpi::rsdp"],[660,"hyperion_driver_acpi::rsdt"],[703,"core::fmt"],[704,"core::fmt"],[705,"hyperion_static_str"],[706,"core::str::error"],[707,"core::option"],[708,"core::result"],[709,"core::marker"],[710,"core::cmp"],[711,"spin::rwlock"],[712,"spin"],[713,"core::hash"],[714,"core::iter::traits::iterator"],[715,"core::ops::function"],[716,"core::any"],[717,"spin::mutex"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitwise checksum:","bitwise checksum:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Safety","Returns the argument unchanged.","High Precision Event Timer","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Multiple APIC Descriptor Table","Safety","","Safety","","","","","Safety","Root System Description Pointer","Root/eXtended System Descriptor Table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Table 10-1 Local APIC Register Address Map","","","","","","","","","","","","","","","","","apic id of this processor","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Safety","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","has 64 bit mode capability?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","enable HPET","theoretical max u96 sized output","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","front side bus interrupt mapping enabled","has front side bus interrupt mapping capability?","","","","","","","","","","","","","","","handles a timer interrupt","enable interrupts","I/O APIC routing <code>int_route_cap</code>","interrupt routing capability","interrupt trigger mode 0 = edge-triggered 1 = …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","legacy replacement mapping","has legacy replacement mapping capability?","","","","theoretical max u67 sized output","theoretical max u57 sized output","theoretical max u41 sized output","active mode 0 = one-shot (non-periodic) 1 = periodic","theoretical max u77 sized output","<code>nanos</code> is nanos from now","","","","","","number of timers - 1","HPET counter period in femtoseconds","main counter tick period in femtoseconds","has periodic mode capability?","theoretical max u87 sized output","","","implementation revision ID","theoretical max u47 sized output","","","","","has 64 bit mode capability?","","enable HPET","front side bus interrupt mapping enabled","has front side bus interrupt mapping capability?","enable interrupts","I/O APIC routing <code>int_route_cap</code>","interrupt routing capability","interrupt trigger mode 0 = edge-triggered 1 = …","","legacy replacement mapping","has legacy replacement mapping capability?","","","","active mode 0 = one-shot (non-periodic) 1 = periodic","number of timers - 1","main counter tick period in femtoseconds","has periodic mode capability?","","implementation revision ID","has 64 bit mode capability?","write to periodic timer’s accumulator","PCI vendor ID","has 64 bit mode capability?","non blocking sleep, this triggers an interrupt after <code>dur</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","write to periodic timer’s accumulator","PCI vendor ID","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","register selector","","","","","","","","","","","","","register data","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Root/eXtended System Description Pointer","","","","","","","","","","","","","","","","","","<code>ptr</code> is XSDT pointer instead of RSDT pointer","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","a physical address of the Root/eXtended System Descriptor …","","","","","","","","","","RSDT/XSDT","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,6,9,9,9,9,6,0,0,0,0,0,0,9,7,7,0,0,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,0,0,6,7,8,9,1,6,7,8,9,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,6,7,8,9,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,6,7,8,9,9,1,1,0,0,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,0,1,0,1,1,1,1,8,11,16,0,0,0,1,6,7,8,9,1,11,16,17,18,6,7,7,8,9,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,1,16,17,0,0,0,0,0,0,0,32,31,28,26,32,31,28,26,32,26,26,26,28,26,28,31,31,28,26,32,31,28,26,32,32,31,28,26,32,0,0,28,32,26,26,32,31,28,26,32,0,26,31,28,26,32,26,31,28,26,32,26,26,32,32,32,32,32,32,32,32,32,31,26,26,32,28,28,32,32,32,32,32,32,26,31,28,26,32,31,28,26,32,31,28,26,32,0,44,0,0,0,0,0,0,0,0,0,44,0,0,0,39,41,41,39,53,49,51,44,43,45,46,47,48,41,39,53,49,51,44,43,45,46,47,48,39,44,43,45,46,47,48,44,43,45,46,47,48,48,49,39,49,43,48,41,39,53,49,51,51,44,43,45,46,47,48,41,39,53,49,51,51,44,43,45,46,47,48,41,39,53,49,51,51,44,43,45,46,47,48,45,39,39,53,49,51,44,43,45,46,47,48,41,39,53,49,51,44,44,43,45,46,47,48,46,46,49,41,39,39,53,49,49,51,44,43,45,46,47,48,39,46,46,46,46,39,41,39,53,49,51,44,43,45,46,47,48,45,43,48,41,39,39,39,39,46,39,39,39,39,39,39,39,43,39,43,46,39,41,48,43,39,48,49,39,49,43,48,45,46,46,46,46,46,46,39,45,43,48,41,39,46,43,43,46,48,43,46,46,43,46,49,39,39,47,44,43,45,46,47,48,39,41,39,53,49,51,44,43,45,46,47,48,39,41,39,53,49,51,44,43,45,46,47,48,41,39,53,49,51,44,43,45,46,47,48,46,43,41,0,0,0,0,59,57,57,60,59,57,60,59,59,59,57,60,59,57,60,59,57,60,59,59,60,59,57,60,59,59,59,57,57,60,59,57,60,59,57,60,57,57,59,57,60,59,57,60,59,57,60,59,60,62,0,0,0,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,62,61,61,62,61,62,61,61,61,62,61,62,61,61,62,61,62,64,64,64,64,0,0,0,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,63,63,64,63,64,64,63,63,63,64,63,64,63,63,64,63,64,63,63,64,63,64,0,0,0,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,65,65,66,65,66,66,66,65,65,65,66,65,66,65,65,65,66,65,66,65,65,66,65,66],"f":"```````````````````{{bd}f}{ce{}{}}00000000000000000{ch{}}{{{j{c}}}h{}}{ll}{nn}{A`A`}{AbAb}{bb}{{ce}f{}{}}0000{dc{}}00000000000000000{df}00000000{{ll}Ad}{{nn}Ad}{{A`A`}Ad}{{AbAb}Ad}?{{{Af{c}}Ah}Aj{AlAn}}{{{B`{c}}Ah}Aj{AlAn}}{{{Bb{c}}Ah}Aj{AlAn}}{{{Bd{c}}Ah}Aj{AlAn}}{{lAh}Aj}{{nAh}Aj}{{A`Ah}Aj}{{AbAh}Aj}{{bAh}Aj}{cc{}}0000{Bfl}11{BhAb}2{{}b}3`{{}f}{{}d}00000000{ce{}{}}00000000`{bd}`{{hd}b}{{bAd}{{Bj{c}}}An}{{bAd}cAn}{bh}{{b{Bj{{Bl{h}}}}}{{Bn{A`Ab}}}}{{{Af{c}}}c{}}{{{B`{c}}}c{}}{{}c{C`An}}``{{bd}f}:::::{c{{Bn{e}}}{}{}}00000{h{{Bn{nc}}}{}}111111111111{cCb{}}00000000{{bAd}{{Bn{cAb}}}An}{{{B`{c}}c}f{}}{{{Bb{c}}c}f{}}````````{ce{}{}}0000000{CdCd}{{ce}f{}{}}{{CdCd}Cf}{{}{{Cj{Ch}}}}{{}Cd}{{}{{Cl{Ch}}}}{{{Cn{c}}}e{}{}}{dc{}}0000000`{df}000{{}f}{{{Cl{Ch}}}f}{Chf}`{{CdCd}Ad}{{CdAh}Aj}{{D`Ah}Aj}{cc{}}000{{}D`}{{Cdc}fDb}{{}d}000{CdDd}{ce{}{}}000{CdAd}{{}{{`{{Dh{}{{Df{Cd}}}}}}}}`````````{e{{Cn{c}}}{}{{Dl{}{{Dj{c}}}}}}{DdCd}{{CdCd}{{Bj{Cf}}}}`{ChD`}0``````6{c{{Bn{e}}}{}{}}0000000{cCb{}}000```````````````{{DnE`Dl}f}{EbEd}::::::::::::::::::::::{DnEf}{EhEh}{EfEf}{EjEj}{ElEl}{EnEn}{F`F`}{{ce}f{}{}}00000{F`h}{FbFd}{DnEj}{FbEl}{EfAd}{F`Ad}{dc{}}000{Ffc{}}1111111111110111111{df}0000{Fff}111111{EjAd}{DnFh}{{DnAh}Aj}{{FjAh}Aj}{{FbAh}Aj}{{FfAh}Aj}{{EhAh}Aj}{{EfAh}Aj}{{EjAh}Aj}{{ElAh}Aj}{{EnAh}Aj}{{F`Ah}Aj}{cc{}}0000{AbEh}111111{ElFl}0{FbCd}{{}d}{{}Dn}111{Fbf}2222222{Dnf}{ElAd}660{DnEn}{ce{}{}}0000000000{EjAd}{EfAd}{F`Ad}{Ebd}{DnFd}{DnFh}{DnFl}091{{DnFl}Fl}{{DnFn}Fn}13{DnFf}{Dn{{Bl{h}}}}{EfFl}{DnDd}1?7{{Ebd{j{h}}}{{G`{d}}}};27{{F`h}f}{{FbFd}f}{{DnEj}f}{{FbEl}f}{{EfAd}f}{{F`Ad}f}{{EjAd}f}{{ElFl}f}0{{ElAd}f}110{{DnEn}f}354{{Ebd}{{G`{f}}}}{{DnFd}f}3{{EfFl}f}0470440{ElAd}{{FbFl}f}{{DnFn}Fn}{{DnFl}Fl}{{End}Ad}{ce{}{}}00000{{DnFh}f}{c{{Bn{e}}}{}{}}0000000000{{}{{Bn{DnEh}}}}11111111111{cCb{}}00000000009{EfFl}{{Ebd{j{h}}}{{G`{d}}}}`````{{}{{Bj{{Gd{Gb}}}}}}777777{GfGf}{{ce}f{}{}}{dc{}}00000{df}00{{GfGf}Ad}{{GhAh}Aj}{{GfAh}Aj}{cc{}}00``{{}d}{GfGb}11{ce{}{}}00{{}{{`{{Dh{}{{Df{{Gd{Gb}}}}}}}}}}`{{GbhCdh}f}{{Gbhh}Cd}3{c{{Bn{e}}}{}{}}00000{cCb{}}00``````5555{GjGj}{GlGl}{{ce}f{}{}}0{dc{}}000{df}0{{GjGj}Ad}{{GlGl}Ad}{{GjAh}Aj}{{GlAh}Aj}{cc{}}0{AbGl}{{}Gj}{{}d}0{ce{}{}}0``00??{{}{{Bn{GjGl}}}}{c{{Bn{e}}}{}{}}0{cCb{}}0````````3333{GnGn}{H`H`}{{ce}f{}{}}0{dc{}}000{df}0{{GnGn}Ad}`{{GnAh}Aj}{{H`Ah}Aj}?{BhH`}{cc{}}{{}Gn}0??>>`>><<{{}{{Bn{GnH`}}}}==<<````????{HbHb}{HdHd};;::::99`{{Hb{Bl{h}}}{{Bj{{Hf{A`b}}}}}}{{HbAh}Aj}{{HdAh}Aj}7{AbHd}{BhHd}9{{}Hb}0{{}d}0{ce{}{}}0{Hb{{`{{Dh{}{{Df{b}}}}}}}}{Hb{{`{{Dh{}{{Df{{Hf{A`b}}}}}}}}}}22{c{{Bn{e}}}{}{}}0{{}{{Bn{HbHd}}}}11{cCb{}}0","c":[],"p":[[5,"StructUnpacker",0],[1,"usize"],[1,"unit"],[1,"u8"],[1,"slice"],[6,"AcpiOem",0],[6,"AcpiVersion",0],[5,"RawSdtHeader",0],[6,"SdtError",0],[1,"bool"],[5,"ReadOnly",0],[5,"Formatter",703],[8,"Result",703],[10,"Debug",703],[10,"Copy",704],[5,"ReadWrite",0],[5,"WriteOnly",0],[5,"Reserved",0],[5,"StaticStr",705],[5,"Utf8Error",706],[6,"Option",707],[1,"array"],[6,"Result",708],[10,"Sized",704],[5,"TypeId",709],[5,"ApicId",173],[6,"Ordering",710],[5,"Lapic",173],[5,"RwLockReadGuard",711],[8,"RwLockWriteGuard",712],[5,"ApicTls",173],[5,"ApicRegs",173],[10,"Hasher",713],[1,"u32"],[17,"Item"],[10,"Iterator",714],[17,"Output"],[10,"FnMut",715],[5,"Hpet",267],[1,"u16"],[5,"HpetDevice",267],[10,"Any",709],[5,"GeneralCaps",267],[6,"HpetError",267],[5,"GeneralConfig",267],[5,"TimerNConfigAndCaps",267],[5,"GeneralInterruptStatus",267],[5,"RawHpetBits",267],[5,"TimerN",267],[8,"CounterValue",267],[5,"TimerNHandle",267],[1,"u128"],[5,"HpetRegs",267],[1,"u64"],[1,"i64"],[8,"IoResult",716],[5,"IoApic",520],[5,"MutexGuard",717],[5,"IoApicInfo",520],[5,"IoApicRegs",520],[5,"Madt",573],[6,"MadtError",573],[5,"Rsdp",615],[6,"RsdpError",615],[5,"Rsdt",660],[6,"RsdtError",660],[1,"tuple"]],"b":[[683,"impl-From%3CSdtError%3E-for-RsdtError"],[684,"impl-From%3CUtf8Error%3E-for-RsdtError"]]}],\
["hyperion_driver_framebuffer",{"doc":"","t":"FFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["FboDevice","FboInfoDevice","as_any","as_any","borrow","borrow","borrow_mut","borrow_mut","from","from","get","into","into","len","len","map_phys","new","new","read","read","set_len","set_len","try_from","try_from","try_into","try_into","type_id","type_id","unmap_phys","with","with_mut","write","write"],"q":[[0,"hyperion_driver_framebuffer"],[33,"core::any"],[34,"hyperion_vfs::error"],[35,"core::result"],[36,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,3,1,3,1,3,1,3,3,1,3,1,3,1,1,3,1,3,1,3,1,3,1,3,1,3,1,1,1,1,3],"f":"``{bd}{fd}{ce{}{}}000{cc{}}0{fh}22{bj}{fj}{{bj}{{l{j}}}}{{}b}{{}f}{{bj{A`{n}}}{{l{j}}}}{{fj{A`{n}}}{{l{j}}}}{{bj}{{l{Ab}}}}{{fj}{{l{Ab}}}}{c{{Ad{e}}}{}{}}000{cAf{}}0{b{{l{Ab}}}}{ec{}{{Aj{{A`{n}}}{{Ah{c}}}}}}076","c":[],"p":[[5,"FboDevice",0],[10,"Any",33],[5,"FboInfoDevice",0],[1,"str"],[1,"usize"],[8,"IoResult",34],[1,"u8"],[1,"slice"],[1,"unit"],[6,"Result",35],[5,"TypeId",33],[17,"Output"],[10,"FnOnce",36]],"b":[]}],\
["hyperion_driver_pic",{"doc":"","t":"JFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["PICS","Pic","Pics","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","disable","drop","drop","enable","end_of_interrupt","from","from","init","init","init","into","into","mask","new","read_pit_count","try_from","try_from","try_into","try_into","type_id","type_id","unmask"],"q":[[0,"hyperion_driver_pic"],[33,"core::result"],[34,"core::any"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,2,7,2,7,2,7,2,7,2,2,7,2,2,2,7,2,2,7,2,7,2,2,2,2,7,2,7,2,7,2],"f":"```{ce{}{}}000{bc{}}000{df}{bf}01{{dh}f}{cc{}}0{{}b}40662{{}d}{{}f}{c{{j{e}}}{}{}}000{cl{}}06","c":[],"p":[[1,"usize"],[5,"Pics",0],[1,"unit"],[1,"u8"],[6,"Result",33],[5,"TypeId",34],[5,"Pic",0]],"b":[]}],\
["hyperion_driver_ps2",{"doc":"","t":"CCHH","n":["keyboard","mouse","init","init"],"q":[[0,"hyperion_driver_ps2"],[2,"hyperion_driver_ps2::keyboard"],[3,"hyperion_driver_ps2::mouse"]],"d":["","","",""],"i":[0,0,0,0],"f":"``{{}b}0","c":[],"p":[[1,"unit"]],"b":[]}],\
["hyperion_driver_qemu",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["hyperion_driver_rtc",{"doc":"","t":"SJJFFNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["CUR_YEAR","RTC","RTC_CENTURY_REG","Rtc","RtcDevice","as_any","borrow","borrow","borrow_mut","borrow_mut","default","enable_ints","from","from","init_clock","int_ack","into","into","len","new","now","now_bytes","read","set_len","try_from","try_from","try_into","try_into","type_id","type_id","write"],"q":[[0,"hyperion_driver_rtc"],[31,"core::any"],[32,"time::offset_date_time"],[33,"core::option"],[34,"hyperion_vfs::error"],[35,"core::result"],[36,"core::any"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,3,1,3,1,3,3,3,1,3,3,3,1,1,3,3,3,1,1,3,1,3,1,3,1,1],"f":"`````{bd}{ce{}{}}000{{}f}{fh}{cc{}}01133{bj}3{f{{n{l}}}}{f{{Ab{A`}}}}{{bj{Ad{A`}}}{{Af{j}}}}{{bj}{{Af{h}}}}{c{{Ah{e}}}{}{}}000{cAj{}}03","c":[],"p":[[5,"RtcDevice",0],[10,"Any",31],[5,"Rtc",0],[1,"unit"],[1,"usize"],[5,"OffsetDateTime",32],[6,"Option",33],[1,"u8"],[1,"array"],[1,"slice"],[8,"IoResult",34],[6,"Result",35],[5,"TypeId",31]],"b":[]}],\
["hyperion_drivers",{"doc":"","t":"EEHHE","n":["acpi","fbo","lazy_install_early","lazy_install_late","rtc"],"q":[[0,"hyperion_drivers"],[5,"hyperion_vfs::tree"]],"d":["","","","",""],"i":[0,0,0,0,0],"f":"``{cbd}{{}b}`","c":[],"p":[[1,"unit"],[10,"IntoNode",5]],"b":[]}],\
["hyperion_escape",{"doc":"","t":"CCPPPGFPPPNNNNNNNNNNNNNNNNNFKNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["decode","encode","BgColor","Byte","Bytes","DecodedPart","EscapeDecoder","FgColor","None","Reset","borrow","borrow","borrow_mut","borrow_mut","clear","from","from","into","into","new","next","try_from","try_from","try_into","try_into","type_id","type_id","EncodedPart","EscapeEncoder","borrow","borrow_mut","clone","clone_into","color_to_code","default","fmt","fmt","fmt","from","from","from","into","reset_after","to_owned","to_string","true_black","true_blue","true_cyan","true_darkgrey","true_green","true_grey","true_lightgrey","true_magenta","true_red","true_white","true_yellow","try_from","try_into","type_id","with_escape_code","with_reset"],"q":[[0,"hyperion_escape"],[2,"hyperion_escape::decode"],[27,"hyperion_escape::encode"],[61,"core::result"],[62,"core::any"],[63,"core::clone"],[64,"core::marker"],[65,"hyperion_color"],[66,"alloc::sync"],[67,"core::fmt"],[68,"core::fmt"]],"d":["","","","","Null terminated","","foreground color can be changed like this: …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,2,2,2,0,0,2,2,2,1,2,1,2,1,1,2,1,2,1,1,1,2,1,2,1,2,0,0,6,6,6,6,0,6,6,6,6,6,6,6,6,19,6,6,19,19,19,19,19,19,19,19,19,19,19,6,6,6,19,6],"f":"``````````{ce{}{}}000{bd}{cc{}}022{{}b}{{bf}d}{c{{h{e}}}{}{}}000{cj{}}0``66{{{l{c}}}{{l{c}}}{nA`}}{{ce}Ab{}{}}{Ad{{Ah{Af}}}}{{}{{l{Ab}}}}{{{l{c}}Aj}AlAn}{{{l{c}}Aj}AlB`}{{{l{c}}Aj}AlBb}{c{{l{c}}}{}}{Bdc{}}=?{Bf{{l{Bf}}}}{ce{}{}}{cBh{}}22222222222==<{{BfAf}{{l{Bf}}}}{{{l{c}}Bj}{{l{c}}}{}}","c":[],"p":[[5,"EscapeDecoder",2],[6,"DecodedPart",2],[1,"u8"],[6,"Result",61],[5,"TypeId",62],[5,"EncodedPart",27],[10,"Clone",63],[10,"Sized",64],[1,"unit"],[5,"Color",65],[1,"str"],[5,"Arc",66],[5,"Formatter",67],[8,"Result",67],[10,"LowerHex",67],[10,"Display",67],[10,"Debug",67],[1,"never"],[10,"EscapeEncoder",27],[5,"String",68],[1,"bool"]],"b":[[35,"impl-LowerHex-for-EncodedPart%3C\'_,+T%3E"],[36,"impl-Display-for-EncodedPart%3C\'_,+T%3E"],[37,"impl-Debug-for-EncodedPart%3C\'_,+T%3E"]]}],\
["hyperion_events",{"doc":"","t":"FNNNNNNNNNCCNCNNNNCCHHHHHHPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNOCCHHHHGPPPPGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOFNNNNNNNNNNNNNNNHNNNNH","n":["Recv","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","into_future","keyboard","mouse","poll","timer","try_from","try_into","try_poll","type_id","buffer","event","layouts","set_layout","recv","send","send_raw","try_recv","A","Apps","ArrowDown","ArrowLeft","ArrowRight","ArrowUp","B","Backspace","C","Calculator","CapsLock","D","Delete","E","ElementState","End","Escape","F","F1","F10","F11","F12","F2","F3","F4","F5","F6","F7","F8","F9","G","H","Home","I","Insert","J","K","Key0","Key1","Key2","Key3","Key4","Key5","Key6","Key7","Key8","Key9","KeyCode","KeyboardEvent","L","LAlt","LControl","LShift","LWin","M","Mute","N","NextTrack","Numpad0","Numpad1","Numpad2","Numpad3","Numpad4","Numpad5","Numpad6","Numpad7","Numpad8","Numpad9","NumpadAdd","NumpadDivide","NumpadEnter","NumpadLock","NumpadMultiply","NumpadPeriod","NumpadSubtract","O","Oem1","Oem10","Oem11","Oem12","Oem13","Oem2","Oem3","Oem4","Oem5","Oem6","Oem7","Oem8","Oem9","OemComma","OemMinus","OemPeriod","OemPlus","P","PageDown","PageUp","PauseBreak","Play","PowerOnTestOk","Pressed","PrevTrack","PrintScreen","Q","R","RAlt2","RAltGr","RControl","RControl2","RShift","RWin","Released","Return","S","ScrollLock","Spacebar","Stop","SysRq","T","Tab","TooManyKeys","U","V","VolumeDown","VolumeUp","W","WWWHome","X","Y","Z","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","keycode","partial_cmp","state","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unicode","buffer","event","recv","send","send_raw","try_recv","Button","Button","Left","Middle","Motion","MouseEvent","Right","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","from","from","init","init","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","button","delta","state","SleepUntil","borrow","borrow_mut","clone","clone_into","deadline","deref","deref_mut","drop","fmt","from","init","into","into_future","new","poll","sleep_until","to_owned","try_from","try_into","type_id","wake"],"q":[[0,"hyperion_events"],[18,"hyperion_events::keyboard"],[22,"hyperion_events::keyboard::buffer"],[26,"hyperion_events::keyboard::event"],[208,"hyperion_events::mouse"],[210,"hyperion_events::mouse::buffer"],[214,"hyperion_events::mouse::event"],[253,"hyperion_events::mouse::event::MouseEvent"],[256,"hyperion_events::timer"],[278,"core::pin"],[279,"core::task::wake"],[280,"core::task::poll"],[281,"core::fmt"],[282,"core::result"],[283,"core::any"],[284,"core::option"],[285,"core::cmp"],[286,"core::fmt"]],"d":["","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Letters, Middle Row #1","The ‘Apps’ key (aka ‘Menu’ or ‘Right-Click’)","The down-arrow in the inverted-T","The left-arrow in the inverted-T","The right-arrow in the inverted-T","The up-arrow in the inverted-T","Letters, Bottom Row #5","Backspace","Letters, Bottom Row #3","Multi-media keys - Open Calculator","Caps Lock","Letters, Middle Row #3","The Delete key - bottom Left of the Extended Block","Letters, Top Row #3","","The End key - bottom Middle of the Extended Block","Top Left of the Keyboard","Letters, Middle Row #4","Function Key F1","Function Key F10","Function Key F11","Function Key F12","Function Key F2","Function Key F3","Function Key F4","Function Key F5","Function Key F6","Function Key F7","Function Key F8","Function Key F9","Letters, Middle Row #5","Letters, Middle Row #6","Top Middle of the Extended Block","Letters, Top Row #8","Top Left of the Extended Block","Letters, Middle Row #7","Letters, Middle Row #8","Number Line, Digit 0","Number Line, Digit 1","Number Line, Digit 2","Number Line, Digit 3","Number Line, Digit 4","Number Line, Digit 5","Number Line, Digit 6","Number Line, Digit 7","Number Line, Digit 8","Number Line, Digit 9","Keycodes that can be generated by a keyboard.","","Letters, Middle Row #9","The left-hand Alt key","The left-hand Control key","Left Shift","The left-hand ‘Windows’ key","Letters, Bottom Row #7","Multi-media keys - Volume Mute Toggle","Letters, Bottom Row #6","Multi-media keys - Next Track","The Numpad 0/Insert Key","Numpad 1/End Key","Numpad 2/Arrow Down Key","Numpad 3/Page Down Key","The Numpad 4/Left Arrow key","The Numpad 5 Key","The Numpad 6/Right Arrow key","The Numpad 7/Home key","The Numpad 8/Up Arrow key","The Numpad 9/Page Up key","The Numpad Add/Plus key","The Numpad Divide (or Slash) key","Numpad Enter","The Num Lock key","The Numpad Multiple (or Star) key","The Numppad Period/Delete Key","The Numpad Subtract (or Minus) key","Letters, Top Row #9","The US ANSI Semicolon/Colon key","Extra JIS key (0x79)","Extra JIS key (0x70)","Extra JIS symbol key (0x73)","Extra JIS symbol key (0x7D)","US ANSI <code>/?</code> Key","The US ANSI Single-Quote/At key","US ANSI Left-Square-Bracket key","US ANSI Backslash Key / UK ISO Backslash Key","US ANSI Right-Square-Bracket key","The UK/ISO Hash/Tilde key (ISO layout only)","Symbol key to the left of <code>Key1</code>","Extra JIS key (0x7B)","US ANSI <code>,&lt;</code> key","US Minus/Underscore Key (right of ‘Key0’)","US ANSI <code>.&gt;</code> Key","US Equals/Plus Key (right of ‘OemMinus’)","Letters, Top Row #10","The Page Down key - -bottom Right of the Extended Block","Top Right of the Extended Block","The Pause/Break key","Multi-media keys - Play","Sent when the keyboard boots","","Multi-media keys - Previous Track","The Print Screen Key","Letters, Top Row #1","Letters, Top Row #4","Used as a ‘hidden’ Right Alt Key (Print Screen = RAlt2 …","The right-hand AltGr key","The right-hand Control key","Used as a ‘hidden’ Right Control Key (Pause = …","Right Shift","The right-hand Win key","","The Return Key","Letters, Middle Row #2","The Scroll Lock key","The Space Bar","Multi-media keys - Stop","The Sys Req key (you get this keycode with Alt + …","Letters, Top Row #5","The Tab Key","Sent by the keyboard when too many keys are pressed","Letters, Top Row #7","Letters, Bottom Row #4","Multi-media keys - Increase Volume","Multi-media keys - Decrease Volume","Letters, Top Row #2","Multi-media keys - Open Browser","Letters, Bottom Row #2","Letters, Top Row #6","Letters, Bottom Row #1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","interrupt provided wakeup to a sleep"],"i":[0,3,3,3,3,3,3,3,3,3,0,0,3,0,3,3,3,3,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,13,15,16,13,15,16,13,15,16,13,15,16,16,13,15,16,13,15,16,13,15,16,13,15,16,13,15,16,13,15,16,13,15,16,13,15,16,13,16,13,13,15,16,13,15,16,13,15,16,13,15,16,13,0,0,0,0,0,0,0,22,23,23,22,0,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,22,23,26,27,26,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,24,24,24,24,0],"f":"`{ce{}{}}0{bc{}}0{bd}{cc{}}{{}b}4{c{}{}}``{{{h{{f{c}}}}j}{{l{e}}}n{}}`{c{{A`{e}}}{}{}}0{{{h{c}}j}l{}}{cAb{}}``{{}{{Af{Ad}}}}{Ad{{Ah{d}}}}{{}{{f{Aj}}}}{Ajd}{{Alb}d}{{}{{Ah{Aj}}}}`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````??????{AjAj}{AnAn}{B`B`}{{ce}d{}{}}00{{B`B`}Bb}{bc{}}00000{bd}00{{AjAj}Bd}{{AnAn}Bd}{{B`B`}Bd}{{AjBf}Bh}{{AnBf}Bh}{{B`Bf}{{A`{dBj}}}}{cc{}}00{{}b}00{ce{}{}}00`{{B`B`}{{Ah{Bb}}}}`111{c{{A`{e}}}{}{}}00000{cAb{}}00```{{}{{f{Bl}}}}{Bld}{{Alb}d}{{}{{Ah{Bl}}}}```````7777{BlBl}{BnBn}{{ce}d{}{}}0{bc{}}000{bd}0{{BlBl}Bd}{{BnBn}Bd}{{BlBf}Bh}{{BnBf}Bh}{cc{}}0{{}b}0{ce{}{}}000{c{{A`{e}}}{}{}}000{cAb{}}0````22{C`C`}<{C`Cb}<<;{{C`Bf}Bh}765{c{}{}}{CbC`}{{{h{C`}}j}{{l{c}}}{}}18776{{}d}","c":[],"p":[[1,"usize"],[1,"unit"],[5,"Recv",0],[5,"Pin",278],[5,"Context",279],[6,"Poll",280],[10,"Debug",281],[6,"Result",282],[5,"TypeId",283],[1,"str"],[1,"slice"],[6,"Option",284],[5,"KeyboardEvent",26],[1,"u8"],[6,"ElementState",26],[6,"KeyCode",26],[6,"Ordering",285],[1,"bool"],[5,"Formatter",281],[8,"Result",281],[5,"Error",281],[6,"MouseEvent",214],[6,"Button",214],[5,"SleepUntil",256],[5,"Instant",286],[15,"Button",253],[15,"Motion",253]],"b":[]}],\
["hyperion_framebuffer",{"doc":"","t":"CCCJFFNNNNNNNNNNNNNNNNNNNNONONNNONNNNNNNNNOH","n":["font","framebuffer","logger","FONT","Framebuffer","FramebufferInfo","ascii_char","borrow","borrow","borrow_mut","borrow_mut","buf","buf_mut","clear","clone","clone_into","default","deref","deref_mut","eq","fill","fmt","fmt","from","from","get","height","info","info","into","into","new","pitch","pixel","scroll","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","width","_print"],"q":[[0,"hyperion_framebuffer"],[3,"hyperion_framebuffer::font"],[4,"hyperion_framebuffer::framebuffer"],[43,"hyperion_framebuffer::logger"],[44,"hyperion_color"],[45,"core::fmt"],[46,"core::fmt"],[47,"core::option"],[48,"core::result"],[49,"core::any"],[50,"core::fmt"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,8,1,8,1,1,1,8,8,8,1,1,8,1,1,8,1,8,1,8,1,1,1,8,1,8,1,1,8,1,8,1,8,1,8,8,0],"f":"``````{{bddfhh}j}{ce{}{}}000{b{{l{f}}}}0{bn}{A`A`}{{ce}n{}{}}{{}A`}{bc{}}0{{A`A`}j}{{bddddh}n}{{bAb}Ad}{{A`Ab}Ad}{cc{}}0{{}{{Ah{{Af{b}}}}}}`{bA`}`=={{{l{f}}A`}b}`{{bddh}n}{{bd}n}{ce{}{}}{c{{Aj{e}}}{}{}}000{cAl{}}0`{Ann}","c":[],"p":[[5,"Framebuffer",4],[1,"usize"],[1,"u8"],[5,"Color",44],[1,"bool"],[1,"slice"],[1,"unit"],[5,"FramebufferInfo",4],[5,"Formatter",45],[8,"Result",45],[8,"Mutex",46],[6,"Option",47],[6,"Result",48],[5,"TypeId",49],[5,"Arguments",45]],"b":[]}],\
["hyperion_futures",{"doc":"","t":"HCCCCHHCFNNNNNNNNHNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNHNNNNNFPPFFFFGNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNHHHNNNNNNNNNN","n":["block_on","keyboard","lock","mouse","mpmc","run_tasks","spawn","timer","KeyboardEvents","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","keyboard_events","poll_next","try_from","try_into","type_id","vzip","Lock","Mutex","MutexGuard","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","from","from","from","get_mut","init","init","init","into","into","into","is_locked","is_locked","lock","lock","lock_block","lock_block","lock_spin","lock_spin","new","new","try_from","try_from","try_from","try_into","try_into","try_into","try_lock","try_lock","type_id","type_id","type_id","unlock","vzip","vzip","vzip","MouseEvents","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","mouse_events","poll_next","try_from","try_into","type_id","vzip","Channel","Closed","Empty","Receiver","RecvError","SendError","Sender","TryRecvError","blocking_recv","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","new","race_stream","race_stream","receiver","recv","recv","send","send","spin_recv","split","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_recv","try_recv","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Sleep","Ticks","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","into_future","new","poll","poll_next","sleep","sleep_until","ticks","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"hyperion_futures"],[8,"hyperion_futures::keyboard"],[23,"hyperion_futures::lock"],[79,"hyperion_futures::mouse"],[94,"hyperion_futures::mpmc"],[211,"hyperion_futures::timer"],[252,"core::future::into_future"],[253,"core::pin"],[254,"core::task::wake"],[255,"core::option"],[256,"core::task::poll"],[257,"core::result"],[258,"core::any"],[259,"core::marker"],[260,"core::clone"],[261,"core::cmp"],[262,"core::fmt"],[263,"core::fmt"],[264,"core::marker"],[265,"hyperion_instant"],[266,"hyperion_events::timer"]],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","async sleep duration","async sleep until deadline","async sleep repeat","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,0,5,5,5,5,5,0,0,0,14,12,16,14,12,16,14,12,12,16,14,12,12,16,14,12,12,16,14,12,16,14,14,12,16,14,12,16,14,16,14,16,14,16,14,16,14,16,14,12,16,14,12,16,14,16,14,12,16,16,14,12,16,0,17,17,17,17,17,17,17,17,0,17,17,17,17,17,0,24,24,0,0,0,0,0,18,20,18,29,22,19,24,20,18,29,22,19,24,0,20,18,22,19,24,20,18,22,19,24,20,18,29,22,19,24,20,18,29,22,19,24,20,20,18,18,29,22,19,24,22,19,24,22,19,24,20,18,29,22,19,24,20,18,29,22,19,24,20,18,29,22,19,24,29,18,29,20,18,29,20,29,18,29,20,18,22,19,24,20,18,29,22,19,24,20,18,29,22,19,24,18,29,20,18,29,22,19,24,20,18,29,22,19,24,0,0,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,34,33,33,33,34,0,0,0,33,34,33,34,33,34,33,34,33,34],"f":"{c{}b}````{{}d}```{ce{}{}}0{fc{}}0{fh}{cc{}}{{}f}4{{}j}{{{l{j}}n}{{Ab{{A`{c}}}}}{}}{c{{Ad{e}}}{}{}}0{cAf{}}8```88888877{{{Ah{c}}}eAj{}}880887{{{Ah{c}}}hAj}88777{{{Al{c}}}cAj}777;;;{{{Al{c}}}AnAj}{B`An}{{{Al{c}}}{{Ah{c}}}Aj}{B`h}1010{c{{Al{c}}}{}}{{}B`}::::::{{{Al{c}}}{{A`{{Ah{c}}}}}Aj}5:::3{ce{}{}}00`00{fc{}}0{fh}{cc{}}{{}f}4{{}Bb}{{{l{Bb}}n}{{Ab{{A`{c}}}}}{}}{c{{Ad{e}}}{}{}}0{cAf{}}8````````{{{Bd{c}}}{{Ad{cBf}}}{}}999999999999{{}{{Bj{{Bh{c}}{Bd{c}}}}}{}}{{{Bh{c}}}{{Bh{c}}}{}}{{{Bd{c}}}{{Bd{c}}}{}}{{{Bl{c}}}{{Bl{c}}}Bn}{BfBf}{C`C`}{{ce}h{}{}}0000????????????>{{{Bh{c}}}h{}}{{{Bd{c}}}h{}}{fh}0000{{{Bl{c}}{Bl{c}}}AnCb}{{BfBf}An}{{C`C`}An}{{{Bl{c}}Cd}CfCh}{{BfCd}Cf}{{C`Cd}Cf}{cc{}}00000{{}f}00000{ce{}{}}00000{{}{{Cj{c}}}{}}{{{Bd{c}}}{{`{{Cn{}{{Cl{c}}}}D`}}}{}}{{{Cj{c}}}{{`{{Cn{}{{Cl{c}}}}D`}}}{}}{{{Bh{c}}}{{A`{{Bd{c}}}}}{}}{{{Bd{c}}}{{Ad{cBf}}}{}}{{{Cj{c}}}c{}}{{{Bh{c}}c}{{Ad{h{Bl{c}}}}}{}}{{{Cj{c}}c}h{}}3{{{Cj{c}}}{{Bj{{Bh{c}}{Bd{c}}}}}{}}99999{c{{Ad{e}}}{}{}}00000000000{{{Bd{c}}}{{Ad{cC`}}}{}}{{{Cj{c}}}{{A`{c}}}{}}{cAf{}}00000======``===={DbDb}{DdDd}{{ce}h{}{}}0{fc{}}000{fh}0{{DbCd}Cf}{{DdCd}Cf}{cc{}}0{{}f}0{ce{}{}}0{c{}{}}{DfDb}{{{l{Db}}n}{{Ab{c}}}{}}{{{l{Dd}}n}{{Ab{{A`{c}}}}}{}}2{DhDj}{DfDd}66{c{{Ad{e}}}{}{}}000{cAf{}}088","c":[],"p":[[10,"IntoFuture",252],[1,"never"],[1,"usize"],[1,"unit"],[5,"KeyboardEvents",8],[5,"Pin",253],[5,"Context",254],[6,"Option",255],[6,"Poll",256],[6,"Result",257],[5,"TypeId",258],[5,"MutexGuard",23],[10,"Sized",259],[5,"Mutex",23],[1,"bool"],[5,"Lock",23],[5,"MouseEvents",79],[5,"Receiver",94],[5,"RecvError",94],[5,"Sender",94],[1,"tuple"],[5,"SendError",94],[10,"Clone",260],[6,"TryRecvError",94],[10,"PartialEq",261],[5,"Formatter",262],[8,"Result",262],[10,"Debug",262],[5,"Channel",94],[17,"Item"],[10,"Stream",263],[10,"Unpin",259],[5,"Sleep",211],[5,"Ticks",211],[5,"Duration",264],[5,"Instant",265],[5,"SleepUntil",266]],"b":[]}],\
["hyperion_instant",{"doc":"","t":"KKFRRTNNNMNMNNNNNNNNNNNNNNNNNNNNNNNNN","n":["CheckedAdd","CheckedSub","Instant","Output","Output","ZERO","add","borrow","borrow_mut","checked_add","checked_add","checked_sub","checked_sub","checked_sub","clone","clone_into","cmp","deref","deref_mut","drop","elapsed","eq","fmt","from","init","into","is_reached","nanosecond","new","now","partial_cmp","sub","sub","to_owned","try_from","try_into","type_id"],"q":[[0,"hyperion_instant"],[37,"time::duration"],[38,"core::option"],[39,"core::cmp"],[40,"core::fmt"],[41,"core::fmt"],[42,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,4,6,1,1,1,1,4,1,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"``````{{bd}c{}}{ce{}{}}0{{{h{}{{f{c}}}}e}{{j{c}}}{}{}}{{bd}{{j{c}}}{}}{{{l{}{{f{c}}}}e}{{j{c}}}{}{}}{{bb}{{j{c}}}{}}2{bb}{{ce}n{}{}}{{bb}A`}{Abc{}}0{Abn}{bd}{{bb}Ad}{{bAf}Ah}{cc{}}{{}Ab}>{bAd}{bAj}{Ajb}{{}b}{{bb}{{j{A`}}}}{{bd}c{}}{{bb}c{}}{ce{}{}}{c{{Al{e}}}{}{}}0{cAn{}}","c":[],"p":[[5,"Instant",0],[5,"Duration",37],[17,"Output"],[10,"CheckedAdd",0],[6,"Option",38],[10,"CheckedSub",0],[1,"unit"],[6,"Ordering",39],[1,"usize"],[1,"bool"],[5,"Formatter",40],[8,"Result",40],[1,"u128"],[6,"Result",41],[5,"TypeId",42]],"b":[[12,"impl-CheckedSub-for-Instant"],[13,"impl-CheckedSub%3CDuration%3E-for-Instant"],[31,"impl-Sub%3CDuration%3E-for-Instant"],[32,"impl-Sub-for-Instant"]]}],\
["hyperion_interrupts",{"doc":"","t":"PJJSJJGFPPNNNNNNNHNNNNNNHNNNNHNNHNNNNHHHNNNNNNNNN","n":["Apic","INT_ALLOCATOR","INT_CONTROLLER","INT_COUNT","INT_EOI_HANDLER","INT_HANDLERS","IntController","IntHandler","None","Pic","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default_handler","deref","deref","deref_mut","deref_mut","drop","drop","end_of_interrupt","eq","fmt","from","from","handler","init","init","interrupt_handler","into","into","load","new","set_any_interrupt_handler","set_interrupt_handler","set_interrupt_handler_if_free","store","store_if_free","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"hyperion_interrupts"],[49,"core::fmt"],[50,"core::fmt"],[51,"core::ops::function"],[52,"core::result"],[53,"core::any"]],"d":["‘Advanced Programmable Interrupt Timer’","","","","","","","","","The legacy ‘Programmable Interrupt Timer’","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[1,0,0,0,0,0,0,0,1,1,8,1,8,1,1,1,1,0,8,1,8,1,8,1,0,1,1,8,1,0,8,1,0,8,1,8,8,0,0,0,8,8,1,8,1,8,1,8,1],"f":"``````````{ce{}{}}000{bb}{{ce}d{}{}}{{}b}{{fh}d}{hc{}}000{hd}0{fd}{{bb}j}{{bl}n}{cc{}}0{fA`}{{}h}08<<{A`}{{}A`}{c{{Ab{f}}}{{Af{f}{{Ad{j}}}}}}8{fj}{A`d}{A`j}{ce{}{}}{c{{Ah{e}}}{}{}}000{cAj{}}0","c":[],"p":[[6,"IntController",0],[1,"unit"],[1,"u8"],[1,"usize"],[1,"bool"],[5,"Formatter",49],[8,"Result",49],[5,"IntHandler",0],[6,"Option",50],[17,"Output"],[10,"Fn",51],[6,"Result",52],[5,"TypeId",53]],"b":[]}],\
["hyperion_kernel",{"doc":"Hyperion","t":"JHHHCCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH","n":["ALLOCATOR","_start","eh_personality","init","panic","syscall","panic_handler","_accept","_bind","_close","_connect","_done","_exit","_listen","_log","_nanosleep","_nanosleep_until","_open","_palloc","_pfree","_read","_recv","_rename","_send","_socket","_spawn","_timestamp","_write","_yield_now","accept","bind","call_id","close","connect","done","dup","exit","futex_wait","futex_wake","get_pid","get_tid","listen","log","map_file","metadata","nanosleep","nanosleep_until","open","open_dir","palloc","pfree","read","recv","rename","seek","send","socket","spawn","syscall","timestamp","unmap_file","write","yield_now"],"q":[[0,"hyperion_kernel"],[6,"hyperion_kernel::panic"],[7,"hyperion_kernel::syscall"],[63,"x86_64::addr"],[64,"core::ops::range"],[65,"hyperion_arch_x86_64::vmm"],[66,"core::panic::panic_info"],[67,"hyperion_syscall::fs"],[68,"hyperion_syscall::err"],[69,"hyperion_syscall::fs"],[70,"hyperion_arch_x86_64::syscall"],[71,"core::ops::function"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","accept a connection on a socket","bind a socket","","close a file","connect to a socket","exit and kill the current thread","duplicate a file descriptor","exit and kill the current process","futex wait","futex wake","pid of the current process","tid of the current thread","start listening to connections on a socket","print a string to logs","map file to memory","get file metadata","sleep at least arg0 nanoseconds","sleep at least until the nanosecond arg0 happens","open a file","open a directory","allocate physical pages and map them to virtual memory","free allocated physical pages","read bytes from a file","recv data from a socket","rename the current process","set file position","send data to a socket","create a socket","spawn a new thread","","get the number of nanoseconds after boot","unmap file from memory","write bytes into a file","give the processor back to the kernel temporarily"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"`{{}b}{{}d}{{{h{f}}j}d}``{lb}{n{{A`{n}}}}{{nAb}{{A`{d}}}}{n{{A`{d}}}}1550{Abd}{Add}{Afd}{{AbAh}{{A`{n}}}}{Aj{{A`{f}}}}{{fAj}{{A`{d}}}}{{n{An{Al}}}{{A`{Aj}}}}{{n{An{Al}}Aj}{{A`{Aj}}}}70{B`{{A`{n}}}}{{BbBb}d}{{{An{Al}}}d}4{{}d}{Bd{{A`{Aj}}}}0{{cBd}d{{Bh{Bd}{{Bf{{A`{Aj}}}}}}}}11111111111111111111111111{Bdd}2222","c":[],"p":[[1,"never"],[1,"unit"],[5,"VirtAddr",63],[5,"Range",64],[5,"PageMap",65],[5,"PanicInfo",66],[5,"FileDesc",67],[8,"Result",68],[1,"str"],[1,"i64"],[1,"u128"],[5,"FileOpenFlags",67],[1,"usize"],[1,"u8"],[1,"slice"],[5,"SocketInfo",69],[1,"u64"],[5,"SyscallRegs",70],[17,"Output"],[10,"FnOnce",71]],"b":[]}],\
["hyperion_kernel_impl",{"doc":"","t":"FPFKPFGPFFFFJMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNHHHHHHHOONNNNNNNNNNNNONNNNNNNNONNNNNNNNNNNNNNNHNNNNNOHONNNNNHHHHHHONNNNNONNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNHNNNNOO","n":["BoundSocket","Connection","FileDescData","FileDescriptor","Listener","LocalSocket","LocalSocketType","None","ProcessExtra","SocketInfo","SocketPipe","SparseVec","VFS_ROOT","as_any","as_any","as_any","as_any","as_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","close","connected","connection","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","domain","drop","drop","drop","drop","drop","drop","drop","drop","eq","fd_clone_all","fd_copy","fd_push","fd_query","fd_query_of","fd_replace","fd_take","file_ref","files","fmt","from","from","from","from","from","from","from","from","from","get","get_mut","info","init","init","init","init","init","init","init","init","inner","into","into","into","into","into","into","into","into","is_empty","is_uninit","len","len","len","len","listener","map_vfs_err_to_syscall_err","new","new","new","new","open","position","process_ext_with","proto","push","read","read","read","read","read_slice_parts","read_untrusted_bytes","read_untrusted_bytes_mut","read_untrusted_mut","read_untrusted_ref","read_untrusted_str","recv","remove","replace","seek","seek","seek","send","set_len","set_len","set_len","set_len","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_proc_ext","write","write","write","write","incoming","pipe"],"q":[[0,"hyperion_kernel_impl"],[193,"hyperion_kernel_impl::LocalSocketType"],[195,"core::any"],[196,"core::clone"],[197,"hyperion_syscall::err"],[198,"alloc::sync"],[199,"hyperion_syscall::fs"],[200,"core::option"],[201,"core::fmt"],[202,"core::fmt"],[203,"hyperion_vfs::tree"],[204,"hyperion_scheduler::ipc::pipe"],[205,"hyperion_vfs::error"],[206,"hyperion_syscall::err"],[207,"hyperion_vfs::error"],[208,"hyperion_syscall::fs"],[209,"core::any"]],"d":["VFS server socket file","","file descriptor backend that points to an opened VFS file","","","file descriptor backend that points to a local domain …","","","","general socket backend info","local domain socket “pipe”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","VFS node","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","<code>end - start</code>","","","","","","","","","","","the current read/write offset","","","","read and advance the read/write position","","","","","","","","","","","","","set the current read/write position","","","","truncate/add zeros","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","write and advance the read/write position","","","","",""],"i":[0,39,0,0,39,0,0,39,0,0,0,0,0,1,3,4,5,6,3,4,39,5,6,7,9,10,3,4,39,5,6,7,9,10,3,6,7,9,10,3,6,7,9,10,6,4,4,3,4,39,5,6,7,9,10,3,4,39,5,6,7,9,10,9,3,4,39,5,6,7,9,10,9,0,0,0,0,0,0,0,3,6,9,3,3,4,39,5,6,7,9,10,7,7,4,3,4,39,5,6,7,9,10,4,3,4,39,5,6,7,9,10,1,4,1,3,4,5,4,0,3,4,7,10,3,3,0,9,7,1,3,4,5,0,0,0,0,0,0,10,7,7,1,3,4,10,1,3,4,5,3,6,7,9,10,3,4,39,5,6,7,9,10,3,4,39,5,6,7,9,10,9,3,4,39,5,6,7,9,10,3,4,39,5,6,7,9,10,0,1,3,4,5,40,41],"f":"`````````````{bd}{fd}{hd}{jd}{ld}{ce{}{}}000000000000000{ff}{ll}{{{n{c}}}{{n{c}}}A`}{AbAb}{AdAd}{{ce}Af{}{}}0000{lAf}{{AbAd}h}{{hAd}{{Ah{Ad}}}}{Ajc{}}000000000000000`{AjAf}0000000{{AbAb}Al}{{}{{n{{An{b}}}}}}{{B`B`}Af}{{{An{b}}}B`}{B`{{Ah{{An{b}}}}}}{B`{{Ah{{An{c}}}}}{bd}}{{B`{An{b}}}{{Bb{{An{b}}}}}}{B`{{Bb{{An{b}}}}}}``{{AbBd}Bf}{cc{}}{{{Bj{Bh}}}f}1111111{{{n{c}}Aj}{{Bb{c}}}{}}0`{{}Aj}0000000`{ce{}{}}0000000{b{{Ah{Al}}}}{hAl}{b{{Ah{Aj}}}}{f{{Ah{Aj}}}}{h{{Ah{Aj}}}}{jAj}{h{{Ah{{Bl{Ad}}}}}}{BnC`}{{{Bj{Bh}}Aj}f}{Abh}{{}{{n{c}}}{}}{{}{{Cb{AdAd}}}}{Cd{{Ah{f}}}}`{Cfl}`{{{n{c}}c}Aj{}}{{b{Cj{Ch}}}{{Ah{Aj}}}}{{f{Cj{Ch}}}{{Ah{Aj}}}}{{h{Cj{Ch}}}{{Ah{Aj}}}}{{jAj{Cj{Ch}}}{{Cl{Aj}}}}{{CnCn}{{Ah{{Cb{D`Aj}}}}}}{{CnCn}{{Ah{{Cj{Ch}}}}}}0{Cn{{Ah{c}}}{}}0{{CnCn}{{Ah{Cd}}}}`{{{n{c}}Aj}{{Bb{c}}}{}}{{{n{c}}Ajc}{{Bb{c}}}{}}{{bDbDd}{{Ah{Aj}}}}{{fDbDd}{{Ah{Aj}}}}{{hDbDd}{{Ah{Aj}}}}`{{bAj}{{Ah{Af}}}}{{fAj}{{Ah{Af}}}}{{hAj}{{Ah{Af}}}}{{jAj}{{Cl{Af}}}}{ce{}{}}0000{c{{Df{e}}}{}{}}000000000000000`{cDh{}}000000022222222{ec{}{{Dl{l}{{Dj{c}}}}}}{{b{Cj{Ch}}}{{Ah{Aj}}}}{{f{Cj{Ch}}}{{Ah{Aj}}}}{{h{Cj{Ch}}}{{Ah{Aj}}}}{{jAj{Cj{Ch}}}{{Cl{Aj}}}}``","c":[],"p":[[10,"FileDescriptor",0],[10,"Any",195],[5,"FileDescData",0],[5,"LocalSocket",0],[5,"BoundSocket",0],[5,"ProcessExtra",0],[5,"SparseVec",0],[10,"Clone",196],[5,"SocketInfo",0],[5,"SocketPipe",0],[1,"unit"],[8,"Result",197],[1,"usize"],[1,"bool"],[5,"Arc",198],[5,"FileDesc",199],[6,"Option",200],[5,"Formatter",201],[8,"Result",201],[5,"Futex",202],[8,"FileRef",203],[5,"Channel",204],[6,"IoError",205],[5,"Error",197],[1,"tuple"],[1,"str"],[5,"Process",206],[1,"u8"],[1,"slice"],[8,"IoResult",205],[1,"u64"],[5,"VirtAddr",207],[1,"isize"],[5,"Seek",199],[6,"Result",208],[5,"TypeId",195],[17,"Output"],[10,"FnOnce",209],[6,"LocalSocketType",0],[15,"Listener",193],[15,"Connection",193]],"b":[]}],\
["hyperion_kernel_info",{"doc":"","t":"JJJJ","n":["BUILD_REV","BUILD_TIME","NAME","VERSION"],"q":[[0,"hyperion_kernel_info"]],"d":["","","",""],"i":[0,0,0,0],"f":"````","c":[],"p":[],"b":[]}],\
["hyperion_kshell",{"doc":"","t":"JPGPPPPPPINNNNNCNNNNNNNNNHCNCNNNNNOOOOFJJNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNFNNNONNNNNNNNNNNONNNNNNN","n":["ASSETS","Err","Error","InsecurePrng","IoError","NamelessFile","Ok","Other","Parse","Result","as_error_source","backtrace","borrow","borrow_mut","cause","cmd","deref","deref_mut","description","drop","fmt","fmt","from","init","into","kshell","shell","source","term","to_string","try_from","try_into","type_id","vzip","msg","resource","source","source","Command","LOG_DEV","NULL_DEV","arg","args","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","spawn","stderr","stdin","stdout","try_from","try_into","type_id","vzip","Shell","borrow","borrow_mut","deref","deref_mut","drop","from","init","init","input","into","into_inner","new","try_from","try_into","type_id","vzip","Term","borrow","borrow_mut","clear","cursor","cursor_prev","default","deref","deref_mut","drop","flush","from","init","into","new","read_at","size","try_from","try_into","type_id","vzip","write_byte","write_bytes","write_str"],"q":[[0,"hyperion_kshell"],[34,"hyperion_kshell::Error"],[38,"hyperion_kshell::cmd"],[60,"hyperion_kshell::shell"],[77,"hyperion_kshell::term"],[101,"snafu::no_std_error"],[102,"snafu::backtrace_inert"],[103,"core::option"],[104,"core::fmt"],[105,"core::fmt"],[106,"core::result"],[107,"core::any"],[108,"core::convert"],[109,"core::iter::traits::collect"],[110,"anyhow"],[111,"hyperion_kernel_impl"],[112,"alloc::sync"],[113,"hyperion_events::keyboard::event"]],"d":["","Contains the error value","","","","","Contains the success value","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,26,0,2,2,2,26,2,2,0,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,0,0,2,0,2,2,2,2,2,27,28,28,29,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22],"f":"``````````{cb{}}{d{{h{f}}}}{ce{}{}}0{d{{h{b}}}}`{jc{}}0{dl}{jn}{{dA`}Ab}0{cc{}}{{}j}7{{}n}`7`{cAd{}}{c{{Af{e}}}{}{}}0{cAh{}};```````{{Ajc}Aj{{Al{Ad}}}}{{Aje}Aj{{Al{Ad}}}{{B`{}{{An{c}}}}}}==;;976={cAj{{Al{Ad}}}}{Aj{{Bb{n}}}}{{Aj{Bf{Bd}}}Aj}00665{ce{}{}}`00??=;:{Bhn}{{BhBj}{{h{n}}}}2{BhBl}{BlBh};;:4`44{Bln}`0{{}Bl}{jc{}}0{jn}3{cc{}}{{}j}:4{{Bl{Bn{jj}}}C`}`{c{{Af{e}}}{}{}}0{cAh{}}={{BlC`}n}{{Bl{Cb{C`}}}n}{{Bll}Ab}","c":[],"p":[[10,"Error",101],[6,"Error",0],[5,"Backtrace",102],[6,"Option",103],[1,"usize"],[1,"str"],[1,"unit"],[5,"Formatter",104],[8,"Result",104],[5,"String",105],[6,"Result",106],[5,"TypeId",107],[5,"Command",38],[10,"Into",108],[17,"Item"],[10,"IntoIterator",109],[8,"Result",110],[10,"FileDescriptor",111],[5,"Arc",112],[5,"Shell",60],[5,"KeyboardEvent",113],[5,"Term",77],[1,"tuple"],[1,"u8"],[1,"slice"],[8,"Result",0],[15,"Other",34],[15,"IoError",34],[15,"Parse",34]],"b":[[20,"impl-Debug-for-Error"],[21,"impl-Display-for-Error"]]}],\
["hyperion_loader",{"doc":"","t":"FFNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNN","n":["Loader","NoEntryPoint","borrow","borrow","borrow_mut","borrow_mut","debug","deref","deref","deref_mut","deref_mut","drop","drop","enter_userland","from","from","init","init","init_stack","into","into","load","load_segment","new","push","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"hyperion_loader"],[33,"core::result"],[34,"x86_64::addr"],[35,"elf::segment"],[36,"core::marker"],[37,"core::any"]],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","push items to the stack","","","","","","","",""],"i":[0,0,1,7,1,7,1,1,7,1,7,1,7,1,1,7,1,7,1,1,7,1,1,1,0,1,7,1,7,1,7,1,7],"f":"``{ce{}{}}000{bd}{fc{}}000{fd}0{{b{j{h}}}{{A`{ln}}}}{cc{}}0{{}f}0{{{j{h}}}{{Ad{AbAb}}}}776{{bAf}d}{{{j{Ah}}}b}{{Abc}dAj}{c{{A`{e}}}{}{}}000{cAl{}}0<<","c":[],"p":[[5,"Loader",0],[1,"unit"],[1,"usize"],[1,"str"],[1,"slice"],[1,"never"],[5,"NoEntryPoint",0],[6,"Result",33],[5,"VirtAddr",34],[1,"tuple"],[5,"ProgramHeader",35],[1,"u8"],[10,"Sized",36],[5,"TypeId",37]],"b":[]}],\
["hyperion_log",{"doc":"","t":"TTPPPGKPPPNNNNNQNNQNNQNMQNNMQQMHNQNNNQ","n":["ALL","DEFAULT","Debug","Error","Info","LogLevel","Logger","None","Trace","Warn","borrow","borrow_mut","clone","clone_into","cmp","debug","default","eq","error","fmt","from","info","into","is_enabled","log","parse","partial_cmp","print","print","println","proc_name","set_logger","to_owned","trace","try_from","try_into","type_id","warn"],"q":[[0,"hyperion_log"],[38,"core::cmp"],[39,"core::fmt"],[40,"core::fmt"],[41,"core::fmt"],[42,"core::result"],[43,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,7,0,1,1,7,0,0,7,0,1,0,1,1,1,0],"f":"``````````{ce{}{}}0{bb}{{ce}d{}{}}{{bb}f}`{{}b}{{bb}h}`{{bj}l}{cc{}}`7{{nb}h}`{A`{{Ab{b}}}}{{bb}{{Ab{f}}}}{{nbAd}d}``{n{{Ab{Af}}}}{nd}=`{c{{Ah{e}}}{}{}}0{cAj{}}`","c":[],"p":[[6,"LogLevel",0],[1,"unit"],[6,"Ordering",38],[1,"bool"],[5,"Formatter",39],[8,"Result",39],[10,"Logger",0],[1,"str"],[6,"Option",40],[5,"Arguments",39],[5,"ArcStr",41],[6,"Result",42],[5,"TypeId",43]],"b":[]}],\
["hyperion_log_multi",{"doc":"","t":"HHH","n":["init_logger","set_fbo","set_qemu"],"q":[[0,"hyperion_log_multi"],[3,"hyperion_log"]],"d":["","",""],"i":[0,0,0],"f":"{{}b}{db}0","c":[],"p":[[1,"unit"],[6,"LogLevel",3]],"b":[]}],\
["hyperion_macros",{"doc":"","t":"QQQQQQ","n":["array","build_rev","build_time","gen_int_handlers","get_int_handlers","rtc_year"],"q":[[0,"hyperion_macros"]],"d":["","","","","",""],"i":[0,0,0,0,0,0],"f":"``````","c":[],"p":[],"b":[]}],\
["hyperion_mem",{"doc":"","t":"IFNNNQNNHNHCHNNNCJFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPFPFPIKGPMNNNNNNNNNNNNMNNNNNNNNNNNNMMMMMNNNNNNNNNNNNMM","n":["KernelSlabAlloc","Pfa","alloc","borrow","borrow_mut","debug_phys_addr","free","from","from_higher_half","into","is_higher_half","pmm","to_higher_half","try_from","try_into","type_id","vmm","PFA","PageFrame","PageFrameAllocator","alloc","allocate","as_bytes","as_bytes_mut","bitmap_len","borrow","borrow","borrow_mut","borrow_mut","byte_len","deallocate","fmt","fmt","free","free_mem","from","from","into","into","is_empty","leak","len","new","physical_addr","reserved_mem","to_string","total_mem","try_from","try_from","try_into","try_into","type_id","type_id","usable_mem","used_mem","virtual_addr","Err","Handled","Kernel","NotHandled","Ok","PageFaultResult","PageMapImpl","Privilege","User","activate","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","current","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","is_mapped","map","new","page_fault","phys_to_virt","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unmap","virt_to_phys"],"q":[[0,"hyperion_mem"],[17,"hyperion_mem::pmm"],[56,"hyperion_mem::vmm"],[110,"hyperion_slab_alloc"],[111,"x86_64::addr"],[112,"x86_64::addr"],[113,"core::any"],[114,"core::alloc::layout"],[115,"core::ptr::non_null"],[116,"core::alloc"],[117,"core::fmt"],[118,"core::fmt"],[119,"core::ops::range"],[120,"x86_64::structures::paging::page_table"],[121,"core::option"]],"d":["","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Physical memory management","","","","","","","","","Alloc pages","","","","","","","","","number of bytes","","","","Free up pages","Currently free usable memory in bytes","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Leak the PageFrame to get a static mut ref to it","number of pages","Safety","physical address of the first page","Reserved memory in bytes","","System total memory in bytes","","","","","","","System usable memory in bytes","Currently used usable memory in bytes","","Contains the error value","","","","Contains the success value","inversed to make <code>?</code> more useful","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,28,28,28,0,28,28,0,28,0,0,0,28,28,28,0,0,0,0,10,10,11,11,10,10,11,10,11,11,10,10,11,10,10,10,11,10,11,11,11,11,11,11,10,10,10,10,11,10,11,10,11,10,10,11,26,0,21,0,26,0,0,0,21,20,21,22,23,21,22,23,21,22,23,21,22,23,20,21,22,23,21,22,23,21,22,23,21,22,23,20,20,20,20,20,21,22,23,21,22,23,21,22,23,21,22,23,20,20],"f":"``{bd}{ce{}{}}0`{df}{cc{}}{hj}3{ln}`{jh}{c{{A`{e}}}{}{}}0{cAb{}}````{{Adb}Af}{{AdAh}{{A`{{An{{Al{Aj}}}}B`}}}}{Af{{Al{Aj}}}}0{Adb};;;;{Afb}{{Ad{An{Aj}}Ah}f}{{AdBb}Bd}{{AfBb}Bd}{{AdAf}f}5>>{ce{}{}}0{Afn}86{{jb}Af}{Afj}9{cBf{}}:????>>::{Afh}`````````{Bhf}666666{BjBj}{BlBl}{BnBn}{{ce}f{}{}}00{{}Bh}{{BjBj}n}{{BlBl}n}{{BnBn}n}{{BjBb}Bd}{{BlBb}Bd}{{BnBb}Bd}{cc{}}00{ce{}{}}00{{Bh{C`{h}}Cb}n}{{Bh{C`{h}}jCb}f}:{{BhhBj}Cd}{{Bhj}h}444{c{{A`{e}}}{}{}}00000{cAb{}}00{{Bh{C`{h}}}f}{{Bhh}{{Cf{j}}}}","c":[],"p":[[1,"usize"],[5,"PageFrames",110],[1,"unit"],[5,"VirtAddr",111],[5,"PhysAddr",111],[1,"u64"],[1,"bool"],[6,"Result",112],[5,"TypeId",113],[5,"PageFrameAllocator",17],[5,"PageFrame",17],[5,"Layout",114],[1,"u8"],[1,"slice"],[5,"NonNull",115],[5,"AllocError",116],[5,"Formatter",117],[8,"Result",117],[5,"String",118],[10,"PageMapImpl",56],[6,"Privilege",56],[5,"Handled",56],[5,"NotHandled",56],[5,"Range",119],[5,"PageTableFlags",120],[8,"PageFaultResult",56],[6,"Option",121],[5,"Pfa",0]],"b":[]}],\
["hyperion_num_postfix",{"doc":"","t":"TTKFNNNNNNNNNNNNNN","n":["NUM_1000","NUM_1024","NumberPostfix","NumberPostfixed","borrow","borrow_mut","clone","fmt","fmt","from","into","into_inner","postfix","postfix_binary","scale","try_from","try_into","type_id"],"q":[[0,"hyperion_num_postfix"],[18,"core::clone"],[19,"core::fmt"],[20,"core::fmt"],[21,"core::any"]],"d":["","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[7,7,0,0,1,1,1,1,1,1,1,1,7,7,1,1,1,1],"f":"````{ce{}{}}0{{{b{c}}}{{b{c}}}d}{{{b{c}}f}hj}{{{b{c}}f}hl}{cc{}}4{{{b{c}}}c{}}{n{{b{n}}}}0{{{b{c}}}A`{}}{c{{Ab{e}}}{}{}}0{cAd{}}","c":[],"p":[[5,"NumberPostfixed",0],[10,"Clone",18],[5,"Formatter",19],[8,"Result",19],[10,"Display",19],[10,"Debug",19],[10,"NumberPostfix",0],[1,"str"],[6,"Result",20],[5,"TypeId",21]],"b":[[7,"impl-Display-for-NumberPostfixed%3CT%3E"],[8,"impl-Debug-for-NumberPostfixed%3CT%3E"]]}],\
["hyperion_random",{"doc":"","t":"KKKKRKNMNMNNNNHHMMHNNNMNM","n":["CryptoRng","Fill","Rng","RngCore","Seed","SeedableRng","fill","fill_bytes","from_rng","from_seed","gen","gen_bool","gen_range","gen_ratio","next_fast_rng","next_secure_rng","next_u32","next_u64","provide_entropy","sample","sample_iter","seed_from_u64","try_fill","try_fill","try_fill_bytes"],"q":[[0,"hyperion_random"],[25,"core::marker"],[26,"rand_core::error"],[27,"core::result"],[28,"core::default"],[29,"core::convert"],[30,"rand::distributions::uniform"],[31,"rand::distributions::uniform"],[32,"rand_chacha::chacha"],[33,"rand::distributions::distribution"],[34,"rand::distributions::distribution"]],"d":["A marker trait used to indicate that an <code>RngCore</code> or …","Types which may be filled with random data","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","","","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data."],"i":[0,0,0,0,9,0,1,5,9,9,1,1,1,1,0,0,5,5,0,1,1,9,3,1,5],"f":"``````{{bc}d{fh}}{{j{n{l}}}d}{c{{Af{{Ab{}{{A`{e}}}}Ad}}}j{hAh{Aj{{n{l}}}}}}{c{{Ab{}{{A`{c}}}}}{hAh{Aj{{n{l}}}}}}{bc{}}{{bAl}An}{{be}cB`{{Bb{c}}}}{{bBdBd}An}{{}Bf}{{}{{Bj{Bh}}}}{jBd}{jBl}{{{n{l}}}d}{{be}c{}{{Bn{c}}}}{{be}{{C`{ebc}}}{}{{Bn{c}}}}{Bl{{Ab{}{{A`{c}}}}}{hAh{Aj{{n{l}}}}}}{{fc}{{Af{dAd}}}{bh}}{{bc}{{Af{dAd}}}{fh}}{{j{n{l}}}{{Af{dAd}}}}","c":[],"p":[[10,"Rng",0],[1,"unit"],[10,"Fill",0],[10,"Sized",25],[10,"RngCore",0],[1,"u8"],[1,"slice"],[17,"Seed"],[10,"SeedableRng",0],[5,"Error",26],[6,"Result",27],[10,"Default",28],[10,"AsMut",29],[1,"f64"],[1,"bool"],[10,"SampleUniform",30],[10,"SampleRange",30],[1,"u32"],[5,"ChaCha8Rng",31],[5,"ChaCha20Rng",31],[6,"Option",32],[1,"u64"],[10,"Distribution",33],[5,"DistIter",33]],"b":[]}],\
["hyperion_ring",{"doc":"","t":"FFFFFFIKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNNNNNNNN","n":["RefReceiver","RefSender","RingBuf","RingBufMarker","Slot","Static","StaticRingBuf","Storage","acquire","acquire_up_to","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","consume","consume_up_to","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","first","fmt","fmt","free_space","from","from","from","from","from","from","from","from_inner","init","init","init","init","init","init","init_slot","into","into","into","into","into","into","is_empty","is_empty","len","len","min","new","new","new","new","new","pop","pop","pop_arr","pop_arr","pop_slice","pop_slice","produce","push","push","push_arr","push_arr","push_slice","push_slice","read_guard","read_guard_up_to","release","slices","static_ringbuf","take","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","uninit_slot","used_space","write_guard","write_guard_up_to"],"q":[[0,"hyperion_ring"],[120,"core::option"],[121,"core::fmt"],[122,"core::fmt"],[123,"core::cell"],[124,"alloc::boxed"],[125,"core::marker"],[126,"core::result"],[127,"core::ops::deref"],[128,"core::any"]],"d":["","","","Safety","","","","","Safety","Safety","","","","","","","","","","","","","Safety","Safety","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Safety","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Safety","","Safety","","Safety","Safety","","Safety","","Safety","","Safety","Safety","Safety","Safety","","","","","","","","","","","","","","","","","","","","","","","","Safety","Safety"],"i":[0,0,0,0,0,0,0,0,1,1,5,11,16,10,3,1,5,11,16,10,3,1,1,1,5,5,11,16,10,3,1,5,11,16,10,3,1,5,11,16,10,3,1,3,3,3,1,1,5,11,16,10,10,3,1,11,5,11,16,10,3,1,1,5,11,16,10,3,1,3,1,3,1,3,5,10,10,3,1,16,10,16,10,16,10,1,11,10,11,10,11,10,1,1,1,3,0,3,5,11,16,10,3,1,5,11,16,10,3,1,5,11,16,10,3,1,1,1,1,1],"f":"````````{{bd}{{h{f}}}}{{bd}f}{ce{}{}}0000000000021{dc{}}{{{j{c}}}e{}{}}11111111111{dl}00000{{ff}n}{fd}{{fA`}Ab}{{bA`}Ab}{bd}{cc{}}00{{cd}{{Ad{ec}}}{}{}}111{{{Ad{ce}}}{{Af{ce}}}{}{}}{{}d}00000{bf}======{fn}{bn}:7{{fd}f}{{}{{j{c}}}{}}{{}{{Ad{c{j{c}}}}}{}}{d{{Ad{c{An{{Al{{Aj{{Ah{c}}}}}}}}}}}{}}{{dd}f}{db}{{{B`{ce}}}{{h{c}}}{}{{Bb{c}}}}{{{Ad{ce}}}{{h{c}}}{}{{Bb{c}}}}{{{B`{ce}}}{{h{{Bd{c}}}}}{}{{Bb{c}}}}{{{Ad{ce}}}{{h{{Bd{c}}}}}{}{{Bb{c}}}}{{{B`{ce}}{Al{c}}}dBf{{Bb{c}}}}{{{Ad{ce}}{Al{c}}}dBf{{Bb{c}}}}{{bf}l}{{{Af{ce}}c}{{Bh{lc}}}{}{{Bb{c}}}}{{{Ad{ce}}c}{{Bh{lc}}}{}{{Bb{c}}}}{{{Af{ce}}{Bd{c}}}{{Bh{l{Bd{c}}}}}{}{{Bb{c}}}}{{{Ad{ce}}{Bd{c}}}{{Bh{l{Bd{c}}}}}{}{{Bb{c}}}}{{{Af{ce}}{Al{c}}}dBf{{Bb{c}}}}6{{bd}{{h{{`{{Bl{}{{Bj{f}}}}}}}}}}{{bd}{{`{{Bl{}{{Bj{f}}}}}}}}7{{f{Al{c}}}{{Bn{{Al{c}}{Al{c}}}}}{}}`{{fd}{{h{f}}}}{c{{Bh{e}}}{}{}}00000000000{cC`{}}00000{bf}{bd}76","c":[],"p":[[5,"RingBufMarker",0],[1,"usize"],[5,"Slot",0],[6,"Option",120],[5,"Static",0],[1,"unit"],[1,"bool"],[5,"Formatter",121],[8,"Result",121],[5,"RingBuf",0],[5,"RefSender",0],[20,"MaybeUninit",122],[5,"UnsafeCell",123],[1,"slice"],[5,"Box",124],[5,"RefReceiver",0],[10,"Storage",0],[1,"array"],[10,"Copy",125],[6,"Result",126],[17,"Target"],[10,"Deref",127],[1,"tuple"],[5,"TypeId",128]],"b":[[75,"impl-RingBuf%3CT,+Static%3CT,+N%3E%3E"],[76,"impl-RingBuf%3CT,+Box%3C%5BUnsafeCell%3CMaybeUninit%3CT%3E%3E%5D%3E%3E"]]}],\
["hyperion_scheduler",{"doc":"","t":"JJCCHHCHHCCHHHHCHHHHCHHHGFPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOFNNNNNNNNNNNNNNNNHHHCFFIFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNOONOONNOONNOONOONNOONNNNNNNNNNNNNNNNNNNNNNNNFFFIIFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHGPGPPPJFFFKPPPJJJJFFGFONNOMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNONNNNOOHOONHNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNN","n":["READY","RUNNING","cleanup","condvar","done","exit","futex","idle","init","ipc","lock","process","rename","running","schedule","sleep","sleep","sleep_until","spawn","spawn_userspace","task","task","yield_now","yield_now_wait","Cleanup","CleanupTask","Drop","Ready","Sleep","Wait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","init","init","into","into","run","run","task","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","addr","deadline","val","Condvar","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","notify_all","notify_one","try_from","try_into","type_id","vzip","wait","cleanup","wait","wake","pipe","Channel","Closed","Pipe","Receiver","Sender","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","close","close","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","fmt","from","from","from","from","init","init","init","init","into","into","into","into","new","new_pipe","new_pipe","pipe","pipe_with","recv","recv","recv","recv","recv_closed","recv_closed","recv_closed","recv_slice","recv_slice","recv_wait","recv_wait","send","send","send","send","send_closed","send_closed","send_closed","send_slice","send_slice","send_wait","send_wait","split","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","wait_closed","wait_closed","weak_recv_slice","weak_send_slice","AutoFutex","Futex","Lazy","Mutex","MutexGuard","Once","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_once","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","force","from","from","from","from","get","init","init","init","init","initialized","initialized","into","into","into","into","lock","lock","new","new","new","new","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_lock","try_lock","type_id","type_id","type_id","type_id","unlock","unlock","vzip","vzip","vzip","vzip","wait","push","AllocErr","Dropping","FreeErr","InvalidAddr","InvalidAlloc","OutOfVirtMem","PROCESSES","PageAllocs","Pid","Process","ProcessExt","Ready","Running","Sleeping","TASKS_DROPPING","TASKS_READY","TASKS_RUNNING","TASKS_SLEEPING","Task","TaskInner","TaskState","Tid","address_space","alloc","alloc_at","allocs","as_any","as_str","bitmap","bootloader","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","cmp","cmp","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","ext","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free","from","from","from","from","from","from","from","from","from","from","hash","hash","heap_bottom","init","init","init","init","init","init","init","init","init","init_tls","into","into","into","into","into","into","into","into","into","is_dropping","is_ready","is_running","is_sleeping","job","kernel_stack","master_tls","name","nanos","new","new","new","new","new_any","next","next","next_tid","num","num","partial_cmp","partial_cmp","pid","process","processes","should_terminate","state","swap_state","switch_because","thread","thread_any","threads","tid","tls","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user_stack","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"hyperion_scheduler"],[24,"hyperion_scheduler::cleanup"],[61,"hyperion_scheduler::cleanup::Cleanup"],[64,"hyperion_scheduler::condvar"],[81,"hyperion_scheduler::futex"],[84,"hyperion_scheduler::ipc"],[85,"hyperion_scheduler::ipc::pipe"],[186,"hyperion_scheduler::lock"],[257,"hyperion_scheduler::sleep"],[258,"hyperion_scheduler::task"],[477,"time::duration"],[478,"core::iter::traits::iterator"],[479,"core::ops::function"],[480,"core::marker"],[481,"alloc::sync"],[482,"arcstr::arc_str"],[483,"core::convert"],[484,"hyperion_instant"],[485,"core::fmt"],[486,"core::fmt"],[487,"core::any"],[488,"lock_api::mutex"],[489,"x86_64::addr"],[490,"core::sync::atomic"],[491,"core::clone"],[492,"core::marker"],[493,"x86_64::structures::paging::page_table"],[494,"x86_64::addr"],[495,"spin::mutex"],[496,"core::cmp"],[497,"core::hash"],[498,"hyperion_arch_x86_64::stack"],[499,"alloc::boxed"],[500,"alloc::vec"],[501,"alloc::string"]],"d":["","","","","destroy the current thread and switch to another thread","destroy the current process and switch to another","","","init this processors scheduling and immediately switch to …","","","","","","spawn a new process running this closure or a function or …","","","","spawn a new thread on the same process","spawn a new thread in the currently running process","","","switch to another thread","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","post switch cleanup","if the value at <code>addr</code> is eq <code>val</code>, go to sleep","wake up threads waiting for events on this <code>addr</code>","","simple P2P 2-copy IPC channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","wait for the receiver to be closed","","","","","","","","","the actual data channel","the actual data channel","wait for the sender to be closed","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sender doesn’t keep the recv side open","Receiver doesn’t keep the send side open","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A process, each process can have multiple ‘tasks’ …","","","","","","","","","","","","","process address space","","","a store for all allocated (and mapped) physical pages","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","close everything before the actual process closes, because …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extra process info added by the kernel (like file …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","process heap beginning, the end of the user process","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the task state is <code>Dropping</code>.","Returns <code>true</code> if the task state is <code>Ready</code>.","Returns <code>true</code> if the task state is <code>Running</code>.","Returns <code>true</code> if the task state is <code>Sleeping</code>.","thread_entry runs this function once, and stops the …","lazy initialized kernel-space stack, also used when …","TLS object data, each thread allocates one into the …","process name","cpu time this process (all tasks) has used in nanoseconds","","","","","","","","next thread id","","","","","process id","a shared process ref, multiple tasks can point to the same …","","","task state, ‘is the task waiting or what?’","","","","","number of threads in this process","thread id","a copy of the master TLS for specifically this task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lazy initialized user-space stack","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,17,17,21,17,21,17,17,17,21,17,21,17,21,17,17,21,17,21,17,21,17,21,17,17,17,21,17,21,17,21,17,21,17,63,64,63,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,0,0,0,0,0,0,34,29,30,32,34,29,30,32,29,30,32,29,30,32,30,32,33,34,29,30,32,34,29,30,32,34,29,30,30,32,32,29,29,34,29,30,32,34,29,30,32,34,29,30,32,34,33,34,0,0,34,32,33,34,34,33,34,34,32,33,34,34,30,33,34,34,33,34,34,30,33,34,34,29,30,32,34,29,30,32,34,29,30,32,34,29,30,32,34,29,30,32,30,32,30,32,0,0,0,0,0,0,25,43,39,41,25,43,39,41,39,25,43,39,41,41,25,43,39,41,25,43,39,41,41,25,43,39,41,39,25,43,39,41,39,41,25,43,39,41,25,43,25,43,39,41,25,43,39,41,25,43,39,41,25,43,25,43,39,41,25,43,25,43,39,41,39,0,0,49,0,55,55,46,0,0,0,0,0,49,49,49,0,0,0,0,0,0,0,0,7,7,7,7,47,49,51,14,7,57,51,13,54,46,55,14,49,7,57,51,13,54,46,55,14,49,13,54,46,55,14,49,13,54,46,55,14,49,47,13,54,51,7,57,57,51,13,54,46,55,14,14,49,7,57,51,13,54,46,55,14,49,7,7,57,57,51,13,54,46,55,14,49,13,54,46,55,49,7,13,51,13,13,54,46,55,49,7,7,57,51,13,54,46,55,14,14,49,13,54,7,7,57,51,13,54,46,55,14,49,57,7,57,51,13,54,46,55,14,49,49,49,49,49,57,57,7,7,7,7,13,54,14,14,13,54,7,13,54,13,54,7,57,0,7,57,14,0,14,14,7,57,57,13,54,46,55,14,49,13,7,57,51,13,54,46,55,14,49,7,57,51,13,54,46,55,14,49,7,57,51,13,54,46,55,14,49,57,7,57,51,13,54,46,55,14,49],"f":"````{{}b}0`{{}{{`{{h{}{{d{f}}}}}}}}{cb{jl}}``{{}{{A`{n}}}}{cAb{{Af{Ad}}}}{{}Ah}{cAj{{Af{Al}}}}`{fAb}{AnAb}{cAb{jl}}{{B`B`}Ab}`{{}Al}{{}Ab}0``````{ce{}{}}000{BbBb}{{ce}Ab{}{}}{Bdc{}}000{BdAb}0{{BbBf}Bh}{cc{}}0{{}Bd}077{BjAb}{{BbAl}Ab}{{BbAl}Bj}:{c{{Bl{e}}}{}{}}000{cBn{}}0<<````<<99865<{{}C`}{C`Ab}0332>{{C`{Cd{Cbc}}}{{Cd{Cbc}}}{}}{{CfBdAl}Ab}{{ChBd}Ab}0``````{ce{}{}}0000000{CjCj}{{{Cl{c}}}{{Cl{c}}}Cn}{{{D`{c}}}{{D`{c}}}Cn}{{ce}Ab{}{}}00{{{Cl{c}}}Ab{}}{{{D`{c}}}Ab{}}{{}Db}{Bdc{}}0000000{BdAb}00430{{CjCj}Ah}{{CjBf}Bh}{cc{}}000{{}Bd}000===={Bd{{Dd{c}}}{}}7{{}{{Dd{Df}}}}8{BdDb}{{{Dd{c}}}{{Bl{cCj}}}{}}{{{D`{c}}}{{Bl{cCj}}}{}}``{{{Dd{c}}}Ab{}}``{{{Dd{c}}{Dh{c}}}{{Bl{BdCj}}}Dj}{{{D`{c}}{Dh{c}}}{{Bl{BdCj}}}Dj}``{{{Dd{c}}c}{{Bl{AbCj}}}{}}{{{Cl{c}}c}{{Bl{AbCj}}}{}}``4``{{{Dd{c}}{Dh{c}}}{{Bl{AbCj}}}Dj}{{{Cl{c}}{Dh{c}}}{{Bl{AbCj}}}Dj}``{{{Dd{c}}}{{Dl{{Cl{c}}{D`{c}}}}}{}}{ce{}{}}00{c{{Bl{e}}}{}{}}0000000{cBn{}}0002222{{{Cl{c}}}Ab{}}{{{D`{c}}}Ab{}}{{{Cl{c}}{Dh{c}}}{{Bl{BdCj}}}Dj}{{{D`{c}}{Dh{c}}}{{Bl{AbCj}}}Dj}``````66666666{{{Dn{c}}e}c{}{{j{}{{E`{c}}}}}}{Bdc{}}000{{{Eb{ce}}}g{}{{j{}{{E`{c}}}}}{}}1111{BdAb}000{{{Eb{ce}}}c{}{{j{}{{E`{c}}}}}}{cc{}}000{{{Dn{c}}}{{Ed{c}}}{}}{{}Bd}000{c{{Dn{c}}}{}}{c{{Eb{ce}}}{}{{j{}{{E`{c}}}}}}{ce{}{}}000{CbAb}{EfAb}{{}Cb}{{}Ef}{{}{{Dn{c}}}{}}{e{{Eb{ce}}}{}{{j{}{{E`{c}}}}}}{c{{Bl{e}}}{}{}}0000000{CbAh}{EfAh}{cBn{}}00098::::{{{Dn{c}}}c{}}{{AnAl}Ab}```````````````````````{{nBdEh}{{Bl{{Dl{EjCf}}El}}}}{{nBdEjEh}{{Bl{CfEl}}}}`{EnF`}{FbFd}{Ff{{Fj{Fh}}}}{{}Al}{ce{}{}}00000000000000000{AjAj}{FlFl}{ElEl}{FnFn}{AlAl}{FbFb}{{ce}Ab{}{}}00000{EnAb}{{AjAj}G`}{{FlFl}G`}{{}Ff}{Bdc{}}0{Gbc{}}11111{Alc{}}22222222222{BdAb}{nAb}1{GbAb}2222222{{AjAj}Ah}{{FlFl}Ah}{{ElEl}Ah}{{FnFn}Ah}{{FbFb}Ah}`{Aj{{Ed{{A`{n}}}}}}{{FfBf}Bh}{{AjBf}Bh}0{{FlBf}Bh}{{ElBf}Bh}{{FnBf}Bh}{{FbBf}Bh}{{nBdEj}{{Bl{AbFn}}}}{cc{}}000000{cAl{jl}}11{{Ajc}AbGd}{{Flc}AbGd}`{{}Bd}00000000{GbAb}{ce{}{}}00000000{FbAh}000`````{{AjAdGf}{{A`{n}}}}{BdAj}{BdFl}9{{{Gh{j}}Ad}Al}{{}Aj}{nFl}`{AjBd}{FlBd}{{AjAj}{{Ed{G`}}}}{{FlFl}{{Ed{G`}}}}``{{}{{Gj{{A`{n}}}}}}``{{AlFb}Fb}{{AlFbBb}Ab}{{{A`{n}}c}Al{jl}}{{{A`{n}}{Gh{j}}}Al}```{ce{}{}}00000{cGl{}}{c{{Bl{e}}}{}{}}00000000000000000{cBn{}}00000000`333333333","c":[],"p":[[1,"never"],[17,"Item"],[5,"Duration",477],[10,"Iterator",478],[10,"FnOnce",479],[10,"Send",480],[5,"Process",258],[5,"Arc",481],[1,"unit"],[5,"ArcStr",482],[10,"Into",483],[1,"bool"],[5,"Pid",258],[5,"Task",258],[5,"Instant",484],[1,"u64"],[6,"Cleanup",24],[1,"usize"],[5,"Formatter",485],[8,"Result",485],[5,"CleanupTask",24],[6,"Result",486],[5,"TypeId",487],[5,"Condvar",64],[5,"Futex",186],[5,"MutexGuard",488],[5,"PhysAddr",489],[5,"AtomicUsize",490],[5,"Closed",85],[5,"Sender",85],[10,"Clone",491],[5,"Receiver",85],[8,"Pipe",85],[5,"Channel",85],[1,"u8"],[1,"slice"],[10,"Copy",480],[1,"tuple"],[5,"Once",186],[17,"Output"],[5,"Lazy",186],[6,"Option",492],[5,"AutoFutex",186],[5,"PageTableFlags",493],[5,"VirtAddr",489],[6,"AllocErr",258],[10,"ProcessExt",258],[10,"Any",487],[6,"TaskState",258],[1,"str"],[5,"PageAllocs",258],[5,"Bitmap",494],[5,"MutexGuard",495],[5,"Tid",258],[6,"FreeErr",258],[6,"Ordering",496],[5,"TaskInner",258],[10,"Hasher",497],[5,"AddressSpace",498],[5,"Box",499],[5,"Vec",500],[5,"String",501],[15,"Wait",61],[15,"Sleep",61]],"b":[[361,"impl-Display-for-Pid"],[362,"impl-Debug-for-Pid"]]}],\
["hyperion_slab_alloc",{"doc":"Slab allocator","t":"KFFFFMNNNONNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNO","n":["AllocBackend","PageFrames","Slab","SlabAllocator","SlabAllocatorStats","alloc","alloc","alloc","alloc","allocated","as_bytes","as_bytes_mut","as_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_len","dealloc","default","deref","deref_mut","fmt","free","free","free","from","from","from","from","get_slab","into","into","into","into","is_empty","len","new","new","new","new","size","size","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","used"],"q":[[0,"hyperion_slab_alloc"],[60,"core::alloc::layout"],[61,"lock_api::mutex"],[62,"core::fmt"],[63,"core::fmt"],[64,"core::option"],[65,"core::result"],[66,"core::any"]],"d":["a backend allocator, allocates whole pages (4KiB blocks)","","","","","","","","","physical memory allocated by this slab allocator","","","","","","","","","","","","","","","","","","","Safety","Safety","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Safety","","Safety","","","","","","","","","","","","","","memory given out by this slab allocator"],"i":[0,0,0,0,0,6,3,3,8,9,2,2,2,3,8,2,9,3,8,2,9,2,3,3,3,3,9,6,3,8,3,8,2,9,3,3,8,2,9,2,2,3,8,2,9,3,8,3,8,2,9,3,8,2,9,3,8,2,9,9],"f":"`````{bd}{{{f{ce}}h}jln}{{{f{ce}}b}jln}{{{A`{ce}}jAb}jl{}}`{d{{Ad{j}}}}0{dj}{ce{}{}}0000000{db}{{{f{ce}}jh}Afln}{{}{{f{ce}}}{}n}{{{f{ce}}}g{}{}{}}0{{AbAh}Aj}{dAf}{{{f{ce}}{Al{j}}}Afln}{{{A`{ce}}Ab{Al{j}}}Afl{}}{cc{}}000{{{f{ce}}b}{{B`{{An{j{A`{ce}}}}}}}{}n}::::{dBb}:8{b{{A`{ce}}}{}{}}{{jb}d}{{}Ab}{{{f{ce}}{Al{j}}}bln}`{c{{Bd{e}}}{}{}}0000000{cBf{}}000`","c":[],"p":[[1,"usize"],[5,"PageFrames",0],[5,"SlabAllocator",0],[5,"Layout",60],[1,"u8"],[10,"AllocBackend",0],[10,"RawMutex",61],[5,"Slab",0],[5,"SlabAllocatorStats",0],[1,"slice"],[1,"unit"],[5,"Formatter",62],[8,"Result",62],[5,"NonNull",63],[1,"tuple"],[6,"Option",64],[1,"bool"],[6,"Result",65],[5,"TypeId",66]],"b":[[6,"impl-GlobalAlloc-for-SlabAllocator%3CP,+Lock%3E"],[7,"impl-SlabAllocator%3CP,+Lock%3E"]]}],\
["hyperion_static_str",{"doc":"","t":"FNNNNNNNNNNNNNNNNNN","n":["StaticStr","as_bytes","as_str","as_str_checked","borrow","borrow_mut","clone","deref","eq","fmt","fmt","from","from_utf8","from_utf8_unchecked","hash","into","try_from","try_into","type_id"],"q":[[0,"hyperion_static_str"],[19,"core::str::error"],[20,"core::result"],[21,"core::fmt"],[22,"core::fmt"],[23,"core::any"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","Safety","","Calls <code>U::from(self)</code>.","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"`{b{{f{d}}}}{bh}{b{{l{hj}}}}{ce{}{}}0{bb}{bc{}}{{bb}n}{{bA`}Ab}0{cc{}}{{{Ad{d}}}{{l{bj}}}}{{{Ad{d}}}b}{{bc}AfAh}8{c{{l{e}}}{}{}}0{cAj{}}","c":[],"p":[[5,"StaticStr",0],[1,"u8"],[1,"slice"],[1,"str"],[5,"Utf8Error",19],[6,"Result",20],[1,"bool"],[5,"Formatter",21],[8,"Result",21],[1,"array"],[1,"unit"],[10,"Hasher",22],[5,"TypeId",23]],"b":[[9,"impl-Display-for-StaticStr%3CSIZE%3E"],[10,"impl-Debug-for-StaticStr%3CSIZE%3E"]]}],\
["hyperion_sync",{"doc":"","t":"FNNNNQNNQNNNN","n":["TakeOnce","borrow","borrow_mut","from","into","last","new","none","once","take","try_from","try_into","type_id"],"q":[[0,"hyperion_sync"],[13,"core::option"],[14,"core::result"],[15,"core::any"]],"d":["","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","CPUs race and only the last one returns true","","","CPUs race and only the first one returns true","","","",""],"i":[0,1,1,1,1,0,1,1,0,1,1,1,1],"f":"`{ce{}{}}0{cc{}}1`{c{{b{c}}}{}}{{}{{b{c}}}{}}`{{{b{c}}}{{d{c}}}{}}{c{{f{e}}}{}{}}0{ch{}}","c":[],"p":[[5,"TakeOnce",0],[6,"Option",13],[6,"Result",14],[5,"TypeId",15]],"b":[]}],\
["hyperion_syscall",{"doc":"","t":"HHHHHHCHCHHHHCHHHHHHCHHHHHHHHHHHHHHHHHHHHHHTTTTPFTTTTTTTTTTTTTTTTTPTITTTNNNNNNNNNNNNNNNNNTTTTTFFFTTTFTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNONNNNNNNNNNNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSTTFTFFTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["accept","bind","close","connect","done","dup","err","exit","fs","futex_wait","futex_wake","get_pid","get_tid","id","listen","log","map_file","metadata","nanosleep","nanosleep_until","net","open","open_dir","palloc","pfree","read","read_uninit","recv","rename","seek","send","socket","spawn","syscall_0","syscall_1","syscall_2","syscall_3","syscall_4","syscall_5","timestamp","unmap_file","write","yield_now","ALREADY_EXISTS","BAD_FILE_DESCRIPTOR","CLOSED","CONNECTION_REFUSED","Err","Error","FILESYSTEM_ERROR","INTERRUPTED","INVALID_ADDRESS","INVALID_ALLOC","INVALID_ARGUMENT","INVALID_DOMAIN","INVALID_FLAGS","INVALID_TYPE","INVALID_UTF8","IS_A_PIPE","NOT_A_DIRECTORY","NOT_A_FILE","NOT_A_SOCKET","NOT_FOUND","NO_SUCH_PROCESS","OUT_OF_MEMORY","OUT_OF_VIRTUAL_MEMORY","Ok","PERMISSION_DENIED","Result","UNEXPECTED_EOF","UNKNOWN_PROTOCOL","WRITE_ZERO","as_str","borrow","borrow_mut","clone","cmp","decode","encode","eq","fmt","fmt","from","hash","into","partial_cmp","try_from","try_into","type_id","APPEND","CREATE","CREATE_NEW","CUR","END","FileDesc","FileOpenFlags","Metadata","READ","READ_WRITE","SET","Seek","TRUNC","WRITE","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","cmp","cmp","cmp","complement","contains","difference","empty","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","insert","intersection","intersects","into","into","into","into","into_iter","is_all","is_empty","is_empty","iter","iter_names","len","len","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","position","position","remove","set","sub","sub_assign","symmetric_difference","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","zeroed","ACCEPT","BIND","CLOSE","CONNECT","DONE","DUP","EXIT","FUTEX_WAIT","FUTEX_WAKE","GET_PID","GET_TID","LISTEN","LOG","MAP_FILE","METADATA","NANOSLEEP","NANOSLEEP_UNTIL","OPEN","OPEN_DIR","PALLOC","PFREE","READ","RECV","RENAME","SEEK","SEND","SOCKET","SPAWN","TIMESTAMP","UNMAP_FILE","WRITE","YIELD_NOW","LOCAL","LOCAL","Protocol","STREAM","SocketDomain","SocketType","UNIX","UNIX","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","partial_cmp","partial_cmp","partial_cmp","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"hyperion_syscall"],[43,"hyperion_syscall::err"],[89,"hyperion_syscall::fs"],[197,"hyperion_syscall::id"],[229,"hyperion_syscall::net"],[273,"core::sync::atomic"],[274,"core::ptr::non_null"],[275,"core::option"],[276,"core::mem::maybe_uninit"],[277,"core::cmp"],[278,"core::fmt"],[279,"core::fmt"],[280,"core::result"],[281,"core::any"],[282,"core::iter::traits::collect"],[283,"bitflags::iter"],[284,"bitflags::iter"]],"d":["accept a connection on a socket","bind a name to a socket","close a file","connect to a socket","exit the thread with a code","duplicate a file descriptor","","exit the process with a code","","futex wait if value at <code>addr</code> is <code>val</code>","wake <code>num</code> threads that are sleeping on this <code>addr</code>","get the current process id","get the current thread id","","start listening for connections on a socket","print a string into kernel logs","map file contents to memory (mmap)","file metadata (stat)","context switch from this process and switch back when <code>nanos</code>…","context switch from this process and switch back when …","","open a file","open a directory","allocate physical pages and map to heap","deallocate physical pages and unmap from heap","read from a file","read from a file","read data from a socket","rename the current process","file position seek (fseek)","send data to a socket","create a socket","spawn a new pthread for the same process","Safety","Safety","Safety","Safety","Safety","Safety","u128 nanoseconds since boot","unmap device/file mapped memory (munmap)","write into a file","context switch from this process, no guarantees about …","","","","","Contains the error value","","","","","","","","","","","","","","","","","","","Contains the success value","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","writes append to the file","create file if it doesn’t already exist","create file if it doesn’t already exist and err if it …","","","","","","open file with read caps","open file with read and write caps","","","truncate file on open (if the file already existed)","open file with write caps","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","","Yield a set of contained flags values.","Yield a set of contained named flags values.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","","","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,2,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,2,22,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,13,13,13,30,30,0,0,0,13,13,30,0,13,13,13,13,13,13,13,13,13,13,13,30,1,13,11,30,1,13,11,30,1,13,11,30,1,13,11,13,13,13,13,30,1,13,11,13,30,1,13,13,13,13,13,11,30,1,13,11,13,13,13,13,13,13,13,13,13,30,1,13,11,13,13,13,11,13,13,11,11,13,30,1,13,11,11,11,13,13,13,13,13,13,30,1,13,11,30,1,13,11,30,1,13,11,13,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,20,0,19,0,0,18,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20,18,19,20],"f":"{b{{d{b}}}}{{bf}{{d{h}}}}{b{{d{h}}}}1{jl}{{bb}{{d{b}}}}`1`{{nA`}h}0{{}A`}0`4{f{{d{h}}}}{{b{Ad{{Ab{h}}}}A`A`}{{d{{Ab{h}}}}}}{{bAf}{{d{h}}}}{Ahh}0`{{fAjA`}{{d{b}}}}{f{{d{b}}}}{A`{{d{{Ad{{Ab{Al}}}}}}}}{{{Ab{Al}}A`}{{d{h}}}}{{b{An{Al}}}{{d{A`}}}}{{b{An{{B`{Al}}}}}{{d{A`}}}}{{b{An{Al}}A`}{{d{A`}}}}:{{bBbA`}{{d{h}}}}1{{BdBfBh}{{d{b}}}}{A`h}{A`{{d{A`}}}}{{A`A`}{{d{A`}}}}{{A`A`A`}{{d{A`}}}}{{A`A`A`A`}{{d{A`}}}}{{A`A`A`A`A`}{{d{A`}}}}{{A`A`A`A`A`A`}{{d{A`}}}}{{}{{d{Bj}}}}{{b{Ab{h}}A`}{{d{h}}}}={{}h}`````````````````````````````{Blf}{ce{}{}}0{BlBl}{{BlBl}Bn}<{{{d{A`}}}A`}{{BlBl}C`}{{BlCb}Cd}0{cc{}}{{Blc}hCf}7{{BlBl}{{Ad{Bn}}}}{c{{Ch{e}}}{}{}}0{cCj{}}``````````````{{}Aj}{{AjAj}Aj}{{AjAj}h}10{AjA`}021>>>>>>>>{ClCl}{bb}{AjAj}{AfAf}{{ClCl}Bn}{{bb}Bn}{{AjAj}Bn}{{AfAf}Bn}5{{AjAj}C`};<{{ClCl}C`}{{bb}C`}2{{AfAf}C`}{{Ajc}h{{D`{}{{Cn{Aj}}}}}}{{ClCb}Cd}{{bCb}Cd}{{AjCb}Cd}0000{{AfCb}Cd}{cc{}}000{A`{{Ad{Aj}}}}{A`Aj}00{cAj{{D`{}{{Cn{Aj}}}}}}{f{{Ad{Aj}}}}{{AjAj}h}{{AjAj}Aj}?{ce{}{}}000{Ajc{}}{AjC`}0{AfC`}{Aj{{Db{Aj}}}}{Aj{{Dd{Aj}}}}{AfA`}`{AjAj}{{ClCl}{{Ad{Bn}}}}{{bb}{{Ad{Bn}}}}{{AjAj}{{Ad{Bn}}}}{{AfAf}{{Ad{Bn}}}}5`={{AjAjC`}h}=>=>{c{{Ch{e}}}{}{}}0000000{cCj{}}000?{{}Af}````````````````````````````````````````??????{BdBd}{BfBf}{BhBh}{{BdBd}Bn}{{BfBf}Bn}{{BhBh}Bn}{{BdBd}C`}{{BfBf}C`}{{BhBh}C`}{{BdCb}Cd}{{BfCb}Cd}{{BhCb}Cd}{cc{}}00{ce{}{}}00{{BdBd}{{Ad{Bn}}}}{{BfBf}{{Ad{Bn}}}}{{BhBh}{{Ad{Bn}}}}{c{{Ch{e}}}{}{}}00000{cCj{}}00","c":[],"p":[[5,"FileDesc",89],[8,"Result",43],[1,"str"],[1,"unit"],[1,"i64"],[1,"never"],[5,"AtomicUsize",273],[1,"usize"],[5,"NonNull",274],[6,"Option",275],[5,"Metadata",89],[1,"u64"],[5,"FileOpenFlags",89],[1,"u8"],[1,"slice"],[20,"MaybeUninit",276],[1,"isize"],[5,"SocketDomain",229],[5,"SocketType",229],[5,"Protocol",229],[1,"u128"],[5,"Error",43],[6,"Ordering",277],[1,"bool"],[5,"Formatter",278],[8,"Result",278],[10,"Hasher",279],[6,"Result",280],[5,"TypeId",281],[5,"Seek",89],[17,"Item"],[10,"IntoIterator",282],[5,"Iter",283],[5,"IterNames",283]],"b":[[80,"impl-Display-for-Error"],[81,"impl-Debug-for-Error"],[108,"impl-FileOpenFlags"],[109,"impl-Flags-for-FileOpenFlags"],[139,"impl-Debug-for-FileOpenFlags"],[140,"impl-LowerHex-for-FileOpenFlags"],[141,"impl-Binary-for-FileOpenFlags"],[142,"impl-Octal-for-FileOpenFlags"],[143,"impl-UpperHex-for-FileOpenFlags"],[150,"impl-Flags-for-FileOpenFlags"],[151,"impl-FileOpenFlags"]]}],\
["hyperion_vfs",{"doc":"","t":"ZCCCCCKKMMMNMNMMNMNMNPPPPGIPPPPPPPNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNONNNNNNNNNNONNNNNNONNNNNNNNNNNNNNNIPPIKKRRGIIINNNNNNNNNNNNNNNMNMNNNNNN","n":["AnyMutex","device","error","path","ramdisk","tree","DirectoryDevice","FileDevice","as_any","create_node","get_node","is_empty","len","map_phys","nodes","read","read_exact","set_len","unmap_phys","write","write_exact","AlreadyExists","Err","FilesystemError","Interrupted","IoError","IoResult","IsADirectory","NotADirectory","NotFound","Ok","PermissionDenied","UnexpectedEOF","WriteZero","as_error_source","backtrace","borrow","borrow_mut","cause","description","fmt","fmt","from","into","msg","source","to_string","try_from","try_into","type_id","Path","PathBuf","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","eq","file_name","fmt","fmt","from","from","from","from_str","into","is_absolute","is_dir","is_file","iter","join","join","new","parent","pop","set","split","to_absolute","to_owned","to_owned","try_from","try_into","type_id","type_id","Directory","File","StaticRoFile","as_any","as_any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","children","create_node","from","from","from","get_node","into","into","into","len","len","name","new","new","new","new_empty","new_ref","nodes","parent","read","read","set_len","set_len","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","DirRef","Directory","File","FileRef","IntoNode","IntoRoot","Mut","Mut","Node","Root","WeakDirRef","WeakFileRef","borrow","borrow_mut","clone","clone_into","find","find_dir","find_file","from","insert","insert_dir","insert_file","install_dev","install_dev_ref","install_dev_with","into","into_node","into_node","into_root","into_root","new_root","to_owned","try_from","try_into","type_id"],"q":[[0,"hyperion_vfs"],[6,"hyperion_vfs::device"],[21,"hyperion_vfs::error"],[50,"hyperion_vfs::path"],[90,"hyperion_vfs::ramdisk"],[135,"hyperion_vfs::tree"],[171,"core::any"],[172,"lock_api::mutex"],[173,"alloc::sync"],[174,"snafu::no_std_error"],[175,"snafu::backtrace_inert"],[176,"core::option"],[177,"core::fmt"],[178,"core::fmt"],[179,"core::result"],[180,"core::any"],[181,"core::convert"],[182,"alloc::borrow"],[183,"alloc::vec"],[184,"core::convert"]],"d":["","","","","","","","","","","","","","allocate physical pages + map the file to it OR get the …","","","","truncate or add zeros to set the length","see <code>Self::map_phys</code>","","","","Contains the error value","","","","","","","","Contains the success value","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","a directory with 0 or more files, like <code>/home/</code>","a normal file, like <code>/etc/fstab</code>","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,3,3,1,1,1,3,1,1,1,1,1,1,15,7,15,15,0,0,15,15,15,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,23,24,23,23,24,24,23,24,24,24,24,24,23,23,24,23,24,24,23,24,23,23,23,23,23,24,24,23,24,24,23,23,23,24,24,24,23,24,0,0,0,30,31,30,31,32,30,31,32,32,32,30,31,32,32,30,31,32,30,31,32,30,31,32,30,32,32,32,30,31,30,31,30,31,32,30,31,32,30,31,32,30,31,0,5,5,0,0,0,40,39,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,39,5,40,41,5,5,5,5,5],"f":"````````{bd}{{fh{j{c}}}{{n{l}}}A`}{{fh}{{n{{j{c}}}}}A`}{bAb}{bAd}{{bAd}{{n{Ad}}}}{f{{n{{Af{{Ah{{Af{h}}}}}}}}}}{{bAd{Ah{Aj}}}{{n{Ad}}}}{{bAd{Ah{Aj}}}{{n{l}}}}{{bAd}{{n{l}}}}{b{{n{l}}}}32`````````````{cAl{}}{An{{Bb{B`}}}}{ce{}{}}0{An{{Bb{Al}}}}{Anh}{{AnBd}Bf}0{cc{}}423{cBh{}}{c{{Bj{e}}}{}{}}0{cBl{}}``{BnBn}{C`Bn}{Bnh}:1:::{C`C`}{{ce}l{}{}}{C`c{}}{{C`C`}Ab}{Bn{{Bb{h}}}}{{BnBd}Bf}{{C`Bd}Bf}{hBn}>{BnC`}1{ce{}{}}{BnAb}00{Bn{{`{{Cd{}{{Cb{h}}}}}}}}{{Bnc}C`{{Cf{Bn}}}}{{C`h}C`}{cC`{{Cf{Bn}}}}{Bn{{Bb{Bn}}}}?{{C`c}C`{{Cf{Bn}}}}{Bn{{Bb{{Ch{Bnh}}}}}}{{BnBn}{{Cj{Bn}}}}{Bnc{}}:{c{{Bj{e}}}{}{}}0{cBl{}}0```{Cld}{Cnd}>>>>>>`{{{D`{c}}h{j{c}}}{{n{l}}}Db}{cc{}}00{{{D`{c}}h}{{n{{j{c}}}}}Db}{ce{}{}}00{ClAd}{CnAd}`{{{Dd{Aj}}}Cl}{{{Ah{Aj}}}Cn}{c{{D`{e}}}{{Df{{Af{h}}}}}Db}{{}{{Dh{c}}}Db}{c{{Dj{e}}}{{Df{{Af{h}}}}}Db}{{{D`{c}}}{{n{{Af{{Ah{{Af{h}}}}}}}}}Db}`{{ClAd{Ah{Aj}}}{{n{Ad}}}}{{CnAd{Ah{Aj}}}{{n{Ad}}}}{{ClAd}{{n{l}}}}{{CnAd}{{n{l}}}}{c{{Bj{e}}}{}{}}00000{cBl{}}0054````````````>>{{{j{c}}}{{j{c}}}{}}{{ce}l{}{}}{{{j{c}}eAb}{{n{{j{c}}}}}Db{{Cf{Bn}}}}{{{j{c}}eAb}{{n{{Dj{c}}}}}Db{{Cf{Bn}}}}{{{j{c}}eAbAb}{{n{{Dh{c}}}}}Db{{Cf{Bn}}}}{cc{}}{{{j{c}}eAb{j{c}}}{{n{l}}}Db{{Cf{Bn}}}}{{{j{c}}eAb{Dj{c}}}{{n{l}}}Db{{Cf{Bn}}}}{{{j{c}}eAb{Dh{c}}}{{n{l}}}Db{{Cf{Bn}}}}{{{j{c}}eg}lDb{{Cf{Bn}}}b}{{{j{c}}e{Dh{c}}}lDb{{Cf{Bn}}}}1{ce{}{}}{{{Dn{}{{Dl{c}}}}}{{j{c}}}Db}{{{j{c}}}{{j{e}}}Db{}}{{{E`{}{{Dl{c}}}}}{{Eb{c}}}Db}{{{Eb{c}}}{{Eb{e}}}Db{}}{{}{{j{c}}}Db}5{c{{Bj{e}}}{}{}}0{cBl{}}","c":[],"p":[[10,"FileDevice",6],[10,"Any",171],[10,"DirectoryDevice",6],[1,"str"],[6,"Node",135],[1,"unit"],[8,"IoResult",21],[10,"RawMutex",172],[1,"bool"],[1,"usize"],[5,"Arc",173],[1,"slice"],[1,"u8"],[10,"Error",174],[6,"IoError",21],[5,"Backtrace",175],[6,"Option",176],[5,"Formatter",177],[8,"Result",177],[5,"String",178],[6,"Result",179],[5,"TypeId",171],[5,"Path",50],[5,"PathBuf",50],[17,"Item"],[10,"Iterator",180],[10,"AsRef",181],[1,"tuple"],[6,"Cow",182],[5,"File",90],[5,"StaticRoFile",90],[5,"Directory",90],[25,"AnyMutex",0],[5,"Vec",183],[10,"Into",181],[8,"FileRef",135],[8,"DirRef",135],[17,"Mut"],[10,"IntoNode",135],[10,"IntoRoot",135],[8,"Root",135]],"b":[[40,"impl-Debug-for-IoError"],[41,"impl-Display-for-IoError"]]}],\
["libstd",{"doc":"","t":"CCQQCCCQQCCCCJFINNNNNNNNNNNFHNNNNNNNNNNNNNNFFFFNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNONNNNNNNNNNONNNNNNNNNNNNNNNNFFTTTFKFFFFFFFKKNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNFFIINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFTTKNNNNNNNNMNNNNNFFIINNNNNNNNNNNNNNNNNNNNNHHHHHHCHCHHHHCHHHHHHCHHHHHHHHHHHHHHHHHHHHHHTTTTPFTTTTTTTTTTTTTTTTTPTITTTNNNNNNNNNNNNNNNNNNNNTTTTTFFFTTTFTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSTTFTFFTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNH","n":["alloc","env","eprint","eprintln","fs","io","net","print","println","process","sync","sys","thread","GLOBAL_ALLOC","PageAlloc","SlabAlloc","alloc","alloc","borrow","borrow_mut","dealloc","free","from","into","try_from","try_into","type_id","Args","args","borrow","borrow_mut","clone","clone_into","from","into","into_iter","len","next","next_back","to_owned","try_from","try_into","type_id","Dir","DirEntry","File","OpenOptions","append","as_desc","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","close","create","create_new","drop","eq","file_name","flush","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_inner","into_iter","is_dir","metadata","new","new","next","next_entry","open","open","open","read","read","size","to_owned","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write","BufReader","BufWriter","FD","FD","FD","FmtWrite","Read","Stderr","StderrLock","Stdin","StdinLock","Stdio","Stdout","StdoutLock","Write","WriteExt","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","consume","deref","deref","deref","deref_mut","deref_mut","deref_mut","fill_buf","flush","flush","flush","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_mut","get_ref","into","into","into","into","into","into","into","into","into","into","into_inner","lock","lock","lock","new","new","read","read","read_exact","read_line","stderr","stdin","stdout","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write_all","write_fmt","write_fmt","write_str","LocalListener","LocalStream","UnixListener","UnixStream","accept","bind","borrow","borrow","borrow_mut","borrow_mut","clone","clone","close","close","connect","drop","drop","flush","fmt","fmt","fmt","from","from","into","into","leak_fd","leak_fd","read","try_from","try_from","try_into","try_into","type_id","type_id","write","ExitCode","FAILURE","SUCCESS","Termination","borrow","borrow_mut","default","exit_process","from","from","from_raw","into","report","report","to_i32","try_from","try_into","type_id","Condvar","Futex","Mutex","MutexGuard","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","lock","new","notify_all","notify_one","try_from","try_from","try_into","try_into","try_lock","type_id","type_id","unlock","wait","accept","bind","close","connect","done","dup","err","exit","fs","futex_wait","futex_wake","get_pid","get_tid","id","listen","log","map_file","metadata","nanosleep","nanosleep_until","net","open","open_dir","palloc","pfree","read","read_uninit","recv","rename","seek","send","socket","spawn","syscall_0","syscall_1","syscall_2","syscall_3","syscall_4","syscall_5","timestamp","unmap_file","write","yield_now","ALREADY_EXISTS","BAD_FILE_DESCRIPTOR","CLOSED","CONNECTION_REFUSED","Err","Error","FILESYSTEM_ERROR","INTERRUPTED","INVALID_ADDRESS","INVALID_ALLOC","INVALID_ARGUMENT","INVALID_DOMAIN","INVALID_FLAGS","INVALID_TYPE","INVALID_UTF8","IS_A_PIPE","NOT_A_DIRECTORY","NOT_A_FILE","NOT_A_SOCKET","NOT_FOUND","NO_SUCH_PROCESS","OUT_OF_MEMORY","OUT_OF_VIRTUAL_MEMORY","Ok","PERMISSION_DENIED","Result","UNEXPECTED_EOF","UNKNOWN_PROTOCOL","WRITE_ZERO","as_str","borrow","borrow_mut","clone","clone_into","cmp","decode","encode","eq","fmt","fmt","from","hash","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id","APPEND","CREATE","CREATE_NEW","CUR","END","FileDesc","FileOpenFlags","Metadata","READ","READ_WRITE","SET","Seek","TRUNC","WRITE","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","complement","contains","difference","empty","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","insert","intersection","intersects","into","into","into","into","into_iter","is_all","is_empty","is_empty","iter","iter_names","len","len","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","position","position","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","zeroed","ACCEPT","BIND","CLOSE","CONNECT","DONE","DUP","EXIT","FUTEX_WAIT","FUTEX_WAKE","GET_PID","GET_TID","LISTEN","LOG","MAP_FILE","METADATA","NANOSLEEP","NANOSLEEP_UNTIL","OPEN","OPEN_DIR","PALLOC","PFREE","READ","RECV","RENAME","SEEK","SEND","SOCKET","SPAWN","TIMESTAMP","UNMAP_FILE","WRITE","YIELD_NOW","LOCAL","LOCAL","Protocol","STREAM","SocketDomain","SocketType","UNIX","UNIX","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","spawn"],"q":[[0,"libstd"],[13,"libstd::alloc"],[27,"libstd::env"],[43,"libstd::fs"],[109,"libstd::io"],[231,"libstd::net"],[266,"libstd::process"],[284,"libstd::sync"],[309,"libstd::sys"],[352,"libstd::sys::err"],[401,"libstd::sys::fs"],[517,"libstd::sys::id"],[549,"libstd::sys::net"],[599,"libstd::thread"],[600,"hyperion_slab_alloc"],[601,"core::alloc::layout"],[602,"core::result"],[603,"core::any"],[604,"core::option"],[605,"core::fmt"],[606,"core::fmt"],[607,"alloc::string"],[608,"core::fmt"],[609,"core::sync::atomic"],[610,"core::ptr::non_null"],[611,"core::mem::maybe_uninit"],[612,"core::cmp"],[613,"core::fmt"],[614,"core::iter::traits::collect"],[615,"bitflags::iter"],[616,"bitflags::iter"],[617,"core::marker"]],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Safety","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","Safety","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","the file descriptor won’t be closed automatically","the file descriptor won’t be closed automatically","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","accept a connection on a socket","bind a name to a socket","close a file","connect to a socket","exit the thread with a code","duplicate a file descriptor","","exit the process with a code","","futex wait if value at <code>addr</code> is <code>val</code>","wake <code>num</code> threads that are sleeping on this <code>addr</code>","get the current process id","get the current thread id","","start listening for connections on a socket","print a string into kernel logs","map file contents to memory (mmap)","file metadata (stat)","context switch from this process and switch back when <code>nanos</code>…","context switch from this process and switch back when …","","open a file","open a directory","allocate physical pages and map to heap","deallocate physical pages and unmap from heap","read from a file","read from a file","read data from a socket","rename the current process","file position seek (fseek)","send data to a socket","create a socket","spawn a new pthread for the same process","Safety","Safety","Safety","Safety","Safety","Safety","u128 nanoseconds since boot","unmap device/file mapped memory (munmap)","write into a file","context switch from this process, no guarantees about …","","","","","Contains the error value","","","","","","","","","","","","","","","","","","","Contains the success value","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","writes append to the file","create file if it doesn’t already exist","create file if it doesn’t already exist and err if it …","","","","","","open file with read caps","open file with read and write caps","","","truncate file on open (if the file already existed)","open file with write caps","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","","Yield a set of contained flags values.","Yield a set of contained named flags values.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","","","","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,11,13,21,16,13,11,21,16,13,11,13,11,11,13,11,11,13,11,16,13,16,13,13,11,21,16,13,11,21,16,13,11,13,21,16,13,13,11,21,21,21,13,11,13,11,16,11,11,21,16,13,11,21,16,13,11,21,16,13,11,13,11,0,0,34,35,36,0,0,0,0,0,0,0,0,0,0,0,34,27,35,28,36,29,31,19,25,32,34,27,35,28,36,29,31,19,25,32,25,27,28,29,27,28,29,25,30,31,32,33,31,32,34,27,35,28,36,29,31,19,25,32,25,25,34,27,35,28,36,29,31,19,25,32,25,34,35,36,25,32,26,31,26,25,0,0,0,34,27,35,28,36,29,31,19,25,32,34,27,35,28,36,29,31,19,25,32,34,27,35,28,36,29,31,19,25,32,30,31,32,30,30,19,19,0,0,0,0,40,40,40,41,40,41,40,41,40,41,41,40,41,41,40,41,41,40,41,40,41,40,41,41,40,41,40,41,40,41,41,0,42,42,0,42,42,42,42,42,42,42,42,45,42,42,42,42,42,0,0,0,0,46,47,46,47,46,47,46,47,46,47,47,47,46,47,46,47,46,46,47,46,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,49,49,49,15,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,15,49,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,54,54,54,64,64,0,0,0,54,54,64,0,54,54,54,54,54,54,54,54,54,54,54,64,14,54,20,64,14,54,20,64,14,54,20,64,14,54,20,64,14,54,20,54,54,54,54,64,14,54,20,54,64,14,54,54,54,54,54,20,64,14,54,20,54,54,54,54,54,54,54,54,54,64,14,54,20,54,54,54,20,54,54,20,20,54,64,14,54,20,20,20,54,54,54,54,54,64,14,54,20,54,64,14,54,20,64,14,54,20,64,14,54,20,54,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,59,0,58,0,0,57,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,0],"f":"````````````````{bd}{{fh}j}{ce{}{}}0{{fjh}l}{dl}{cc{}}3{c{{n{e}}}{}{}}0{cA`{}}`{{}Ab}66{AbAb}{{ce}l{}{}}588{Abb}{Ab{{Ad{c}}}{}}0:665````{{AfAh}Af}{AjAl}<<<<<<<<{AjAj}{AfAf}6{Aj{{An{l}}}}44{Ajl}{{AfAf}Ah}`2{{B`Bb}Bd}{c{{Bf{e}}}{}{}}{{AjBb}Bd}{{AfBb}Bd}{cc{}}000{ce{}{}}000;0`{Aj{{An{Bh}}}}{AlAj}{{}Af}{Bj{{Ad{c}}}{}}{Bj{{Ad{B`}}}}{Bl{{An{Bj}}}}{Bl{{An{Aj}}}}{{Afc}{{An{Aj}}}{{Bn{Bl}}}}{{Aj{C`{j}}}{{An{b}}}}{{AfAh}Af}`:0{c{{n{e}}}{}{}}0000000{cA`{}}00032````````````````<<<<<<<<<<<<<<<<<<<<{{{Cb{c}}b}lCd}{Cfc{}}{Chc{}}{Cjc{}}210{{{Cb{c}}}{{An{{C`{j}}}}}Cd}{Cl{{An{l}}}}{Cn{{An{l}}}}{{{D`{c}}}{{An{l}}}Cl}{Db{{Bf{Db}}}}{c{{Bf{e}}}{}{}}0{cc{}}000000000{{{Cb{c}}}cCd}0{ce{}{}}0000000001{DdCf}{DfCh}{DhCj}{c{{Cb{c}}}Cd}{c{{D`{c}}}{}}{{Cd{C`{j}}}{{An{b}}}}{{Cn{C`{j}}}{{An{b}}}}{{Cd{C`{j}}}{{An{l}}}}{{{Cb{c}}Dj}{{An{b}}}Cd}{{}Dh}{{}Dd}{{}Df}{c{{n{e}}}{}{}}0000000000000000000{cA`{}}000000000{{Cl{C`{j}}}{{An{b}}}}8{{{D`{c}}{C`{j}}}{{An{b}}}Cl}{{Cl{C`{j}}}{{An{l}}}}{{ClDl}{{An{l}}}}{{{Bf{c}}Dl}Bd{DnCl}}{{{Bf{c}}Bl}Bd{DnCl}}````{E`{{An{Eb}}}}{Bl{{An{E`}}}}{ce{}{}}000{E`E`}{EbEb}{E`{{An{l}}}}{Eb{{An{l}}}}{Bl{{An{Eb}}}}{E`l}{Ebl}3{{E`Bb}Bd}{{EbBb}Bd}{c{{Bf{e}}}{}{}}{cc{}}0;;{E`Al}{EbAl}{{Eb{C`{j}}}{{An{b}}}}{c{{n{e}}}{}{}}000{cA`{}}02````{ce{}{}}0{{}Ed}{EdEf}{jEd}9{EhEd}4{EjEd}{EdEd}{EdEh}998````7777==77{Ell}{{}En}{Enl}0<<<<{ElAh}<<3{{En{F`{c}}}{{F`{c}}}{}}{Al{{n{AlFb}}}}{{AlBl}{{n{lFb}}}}{Al{{n{lFb}}}}1{FdEf}{{AlAl}{{n{AlFb}}}}`1`{{Ffb}l}0{{}b}0`4{Bl{{n{lFb}}}}{{Al{Ad{{Fh{l}}}}bb}{{n{{Fh{l}}Fb}}}}{{AlBh}{{n{lFb}}}}{Fjl}0`{{BlFlb}{{n{AlFb}}}}{Bl{{n{AlFb}}}}{b{{n{{Ad{{Fh{j}}}}Fb}}}}{{{Fh{j}}b}{{n{lFb}}}}{{Al{C`{j}}}{{n{bFb}}}}{{Al{C`{{Fn{j}}}}}{{n{bFb}}}}{{Al{C`{j}}b}{{n{bFb}}}}:{{AlG`b}{{n{lFb}}}}1{{GbGdGf}{{n{AlFb}}}}{bl}{b{{n{bFb}}}}{{bb}{{n{bFb}}}}{{bbb}{{n{bFb}}}}{{bbbb}{{n{bFb}}}}{{bbbbb}{{n{bFb}}}}{{bbbbbb}{{n{bFb}}}}{{}{{n{GhFb}}}}{{Al{Fh{l}}b}{{n{lFb}}}}={{}l}`````````````````````````````{FbBl}{ce{}{}}0{FbFb}{{ce}l{}{}}{{FbFb}Gj}={{{n{bFb}}}b}{{FbFb}Ah}{{FbBb}{{n{lGl}}}}0{cc{}}{{Fbc}lGn}8{{FbFb}{{Ad{Gj}}}}9{cDj{}}{c{{n{e}}}{}{}}0{cA`{}}``````````````{{}Fl}{{FlFl}Fl}{{FlFl}l}10{Flb}021{ce{}{}}0000000{H`H`}{AlAl}{FlFl}{BhBh}{{ce}l{}{}}000{{H`H`}Gj}{{AlAl}Gj}{{FlFl}Gj}{{BhBh}Gj}6{{FlFl}Ah}=>{{H`H`}Ah}{{AlAl}Ah}2{{BhBh}Ah}{{Flc}l{{Hd{}{{Hb{Fl}}}}}}{{H`Bb}{{n{lGl}}}}{{AlBb}{{n{lGl}}}}{{FlBb}{{n{lGl}}}}0000{{BhBb}{{n{lGl}}}}{cc{}}000{b{{Ad{Fl}}}}{bFl}00{cFl{{Hd{}{{Hb{Fl}}}}}}{Bl{{Ad{Fl}}}}{{FlFl}l}{{FlFl}Fl}?{ce{}{}}000{Fl}{FlAh}0{BhAh}{Fl{{Hf{Fl}}}}{Fl{{Hh{Fl}}}}{Bhb}`{FlFl}{{H`H`}{{Ad{Gj}}}}{{AlAl}{{Ad{Gj}}}}{{FlFl}{{Ad{Gj}}}}{{BhBh}{{Ad{Gj}}}}5`={{FlFlAh}l}=>=<<<<>{c{{n{e}}}{}{}}0000000{cA`{}}000?{{}Bh}````````````````````````````````````````??????{GbGb}{GdGd}{GfGf}{{ce}l{}{}}00{{GbGb}Gj}{{GdGd}Gj}{{GfGf}Gj}{{GbGb}Ah}{{GdGd}Ah}{{GfGf}Ah}{{GbBb}{{n{lGl}}}}{{GdBb}{{n{lGl}}}}{{GfBb}{{n{lGl}}}}{cc{}}00{ce{}{}}00{{GbGb}{{Ad{Gj}}}}{{GdGd}{{Ad{Gj}}}}{{GfGf}{{Ad{Gj}}}}333{c{{n{e}}}{}{}}00000{cA`{}}00{cl{HjHl}}","c":[],"p":[[1,"usize"],[5,"PageFrames",600],[5,"PageAlloc",13],[5,"Layout",601],[1,"u8"],[1,"unit"],[6,"Result",602],[5,"TypeId",603],[5,"Args",27],[6,"Option",604],[5,"OpenOptions",43],[1,"bool"],[5,"File",43],[5,"FileDesc",401],[8,"Result",352],[5,"DirEntry",43],[5,"Formatter",605],[8,"Result",605],[5,"FmtWrite",109],[5,"Metadata",401],[5,"Dir",43],[1,"str"],[10,"AsRef",606],[1,"slice"],[5,"BufReader",109],[10,"Read",109],[5,"StdinLock",109],[5,"StdoutLock",109],[5,"StderrLock",109],[10,"Write",109],[5,"Stdio",109],[5,"BufWriter",109],[10,"WriteExt",109],[5,"Stdin",109],[5,"Stdout",109],[5,"Stderr",109],[5,"String",607],[5,"Arguments",605],[10,"Sized",608],[5,"LocalListener",231],[5,"LocalStream",231],[5,"ExitCode",266],[1,"never"],[1,"i32"],[10,"Termination",266],[5,"Futex",284],[5,"Condvar",284],[8,"MutexGuard",284],[5,"Error",352],[1,"i64"],[5,"AtomicUsize",609],[5,"NonNull",610],[1,"u64"],[5,"FileOpenFlags",401],[20,"MaybeUninit",611],[1,"isize"],[5,"SocketDomain",549],[5,"SocketType",549],[5,"Protocol",549],[1,"u128"],[6,"Ordering",612],[5,"Error",605],[10,"Hasher",613],[5,"Seek",401],[17,"Item"],[10,"IntoIterator",614],[5,"Iter",615],[5,"IterNames",615],[10,"FnOnce",616],[10,"Send",608]],"b":[[16,"impl-AllocBackend-for-PageAlloc"],[17,"impl-GlobalAlloc-for-PageAlloc"],[390,"impl-Debug-for-Error"],[391,"impl-Display-for-Error"],[420,"impl-Flags-for-FileOpenFlags"],[421,"impl-FileOpenFlags"],[455,"impl-LowerHex-for-FileOpenFlags"],[456,"impl-Debug-for-FileOpenFlags"],[457,"impl-Octal-for-FileOpenFlags"],[458,"impl-UpperHex-for-FileOpenFlags"],[459,"impl-Binary-for-FileOpenFlags"],[466,"impl-FileOpenFlags"],[467,"impl-Flags-for-FileOpenFlags"]]}],\
["sample_elf",{"doc":"","t":"HHHHHHH","n":["_repeat_stdin_to_stdout","_test_duplicate_stdin","_test_userspace_mutex","handle_client","main","run_client","run_server"],"q":[[0,"sample_elf"],[7,"libstd::fs"],[8,"libstd::net"],[9,"hyperion_syscall::err"]],"d":["","","","","","",""],"i":[0,0,0,0,0,0,0],"f":"{{}b}{{}d}1{{fh}{{j{b}}}}{{}{{j{b}}}}00","c":[],"p":[[1,"unit"],[5,"File",7],[1,"usize"],[5,"LocalStream",8],[8,"Result",9]],"b":[]}],\
["std_test",{"doc":"","t":"H","n":["main"],"q":[[0,"std_test"]],"d":[""],"i":[0],"f":"{{}b}","c":[],"p":[[1,"unit"]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
