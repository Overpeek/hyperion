var searchIndex = JSON.parse('{\
"cargo_run":{"doc":"","t":"FNNNNNNOOHNNNNNOHHOONNNONN","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","cpus","debug","find_makefile","from","from_arg_matches","from_arg_matches_mut","group_id","into","kvm","main","mem","mem","release","try_from","try_into","type_id","uefi","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"cargo_run"],[26,"clap_builder::builder::command"],[27,"clap_builder::parser::matches::arg_matches"],[28,"clap_builder"],[29,"core::result"],[30,"clap_builder::util::id"],[31,"core::option"],[32,"alloc::string"],[33,"core::any"]],"d":["","","","","","","","number of SMP CPUs","QEMU debug level","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","enable KVM in QEMU","","","amount of physical memory","build the kernel with optimizations","","","","enable UEFI in QEMU","",""],"i":[0,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,0,0,4,4,4,4,4,4,4,4],"f":[0,[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],0,0,[[],2],[-1,-1,[]],[3,[[6,[4,5]]]],[3,[[6,[4,5]]]],[[],[[8,[7]]]],[-1,-2,[],[]],0,[[],2],[9,[[6,[10,10]]]],0,0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,11,[]],0,[[4,3],[[6,[2,5]]]],[[4,3],[[6,[2,5]]]]],"c":[],"p":[[5,"Command",26],[1,"tuple"],[5,"ArgMatches",27],[5,"Args",0],[8,"Error",28],[6,"Result",29],[5,"Id",30],[6,"Option",31],[1,"str"],[5,"String",32],[5,"TypeId",33]],"b":[]},\
"coreutils":{"doc":"","t":"CHCHCCFNNHNNNNNNNHHH","n":["cat","cmd","ls","main","sleep","touch","Bytes","borrow","borrow_mut","cmd","fmt","from","into","to_string","try_from","try_into","type_id","cmd","cmd","cmd"],"q":[[0,"coreutils"],[6,"coreutils::cat"],[17,"coreutils::ls"],[18,"coreutils::sleep"],[19,"coreutils::touch"],[20,"anyhow"],[21,"core::iter::traits::iterator"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::result"],[25,"core::any"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,6,6,0,6,6,6,6,6,6,6,0,0,0],"f":[0,[[],[[2,[1]]]],0,[[],1],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[1]]],[[5,[],[[3,[4]]]]]],[[6,7],8],[-1,-1,[]],[-1,-2,[],[]],[-1,9,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,[[2,[1]]],[[5,[],[[3,[4]]]]]],[-1,[[2,[1]]],[[5,[],[[3,[4]]]]]],[-1,[[2,[1]]],[[5,[],[[3,[4]]]]]]],"c":[],"p":[[1,"tuple"],[8,"Result",20],[17,"Item"],[1,"str"],[10,"Iterator",21],[5,"Bytes",6],[5,"Formatter",22],[8,"Result",22],[5,"String",23],[6,"Result",24],[5,"TypeId",25]],"b":[]},\
"fbtest":{"doc":"","t":"FNNOHNNHNONHONNNO","n":["Framebuffer","borrow","borrow_mut","buf","drawing","fill","fmt","framebuffer_info","from","height","into","main","pitch","try_from","try_into","type_id","width"],"q":[[0,"fbtest"],[17,"hyperion_color"],[18,"core::fmt"],[19,"core::fmt"],[20,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[1,[3,[2]]],4],[[1,5,5,5,5,6],4],[[1,7],8],[[],1],[-1,-1,[]],0,[-1,-2,[],[]],[[],4],0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0],"c":[],"p":[[5,"Framebuffer",0],[1,"u8"],[1,"slice"],[1,"tuple"],[1,"usize"],[5,"Color",17],[5,"Formatter",18],[8,"Result",18],[6,"Result",19],[5,"TypeId",20]],"b":[]},\
"hyperion_arch":{"doc":"","t":"CCHHHCCCHHCHCCCHFNNONNNNNNNNNOHONNNFNNNNNNNNNCOCOHNNCNNNCONFFNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNOOFNNNNNNNNNNNNNNJJHHHHHHHHHHHHCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHFFNNNNNNNNNNNNNNNNNONNNNONNNNNNNHHHHHHHPFPFPFPFPPPPPPGGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNFFSTFFKFTSSFSSSONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNOMNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNONFOOOOONNNNNNNNNHNNHONNNNOOHFNNONNNNHNNNONNNOSSSJSPPPFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["context","cpu","dbg_cpu","done","init","int","paging","pmm","rng_seed","spin_loop","stack","stack_pages","syscall","tls","vmm","wake_cpus","Context","borrow","borrow_mut","cr3","deref","deref_mut","drop","fmt","from","init","into","invalid","new","rsp","switch","syscall_stack","try_from","try_into","type_id","CpuState","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","gdt","gdt","idt","idt","init","init","into","ints","to_owned","try_from","try_into","tss","tss","type_id","Gdt","SegmentSelectors","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","kernel_code","kernel_data","load","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","user_code","user_data","Idt","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","load","new","try_from","try_into","type_id","GP_FAULT_HANDLER","PAGE_FAULT_HANDLER","alignment_check","bound_range_exceeded","breakpoint","debug","device_not_available","divide_error","double_fault","general_protection_fault","invalid_opcode","invalid_tss","machine_check","non_maskable_interrupt","other","overflow","page_fault","security_exception","segment_not_present","simd_floating_point","stack_segment_fault","virtualization","vmm_communication_exception","x87_floating_point","int_handler_100","int_handler_101","int_handler_102","int_handler_103","int_handler_104","int_handler_105","int_handler_106","int_handler_107","int_handler_108","int_handler_109","int_handler_110","int_handler_111","int_handler_112","int_handler_113","int_handler_114","int_handler_115","int_handler_116","int_handler_117","int_handler_118","int_handler_119","int_handler_120","int_handler_121","int_handler_122","int_handler_123","int_handler_124","int_handler_125","int_handler_126","int_handler_127","int_handler_128","int_handler_129","int_handler_130","int_handler_131","int_handler_132","int_handler_133","int_handler_134","int_handler_135","int_handler_136","int_handler_137","int_handler_138","int_handler_139","int_handler_140","int_handler_141","int_handler_142","int_handler_143","int_handler_144","int_handler_145","int_handler_146","int_handler_147","int_handler_148","int_handler_149","int_handler_150","int_handler_151","int_handler_152","int_handler_153","int_handler_154","int_handler_155","int_handler_156","int_handler_157","int_handler_158","int_handler_159","int_handler_160","int_handler_161","int_handler_162","int_handler_163","int_handler_164","int_handler_165","int_handler_166","int_handler_167","int_handler_168","int_handler_169","int_handler_170","int_handler_171","int_handler_172","int_handler_173","int_handler_174","int_handler_175","int_handler_176","int_handler_177","int_handler_178","int_handler_179","int_handler_180","int_handler_181","int_handler_182","int_handler_183","int_handler_184","int_handler_185","int_handler_186","int_handler_187","int_handler_188","int_handler_189","int_handler_190","int_handler_191","int_handler_192","int_handler_193","int_handler_194","int_handler_195","int_handler_196","int_handler_197","int_handler_198","int_handler_199","int_handler_200","int_handler_201","int_handler_202","int_handler_203","int_handler_204","int_handler_205","int_handler_206","int_handler_207","int_handler_208","int_handler_209","int_handler_210","int_handler_211","int_handler_212","int_handler_213","int_handler_214","int_handler_215","int_handler_216","int_handler_217","int_handler_218","int_handler_219","int_handler_220","int_handler_221","int_handler_222","int_handler_223","int_handler_224","int_handler_225","int_handler_226","int_handler_227","int_handler_228","int_handler_229","int_handler_230","int_handler_231","int_handler_232","int_handler_233","int_handler_234","int_handler_235","int_handler_236","int_handler_237","int_handler_238","int_handler_239","int_handler_240","int_handler_241","int_handler_242","int_handler_243","int_handler_244","int_handler_245","int_handler_246","int_handler_247","int_handler_248","int_handler_249","int_handler_250","int_handler_251","int_handler_252","int_handler_253","int_handler_254","int_handler_255","int_handler_32","int_handler_33","int_handler_34","int_handler_35","int_handler_36","int_handler_37","int_handler_38","int_handler_39","int_handler_40","int_handler_41","int_handler_42","int_handler_43","int_handler_44","int_handler_45","int_handler_46","int_handler_47","int_handler_48","int_handler_49","int_handler_50","int_handler_51","int_handler_52","int_handler_53","int_handler_54","int_handler_55","int_handler_56","int_handler_57","int_handler_58","int_handler_59","int_handler_60","int_handler_61","int_handler_62","int_handler_63","int_handler_64","int_handler_65","int_handler_66","int_handler_67","int_handler_68","int_handler_69","int_handler_70","int_handler_71","int_handler_72","int_handler_73","int_handler_74","int_handler_75","int_handler_76","int_handler_77","int_handler_78","int_handler_79","int_handler_80","int_handler_81","int_handler_82","int_handler_83","int_handler_84","int_handler_85","int_handler_86","int_handler_87","int_handler_88","int_handler_89","int_handler_90","int_handler_91","int_handler_92","int_handler_93","int_handler_94","int_handler_95","int_handler_96","int_handler_97","int_handler_98","int_handler_99","Tss","TssStacks","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","inner","into","into","new","set_privilege_stack","stacks","take_interrupt_stack","try_from","try_from","try_into","try_into","type_id","type_id","are_enabled","debug","disable","enable","enable_and_nop64","wait","without","FrameNotPresent","Level1","Level1","Level2","Level2","Level3","Level3","Level4","Size1GiB","Size1GiB","Size2MiB","Size2MiB","Size4KiB","Size4KiB","WalkTableIterResult","WalkTableResult","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_pml4","init","init","init","init","init","init","into","into","into","into","into","into","iter","iter","iter","iter","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Pfa","allocate_frame","borrow","borrow_mut","deallocate_frame","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","AddressSpace","KernelStack","MAX_STACK_COUNT","PAGE_FLAGS","Stack","StackLimitHit","StackType","Stacks","TY","USER_HEAP_TOP","USER_STACK_TOP","UserStack","VIRT_STACK_PAGES","VIRT_STACK_SIZE","VIRT_STACK_SIZE_ALL","base_alloc","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cleanup","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","empty","eq","eq","eq","extent_4k_pages","extra_alloc","fmt","fmt","fmt","fmt","free","from","from","from","from","from","from","grow","guard_page","init","init","init","init","init","init","init","into","into","into","into","into","into","kernel_stacks","limit_4k_pages","new","new","new","page_fault","page_map","region","region","region","take","take_kernel_stack_lazy","take_kernel_stack_prealloc","take_lazy","take_prealloc","take_user_stack_lazy","take_user_stack_prealloc","to_owned","to_owned","to_owned","to_owned","top","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","user_stacks","with_limit","SyscallRegs","arg0","arg1","arg2","arg3","arg4","borrow","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","from","init","init","into","set_handler","syscall_id","to_string","try_from","try_into","type_id","user_instr_ptr","user_stack_ptr","userland","ThreadLocalStorage","borrow","borrow_mut","cpu","deref","deref_mut","drop","from","init","init","init","into","kernel_stack","try_from","try_into","type_id","user_stack","CURRENT_ADDRESS_SPACE","HIGHER_HALF_DIRECT_MAPPING","KERNEL_EXECUTABLE","KERNEL_EXECUTABLE_MAPS","KERNEL_STACKS","MapToError","NotAligned","Overflow","PageMap","TryMapSizedError","WrongSize","activate","borrow","borrow","borrow_mut","borrow_mut","cr3","current","debug","deref","deref","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","init","init","into","into","is_active","is_mapped","map","mark_owned","new","page_fault","phys_to_virt","try_from","try_from","try_into","try_into","type_id","type_id","unmap","virt_to_phys"],"q":[[0,"hyperion_arch"],[16,"hyperion_arch::context"],[35,"hyperion_arch::cpu"],[59,"hyperion_arch::cpu::gdt"],[94,"hyperion_arch::cpu::idt"],[109,"hyperion_arch::cpu::ints"],[133,"hyperion_arch::cpu::ints::other"],[357,"hyperion_arch::cpu::tss"],[389,"hyperion_arch::int"],[396,"hyperion_arch::paging"],[487,"hyperion_arch::pmm"],[501,"hyperion_arch::stack"],[633,"hyperion_arch::syscall"],[660,"hyperion_arch::tls"],[677,"hyperion_arch::vmm"],[725,"x86_64::addr"],[726,"core::ops::range"],[727,"core::fmt"],[728,"core::fmt"],[729,"core::any"],[730,"x86_64::structures::idt"],[731,"x86_64::structures::idt"],[732,"core::ops::function"],[733,"x86_64::structures::paging::page_table"],[734,"x86_64::structures::paging::page_table"],[735,"x86_64::structures::paging::frame"],[736,"core::fmt"],[737,"core::cmp"],[738,"hyperion_mem::vmm"],[739,"hyperion_mem::vmm"],[740,"core::mem::maybe_uninit"],[741,"x86_64::structures::paging::page"],[742,"x86_64::addr"]],"d":["","","","","","","","","","","","","","","<code>PageMap</code> is the Page Table Manager","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Safety","","","Safety","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Safety","","","","","","","","","","","","","","","","","PT (Page Table)","","PD (Page Directory)","","PDP (Page Directory Pointer)","","PML4 (Level 4 Page Map)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","also the max thread count per process","","stacks have a guard page to trigger the page fault","","","","","","the first frame of the stack","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","size of the stack in 4k pages, used in PageFault stack …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","won’t allocate the stack, this only makes sure the guard …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","limit how much the stack is allowed to grow, in 4k pages …","","","","","","","","","Safety","","","","","","","","","","","the location of where the top of the stack is mapped in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","init <code>syscall</code> and <code>sysret</code>","","Calls <code>U::from(self)</code>.","","","","","","","","","Safety","","","","GDT + IDT + TSS","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","kernel stack for syscalls","","","","temporary store for user space stack","","","","level 3 entries 510 and 511 in level 4 entry 511","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Safety","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,0,13,13,13,13,13,13,13,13,13,0,13,0,13,0,13,13,0,13,13,13,0,13,13,0,0,15,14,15,14,14,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,14,14,15,15,14,15,14,15,14,15,14,14,14,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,20,16,20,16,16,20,16,20,16,20,16,20,16,20,16,20,16,16,20,16,16,16,20,16,20,16,20,16,20,0,0,0,0,0,0,0,57,0,33,0,33,0,33,0,57,33,57,33,57,33,0,0,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,26,27,28,29,57,33,26,27,28,29,26,57,33,26,27,28,29,57,33,26,27,28,29,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,0,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,38,0,0,0,0,38,0,0,0,0,0,0,37,44,46,40,41,37,43,44,46,40,41,37,43,37,40,41,37,43,40,41,37,43,44,37,44,46,40,41,37,43,44,46,40,41,37,43,44,46,40,41,37,37,43,37,40,41,37,37,37,40,41,37,43,44,44,46,40,41,37,43,37,37,44,46,40,41,37,37,43,44,46,40,41,37,43,46,37,44,46,37,37,46,38,40,41,44,46,46,44,44,46,46,40,41,37,43,37,44,46,40,41,37,43,44,46,40,41,37,43,44,46,40,41,37,43,46,37,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,49,49,0,49,49,49,49,49,49,49,0,0,51,51,51,51,51,51,51,0,51,51,51,51,51,51,51,51,0,0,0,0,0,53,53,53,0,0,53,11,11,53,11,53,11,11,11,11,53,11,53,11,11,53,53,11,53,11,53,11,53,11,11,11,11,11,11,11,11,53,11,53,11,53,11,11],"f":[0,0,[[],1],[[],2],[[],1],0,0,0,[[],3],[[],1],0,[[],[[5,[4]]]],0,0,0,[[],1],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[6,-1,[]],[6,-1,[]],[6,1],[[7,8],[[10,[1,9]]]],[-1,-1,[]],[[],6],[-1,-2,[],[]],[11,7],[[11,4],7],0,[[7,7],1],0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[13,13],[[-1,-2],1,[],[]],[6,-1,[]],[6,-1,[]],[6,1],[[13,8],[[10,[1,9]]]],[-1,-1,[]],0,0,0,0,[[],1],[[],6],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],0,0,[-1,12,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],1,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[[15,8],[[10,[1,9]]]],[[14,8],[[10,[1,9]]]],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[15,1],[16,15],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[6,-1,[]],[6,-1,[]],[6,1],[[17,8],[[10,[1,9]]]],[-1,-1,[]],[[],6],[-1,-2,[],[]],[17,1],[16,17],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],0,0,[[18,3],1],[18,1],[18,1],[18,1],[18,1],[18,1],[[18,3],2],[[18,3],1],[18,1],[[18,3],1],[18,2],[18,1],0,[18,1],[[18,19],1],[[18,3],1],[[18,3],1],[18,1],[[18,3],1],[18,1],[[18,3],1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],16],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[[16,8],[[10,[1,9]]]],[[20,8],[[10,[1,9]]]],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],16],[[16,4],1],0,[20,[[22,[21]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[[],23],[[],1],[[],1],[[],1],[[],1],[[],1],[-2,-1,[],[[25,[],[[24,[-1]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[[26,8],[[10,[1,9]]]],[[27,8],[[10,[1,9]]]],[[28,8],[[10,[1,9]]]],[[29,8],[[10,[1,9]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[30,26],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[27,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[28,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[29,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[35,[[22,[36]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,36],1],[6,-1,[]],[6,-1,[]],[6,1],[-1,-1,[]],[[],6],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1]],11],1,[38,39]],[40,40],[41,41],[[[37,[-1]]],[[37,[-1]]],42],[43,43],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[],[[44,[-1]]],[38,39]],[[],[[37,[-1]]],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[6,1],[6,1],[6,1],[[[37,[-1]]],1,[]],[6,1],[[],[[37,[-1]]],[]],[[40,40],23],[[41,41],23],[[[37,[-1]],[37,[-1]]],23,45],0,0,[[40,8],[[10,[1,9]]]],[[41,8],[[10,[1,9]]]],[[[37,[-1]],8],[[10,[1,9]]],39],[[43,8],[[10,[1,9]]]],[[[44,[-1]],[37,[-1]]],1,[38,39]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[37,[-1]],11,3],[[10,[1,43]]],[38,39]],[[[37,[-1]]],4,[38,39]],[[],6],[[],6],[[],6],[[],6],[[],6],[[[37,[-1]],11],1,[38,39]],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],[[44,[-1]]],[38,39]],[11,46],[4,[[37,[-1]]],[38,39]],[[[37,[-1]],11,3],[[10,[47,48]]],[38,39]],0,[[],[[5,[3]]]],[[],[[5,[3]]]],[[],[[5,[3]]]],[[[44,[-1]]],[[37,[-1]]],[38,39]],[46,[[37,[40]]]],[[46,3],[[37,[40]]]],[[[44,[-1]],11],[[37,[-1]]],[38,39]],[[[44,[-1]],11,3],[[37,[-1]]],[38,39]],[46,[[37,[41]]]],[[46,3],[[37,[41]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[[4,3],[[37,[-1]]],[38,39]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],49],[6,-1,[]],[6,-1,[]],[6,1],[[49,8],[[10,[1,9]]]],[[49,8],[[10,[1,9]]]],[-1,-1,[]],[14,1],[[],6],[-1,-2,[],[]],[[],1],0,[-1,50,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],0,0,[[4,4,3,3],2],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[6,-1,[]],[6,-1,[]],[6,1],[-1,-1,[]],[51,1],[[[52,[51]],13],51],[[],6],[-1,-2,[],[]],0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,[11,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,36],[[],11],[11,1],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[11,1],[6,1],[[[53,[-1]],8],[[10,[1,9]]],[39,54]],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[11,23],[[11,[5,[4]],32],23],[[11,[5,[4]],55,32],1],[11,1],[[],11],[[11,4,56],[[10,[47,48]]]],[[11,55],4],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[[11,[5,[4]]],1],[[11,4],[[22,[55]]]]],"c":[],"p":[[1,"tuple"],[1,"never"],[1,"u64"],[5,"VirtAddr",725],[5,"Range",726],[1,"usize"],[5,"Context",16],[5,"Formatter",727],[5,"Error",727],[6,"Result",728],[5,"PageMap",677],[5,"TypeId",729],[5,"CpuState",35],[5,"SegmentSelectors",59],[5,"Gdt",59],[5,"Tss",357],[5,"Idt",94],[5,"InterruptStackFrame",730],[5,"PageFaultErrorCode",730],[5,"TssStacks",357],[1,"u16"],[6,"Option",731],[1,"bool"],[17,"Output"],[10,"FnOnce",732],[5,"Level4",396],[5,"Level3",396],[5,"Level2",396],[5,"Level1",396],[5,"PageTable",733],[17,"Item"],[5,"PageTableFlags",733],[6,"WalkTableIterResult",396],[10,"Iterator",734],[5,"Pfa",487],[5,"PhysFrame",735],[5,"Stack",501],[10,"StackType",501],[10,"Debug",727],[5,"KernelStack",501],[5,"UserStack",501],[10,"Clone",736],[5,"StackLimitHit",501],[5,"Stacks",501],[10,"PartialEq",737],[5,"AddressSpace",501],[5,"NotHandled",738],[5,"Handled",738],[5,"SyscallRegs",633],[5,"String",739],[5,"ThreadLocalStorage",660],[20,"MaybeUninit",740],[6,"TryMapSizedError",677],[10,"PageSize",741],[5,"PhysAddr",725],[6,"Privilege",738],[6,"WalkTableResult",396]],"b":[[645,"impl-Debug-for-SyscallRegs"],[646,"impl-Display-for-SyscallRegs"]]},\
"hyperion_arch_x86_64":{"doc":"","t":"CCHHHCCCHHCHCCCHFNNONNNNNNNNNOHONNNFNNNNNNNNNCOCOHNNCNNNCONFFNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNOOFNNNNNNNNNNNNNNJJHHHHHHHHHHHHCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHFFNNNNNNNNNNNNNNNNNONNNNONNNNNNNHHHHHHHPFPFPFPFPPPPPPGGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNFFSTFFKFTSSFSSSONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNOMNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNONFOOOOONNNNNNNNNHNNHONNNNOOHFNNONNNNHNNNONNNOSSSJSPPPFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["context","cpu","dbg_cpu","done","init","int","paging","pmm","rng_seed","spin_loop","stack","stack_pages","syscall","tls","vmm","wake_cpus","Context","borrow","borrow_mut","cr3","deref","deref_mut","drop","fmt","from","init","into","invalid","new","rsp","switch","syscall_stack","try_from","try_into","type_id","CpuState","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","gdt","gdt","idt","idt","init","init","into","ints","to_owned","try_from","try_into","tss","tss","type_id","Gdt","SegmentSelectors","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","kernel_code","kernel_data","load","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","user_code","user_data","Idt","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","load","new","try_from","try_into","type_id","GP_FAULT_HANDLER","PAGE_FAULT_HANDLER","alignment_check","bound_range_exceeded","breakpoint","debug","device_not_available","divide_error","double_fault","general_protection_fault","invalid_opcode","invalid_tss","machine_check","non_maskable_interrupt","other","overflow","page_fault","security_exception","segment_not_present","simd_floating_point","stack_segment_fault","virtualization","vmm_communication_exception","x87_floating_point","int_handler_100","int_handler_101","int_handler_102","int_handler_103","int_handler_104","int_handler_105","int_handler_106","int_handler_107","int_handler_108","int_handler_109","int_handler_110","int_handler_111","int_handler_112","int_handler_113","int_handler_114","int_handler_115","int_handler_116","int_handler_117","int_handler_118","int_handler_119","int_handler_120","int_handler_121","int_handler_122","int_handler_123","int_handler_124","int_handler_125","int_handler_126","int_handler_127","int_handler_128","int_handler_129","int_handler_130","int_handler_131","int_handler_132","int_handler_133","int_handler_134","int_handler_135","int_handler_136","int_handler_137","int_handler_138","int_handler_139","int_handler_140","int_handler_141","int_handler_142","int_handler_143","int_handler_144","int_handler_145","int_handler_146","int_handler_147","int_handler_148","int_handler_149","int_handler_150","int_handler_151","int_handler_152","int_handler_153","int_handler_154","int_handler_155","int_handler_156","int_handler_157","int_handler_158","int_handler_159","int_handler_160","int_handler_161","int_handler_162","int_handler_163","int_handler_164","int_handler_165","int_handler_166","int_handler_167","int_handler_168","int_handler_169","int_handler_170","int_handler_171","int_handler_172","int_handler_173","int_handler_174","int_handler_175","int_handler_176","int_handler_177","int_handler_178","int_handler_179","int_handler_180","int_handler_181","int_handler_182","int_handler_183","int_handler_184","int_handler_185","int_handler_186","int_handler_187","int_handler_188","int_handler_189","int_handler_190","int_handler_191","int_handler_192","int_handler_193","int_handler_194","int_handler_195","int_handler_196","int_handler_197","int_handler_198","int_handler_199","int_handler_200","int_handler_201","int_handler_202","int_handler_203","int_handler_204","int_handler_205","int_handler_206","int_handler_207","int_handler_208","int_handler_209","int_handler_210","int_handler_211","int_handler_212","int_handler_213","int_handler_214","int_handler_215","int_handler_216","int_handler_217","int_handler_218","int_handler_219","int_handler_220","int_handler_221","int_handler_222","int_handler_223","int_handler_224","int_handler_225","int_handler_226","int_handler_227","int_handler_228","int_handler_229","int_handler_230","int_handler_231","int_handler_232","int_handler_233","int_handler_234","int_handler_235","int_handler_236","int_handler_237","int_handler_238","int_handler_239","int_handler_240","int_handler_241","int_handler_242","int_handler_243","int_handler_244","int_handler_245","int_handler_246","int_handler_247","int_handler_248","int_handler_249","int_handler_250","int_handler_251","int_handler_252","int_handler_253","int_handler_254","int_handler_255","int_handler_32","int_handler_33","int_handler_34","int_handler_35","int_handler_36","int_handler_37","int_handler_38","int_handler_39","int_handler_40","int_handler_41","int_handler_42","int_handler_43","int_handler_44","int_handler_45","int_handler_46","int_handler_47","int_handler_48","int_handler_49","int_handler_50","int_handler_51","int_handler_52","int_handler_53","int_handler_54","int_handler_55","int_handler_56","int_handler_57","int_handler_58","int_handler_59","int_handler_60","int_handler_61","int_handler_62","int_handler_63","int_handler_64","int_handler_65","int_handler_66","int_handler_67","int_handler_68","int_handler_69","int_handler_70","int_handler_71","int_handler_72","int_handler_73","int_handler_74","int_handler_75","int_handler_76","int_handler_77","int_handler_78","int_handler_79","int_handler_80","int_handler_81","int_handler_82","int_handler_83","int_handler_84","int_handler_85","int_handler_86","int_handler_87","int_handler_88","int_handler_89","int_handler_90","int_handler_91","int_handler_92","int_handler_93","int_handler_94","int_handler_95","int_handler_96","int_handler_97","int_handler_98","int_handler_99","Tss","TssStacks","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","inner","into","into","new","set_privilege_stack","stacks","take_interrupt_stack","try_from","try_from","try_into","try_into","type_id","type_id","are_enabled","debug","disable","enable","enable_and_nop64","wait","without","FrameNotPresent","Level1","Level1","Level2","Level2","Level3","Level3","Level4","Size1GiB","Size1GiB","Size2MiB","Size2MiB","Size4KiB","Size4KiB","WalkTableIterResult","WalkTableResult","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_pml4","init","init","init","init","init","init","into","into","into","into","into","into","iter","iter","iter","iter","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Pfa","allocate_frame","borrow","borrow_mut","deallocate_frame","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","AddressSpace","KernelStack","MAX_STACK_COUNT","PAGE_FLAGS","Stack","StackLimitHit","StackType","Stacks","TY","USER_HEAP_TOP","USER_STACK_TOP","UserStack","VIRT_STACK_PAGES","VIRT_STACK_SIZE","VIRT_STACK_SIZE_ALL","base_alloc","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cleanup","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","empty","eq","eq","eq","extent_4k_pages","extra_alloc","fmt","fmt","fmt","fmt","free","from","from","from","from","from","from","grow","guard_page","init","init","init","init","init","init","init","into","into","into","into","into","into","kernel_stacks","limit_4k_pages","new","new","new","page_fault","page_map","region","region","region","take","take_kernel_stack_lazy","take_kernel_stack_prealloc","take_lazy","take_prealloc","take_user_stack_lazy","take_user_stack_prealloc","to_owned","to_owned","to_owned","to_owned","top","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","user_stacks","with_limit","SyscallRegs","arg0","arg1","arg2","arg3","arg4","borrow","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","from","init","init","into","set_handler","syscall_id","to_string","try_from","try_into","type_id","user_instr_ptr","user_stack_ptr","userland","ThreadLocalStorage","borrow","borrow_mut","cpu","deref","deref_mut","drop","from","init","init","init","into","kernel_stack","try_from","try_into","type_id","user_stack","CURRENT_ADDRESS_SPACE","HIGHER_HALF_DIRECT_MAPPING","KERNEL_EXECUTABLE","KERNEL_EXECUTABLE_MAPS","KERNEL_STACKS","MapToError","NotAligned","Overflow","PageMap","TryMapSizedError","WrongSize","activate","borrow","borrow","borrow_mut","borrow_mut","cr3","current","debug","deref","deref","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","init","init","into","into","is_active","is_mapped","map","mark_owned","new","page_fault","phys_to_virt","try_from","try_from","try_into","try_into","type_id","type_id","unmap","virt_to_phys"],"q":[[0,"hyperion_arch_x86_64"],[16,"hyperion_arch_x86_64::context"],[35,"hyperion_arch_x86_64::cpu"],[59,"hyperion_arch_x86_64::cpu::gdt"],[94,"hyperion_arch_x86_64::cpu::idt"],[109,"hyperion_arch_x86_64::cpu::ints"],[133,"hyperion_arch_x86_64::cpu::ints::other"],[357,"hyperion_arch_x86_64::cpu::tss"],[389,"hyperion_arch_x86_64::int"],[396,"hyperion_arch_x86_64::paging"],[487,"hyperion_arch_x86_64::pmm"],[501,"hyperion_arch_x86_64::stack"],[633,"hyperion_arch_x86_64::syscall"],[660,"hyperion_arch_x86_64::tls"],[677,"hyperion_arch_x86_64::vmm"],[725,"x86_64::addr"],[726,"core::ops::range"],[727,"core::fmt"],[728,"core::fmt"],[729,"core::any"],[730,"x86_64::structures::idt"],[731,"x86_64::structures::idt"],[732,"core::ops::function"],[733,"x86_64::structures::paging::page_table"],[734,"x86_64::structures::paging::page_table"],[735,"x86_64::structures::paging::page"],[736,"x86_64::structures::paging::frame"],[737,"core::fmt"],[738,"core::cmp"],[739,"hyperion_mem::vmm"],[740,"alloc::string"],[741,"core::mem::maybe_uninit"],[742,"x86_64::structures::paging::page"]],"d":["","","","","","","","","","","","","","","<code>PageMap</code> is the Page Table Manager","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Safety","","","Safety","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Safety","","","","","","","","","","","","","","","","","PT (Page Table)","","PD (Page Directory)","","PDP (Page Directory Pointer)","","PML4 (Level 4 Page Map)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","also the max thread count per process","","stacks have a guard page to trigger the page fault","","","","","","the first frame of the stack","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","size of the stack in 4k pages, used in PageFault stack …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","won’t allocate the stack, this only makes sure the guard …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","limit how much the stack is allowed to grow, in 4k pages …","","","","","","","","","Safety","","","","","","","","","","","the location of where the top of the stack is mapped in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","init <code>syscall</code> and <code>sysret</code>","","Calls <code>U::from(self)</code>.","","","","","","","","","Safety","","","","GDT + IDT + TSS","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","kernel stack for syscalls","","","","temporary store for user space stack","","","","level 3 entries 510 and 511 in level 4 entry 511","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Safety","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,0,13,13,13,13,13,13,13,13,13,0,13,0,13,0,13,13,0,13,13,13,0,13,13,0,0,15,14,15,14,14,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,14,14,15,15,14,15,14,15,14,15,14,14,14,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,20,16,20,16,16,20,16,20,16,20,16,20,16,20,16,20,16,16,20,16,16,16,20,16,20,16,20,16,20,0,0,0,0,0,0,0,57,0,33,0,33,0,33,0,57,33,57,33,57,33,0,0,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,26,27,28,29,57,33,26,27,28,29,26,57,33,26,27,28,29,57,33,26,27,28,29,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,0,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,39,0,0,0,0,39,0,0,0,0,0,0,38,45,47,41,42,38,44,45,47,41,42,38,44,38,41,42,38,44,41,42,38,44,45,38,45,47,41,42,38,44,45,47,41,42,38,44,45,47,41,42,38,38,44,38,41,42,38,38,38,41,42,38,44,45,45,47,41,42,38,44,38,38,45,47,41,42,38,38,44,45,47,41,42,38,44,47,38,45,47,38,38,47,39,41,42,45,47,47,45,45,47,47,41,42,38,44,38,45,47,41,42,38,44,45,47,41,42,38,44,45,47,41,42,38,44,47,38,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,49,49,0,49,49,49,49,49,49,49,0,0,51,51,51,51,51,51,51,0,51,51,51,51,51,51,51,51,0,0,0,0,0,53,53,53,0,0,53,10,10,53,10,53,10,10,10,10,53,10,53,10,10,53,53,10,53,10,53,10,53,10,10,10,10,10,10,10,10,53,10,53,10,53,10,10],"f":[0,0,[[],1],[[],2],[[],1],0,0,0,[[],3],[[],1],0,[[],[[5,[4]]]],0,0,0,[[],1],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[6,-1,[]],[6,-1,[]],[6,1],[[7,8],9],[-1,-1,[]],[[],6],[-1,-2,[],[]],[10,7],[[10,4],7],0,[[7,7],1],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[13,13],[[-1,-2],1,[],[]],[6,-1,[]],[6,-1,[]],[6,1],[[13,8],9],[-1,-1,[]],0,0,0,0,[[],1],[[],6],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],0,0,[-1,12,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],1,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[[15,8],9],[[14,8],9],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[15,1],[16,15],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[6,-1,[]],[6,-1,[]],[6,1],[[17,8],9],[-1,-1,[]],[[],6],[-1,-2,[],[]],[17,1],[16,17],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],0,0,[[18,3],1],[18,1],[18,1],[18,1],[18,1],[18,1],[[18,3],2],[[18,3],1],[18,1],[[18,3],1],[18,2],[18,1],0,[18,1],[[18,19],1],[[18,3],1],[[18,3],1],[18,1],[[18,3],1],[18,1],[[18,3],1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],16],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[[16,8],9],[[20,8],9],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],16],[[16,4],1],0,[20,[[22,[21]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[[],23],[[],1],[[],1],[[],1],[[],1],[[],1],[-2,-1,[],[[25,[],[[24,[-1]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[[26,8],9],[[27,8],9],[[28,8],9],[[29,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[30,26],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[27,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[28,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[29,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[35,[[22,[[37,[36]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,[37,[36]]],1],[6,-1,[]],[6,-1,[]],[6,1],[-1,-1,[]],[[],6],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[-1]],10],1,[39,40]],[41,41],[42,42],[[[38,[-1]]],[[38,[-1]]],43],[44,44],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[],[[45,[-1]]],[39,40]],[[],[[38,[-1]]],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[6,1],[6,1],[6,1],[[[38,[-1]]],1,[]],[6,1],[[],[[38,[-1]]],[]],[[41,41],23],[[42,42],23],[[[38,[-1]],[38,[-1]]],23,46],0,0,[[41,8],9],[[42,8],9],[[[38,[-1]],8],9,40],[[44,8],9],[[[45,[-1]],[38,[-1]]],1,[39,40]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[38,[-1]],10,3],[[11,[1,44]]],[39,40]],[[[38,[-1]]],4,[39,40]],[[],6],[[],6],[[],6],[[],6],[[],6],[[[38,[-1]],10],1,[39,40]],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],[[45,[-1]]],[39,40]],[10,47],[4,[[38,[-1]]],[39,40]],[[[38,[-1]],10,3],48,[39,40]],0,[[],[[5,[3]]]],[[],[[5,[3]]]],[[],[[5,[3]]]],[[[45,[-1]]],[[38,[-1]]],[39,40]],[47,[[38,[41]]]],[[47,3],[[38,[41]]]],[[[45,[-1]],10],[[38,[-1]]],[39,40]],[[[45,[-1]],10,3],[[38,[-1]]],[39,40]],[47,[[38,[42]]]],[[47,3],[[38,[42]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[[4,3],[[38,[-1]]],[39,40]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],49],[6,-1,[]],[6,-1,[]],[6,1],[[49,8],9],[[49,8],9],[-1,-1,[]],[14,1],[[],6],[-1,-2,[],[]],[[],1],0,[-1,50,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],0,0,[[4,4,3,3],2],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[6,-1,[]],[6,-1,[]],[6,1],[-1,-1,[]],[51,1],[[[52,[51]],13],51],[[],6],[-1,-2,[],[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,[10,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,37],[[],10],[10,1],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[10,1],[6,1],[[[53,[-1]],8],9,[40,54]],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[10,23],[[10,[5,[4]],32],23],[[10,[5,[4]],55,32],1],[10,1],[[],10],[[10,4,56],48],[[10,55],4],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[[10,[5,[4]]],1],[[10,4],[[22,[55]]]]],"c":[],"p":[[1,"tuple"],[1,"never"],[1,"u64"],[5,"VirtAddr",725],[5,"Range",726],[1,"usize"],[5,"Context",16],[5,"Formatter",727],[8,"Result",727],[5,"PageMap",677],[6,"Result",728],[5,"TypeId",729],[5,"CpuState",35],[5,"SegmentSelectors",59],[5,"Gdt",59],[5,"Tss",357],[5,"Idt",94],[5,"InterruptStackFrame",730],[5,"PageFaultErrorCode",730],[5,"TssStacks",357],[1,"u16"],[6,"Option",731],[1,"bool"],[17,"Output"],[10,"FnOnce",732],[5,"Level4",396],[5,"Level3",396],[5,"Level2",396],[5,"Level1",396],[5,"PageTable",733],[17,"Item"],[5,"PageTableFlags",733],[6,"WalkTableIterResult",396],[10,"Iterator",734],[5,"Pfa",487],[6,"Size4KiB",735],[5,"PhysFrame",736],[5,"Stack",501],[10,"StackType",501],[10,"Debug",727],[5,"KernelStack",501],[5,"UserStack",501],[10,"Clone",737],[5,"StackLimitHit",501],[5,"Stacks",501],[10,"PartialEq",738],[5,"AddressSpace",501],[8,"PageFaultResult",739],[5,"SyscallRegs",633],[5,"String",740],[5,"ThreadLocalStorage",660],[20,"MaybeUninit",741],[6,"TryMapSizedError",677],[10,"PageSize",735],[5,"PhysAddr",725],[6,"Privilege",739],[6,"WalkTableResult",396]],"b":[[645,"impl-Display-for-SyscallRegs"],[646,"impl-Debug-for-SyscallRegs"]]},\
"hyperion_backtrace":{"doc":"","t":"GIPPPFPPPHNNNNNNNNNNONNHHHHHOHONNNNNNNHH","n":["BacktraceError","BacktraceResult","ElfNotLoaded","ElfParse","Err","FrameInfo","Inner","NoSymtabOrStrtab","Ok","base_ptr","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","instr_ptr","into","into","kernel_base","print_backtrace","print_backtrace_from","print_symtab","symbol","symbol_name","symbol_noerr","symbol_offs","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwind_stack","unwind_stack_from"],"q":[[0,"hyperion_backtrace"],[40,"x86_64::addr"],[41,"core::fmt"],[42,"core::fmt"],[43,"core::any"],[44,"core::ops::function"]],"d":["","","","","Contains the error value","","","","Contains the success value","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Safety","","returns the <code>symbol_name + offset</code> for the provided …","","","","","","","","","","","","Safety"],"i":[0,0,4,4,13,0,4,4,13,0,4,2,4,2,2,2,4,2,4,2,2,4,2,0,0,0,0,0,2,0,2,2,4,2,4,2,4,2,0,0],"f":[0,0,0,0,0,0,0,0,0,[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],3,[],[]],[[4,5],6],[[2,5],6],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],7],[[],3],[1,3],[[],[[8,[3,4]]]],[7,[[8,[[3,[9,10]],4]]]],0,[7,2],0,[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,3,[[12,[2]]]],[[1,-1],3,[[12,[2]]]]],"c":[],"p":[[5,"VirtAddr",40],[5,"FrameInfo",0],[1,"tuple"],[6,"BacktraceError",0],[5,"Formatter",41],[8,"Result",41],[1,"u64"],[6,"Result",42],[1,"str"],[1,"usize"],[5,"TypeId",43],[10,"FnMut",44],[8,"BacktraceResult",0]],"b":[]},\
"hyperion_bitmap":{"doc":"","t":"FFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["AtomicBitmap","Bitmap","borrow","borrow","borrow_mut","borrow_mut","default","fill","fill","fmt","from","from","from","from","from_mut","get","into","into","is_empty","is_empty","iter","iter_bytes","iter_false","iter_true","len","len","load","new","new","set","store","swap","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"hyperion_bitmap"],[38,"core::sync::atomic"],[39,"core::fmt"],[40,"core::fmt"],[41,"core::iter::traits::iterator"],[42,"core::sync::atomic"],[43,"core::any"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","iterator over indexes of 0 bits","iterator over indexes of 1 bits","","","","","","","","","","","","","",""],"i":[0,0,2,1,2,1,1,2,1,1,2,2,2,1,2,1,2,1,2,1,1,1,1,1,2,1,2,2,1,1,2,2,2,1,2,1,2,1],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[2,3,4],5],[[1,3],5],[[1,6],7],[[[9,[8]]],2],[[[10,[8]]],2],[-1,-1,[]],[-1,-1,[]],[[[9,[8]]],2],[[1,11],[[12,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[2,3],[1,3],[1,[[0,[[14,[],[[13,[3]]]]]]]],[1,[[0,[[14,[],[[13,[8]]]]]]]],[1,[[0,[[14,[],[[13,[11]]]]]]]],[1,[[0,[[14,[],[[13,[11]]]]]]]],[2,11],[1,11],[[2,11,4],[[12,[3]]]],[[[9,[15]]],2],[[[9,[8]]],1],[[1,11,3],[[12,[5]]]],[[2,11,3,4],[[12,[5]]]],[[2,11,3,4],[[12,[3]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]]],"c":[],"p":[[5,"Bitmap",0],[5,"AtomicBitmap",0],[1,"bool"],[6,"Ordering",38],[1,"tuple"],[5,"Formatter",39],[8,"Result",39],[1,"u8"],[1,"slice"],[1,"array"],[1,"usize"],[6,"Option",40],[17,"Item"],[10,"Iterator",41],[5,"AtomicU8",38],[6,"Result",42],[5,"TypeId",43]],"b":[[10,"impl-From%3C%26mut+%5Bu8%5D%3E-for-AtomicBitmap%3C\'a%3E"],[11,"impl-From%3C%26mut+%5Bu8;+N%5D%3E-for-AtomicBitmap%3C\'a%3E"]]},\
"hyperion_boot":{"doc":"","t":"JJCHHHHHHHHHHHHHFNNNNONNNNHNONNONNNNO","n":["BOOT_STACK_SIZE","NAME","args","boot_cpu","cmdline","cpu_count","framebuffer","hhdm_offset","init","kernel_file","lapics","memmap","phys_addr","rsdp","smp_init","virt_addr","Arguments","borrow","borrow_mut","clone","clone_into","cmdline","default","eq","fmt","from","get","get","had_unrecognized","into","parse","serial_log_level","to_owned","try_from","try_into","type_id","video_log_level"],"q":[[0,"hyperion_boot"],[16,"hyperion_boot::args"],[37,"hyperion_boot_interface::smp"],[38,"core::option"],[39,"hyperion_boot_interface::framebuffer"],[40,"core::iter::traits::iterator"],[41,"hyperion_boot_interface::map"],[42,"core::fmt"],[43,"core::fmt"],[44,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],1],[[],[[3,[2]]]],[[],4],[[],[[3,[5]]]],[[],6],[[],7],[[],[[3,[[9,[8]]]]]],[[],[[0,[[12,[],[[10,[11]]]]]]]],[[],[[0,[[12,[],[[10,[13]]]]]]]],[[],4],[[],[[3,[7]]]],[[],7],[[],4],0,[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],7,[],[]],0,[[],14],[[14,14],15],[[14,16],17],[-1,-1,[]],[[],14],[[],14],0,[-1,-2,[],[]],[2,14],0,[-1,-2,[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],0],"c":[],"p":[[5,"Cpu",37],[1,"str"],[6,"Option",38],[1,"usize"],[5,"FramebufferCreateInfo",39],[1,"u64"],[1,"tuple"],[1,"u8"],[1,"slice"],[17,"Item"],[1,"u32"],[10,"Iterator",40],[5,"Memmap",41],[5,"Arguments",16],[1,"bool"],[5,"Formatter",42],[8,"Result",42],[6,"Result",43],[5,"TypeId",44]],"b":[]},\
"hyperion_boot_interface":{"doc":"","t":"PFPFPFGPONNNNNNNNONNNNNNNNNNNNNNONNNNNNNNNNNNNOONOONNNNNNNNONNNNO","n":["BootloaderReclaimable","Cpu","Framebuffer","FramebufferCreateInfo","KernelAndModules","Memmap","Memtype","Usable","base","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","clone","clone","clone","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","height","into","into","into","into","is_boot","is_bootloader_reclaimable","is_bootloader_reclaimable","is_framebuffer","is_framebuffer","is_kernel_and_modules","is_kernel_and_modules","is_usable","is_usable","len","local_apic_id","new","pitch","processor_id","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","width"],"q":[[0,"hyperion_boot_interface"],[65,"core::fmt"],[66,"core::fmt"],[67,"core::any"]],"d":["","","","","","","","","physical address memory region base (bottom)","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the memtype is <code>BootloaderReclaimable</code>.","Returns <code>true</code> if the memtype is <code>BootloaderReclaimable</code>.","Returns <code>true</code> if the memtype is <code>Framebuffer</code>.","Returns <code>true</code> if the memtype is <code>Framebuffer</code>.","Returns <code>true</code> if the memtype is <code>KernelAndModules</code>.","Returns <code>true</code> if the memtype is <code>KernelAndModules</code>.","Returns <code>true</code> if the memtype is <code>Usable</code>.","Returns <code>true</code> if the memtype is <code>Usable</code>.","length of the memory region (top - bottom)","","","","","","","","","","","","","","","","","",""],"i":[2,0,2,0,2,0,0,2,1,10,1,2,3,10,1,2,3,10,1,2,3,1,2,3,1,2,3,3,10,1,2,3,10,10,1,2,3,3,1,2,1,2,1,2,1,2,1,3,3,10,3,10,1,2,3,10,1,2,3,1,10,1,2,3,10],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,1],[2,2],[3,3],[[1,1],4],[[2,2],4],[[3,3],4],[[1,5],6],[[2,5],6],[[3,5],6],[[3,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,4],[1,4],[2,4],[1,4],[2,4],[1,4],[2,4],[1,4],[2,4],0,0,[[7,7],3],0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],0,[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],0],"c":[],"p":[[5,"Memmap",0],[6,"Memtype",0],[5,"Cpu",0],[1,"bool"],[5,"Formatter",65],[8,"Result",65],[1,"u32"],[6,"Result",66],[5,"TypeId",67],[5,"FramebufferCreateInfo",0]],"b":[[26,"impl-Debug-for-Cpu"],[27,"impl-Display-for-Cpu"]]},\
"hyperion_boot_limine":{"doc":"","t":"JJHHHHHHHHHHHHH","n":["BOOT_STACK_SIZE","NAME","boot_cpu","cmdline","cpu_count","framebuffer","hhdm_offset","init","kernel_file","lapics","memmap","phys_addr","rsdp","smp_init","virt_addr"],"q":[[0,"hyperion_boot_limine"],[15,"hyperion_boot_interface::smp"],[16,"core::option"],[17,"hyperion_boot_interface::framebuffer"],[18,"core::iter::traits::iterator"],[19,"hyperion_boot_interface::map"]],"d":["","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[[],1],[[],[[3,[2]]]],[[],4],[[],[[3,[5]]]],[[],6],[[],7],[[],[[3,[[9,[8]]]]]],[[],[[0,[[12,[],[[10,[11]]]]]]]],[[],[[0,[[12,[],[[10,[13]]]]]]]],[[],4],[[],[[3,[7]]]],[[],7],[[],4]],"c":[],"p":[[5,"Cpu",15],[1,"str"],[6,"Option",16],[1,"usize"],[5,"FramebufferCreateInfo",17],[1,"u64"],[1,"tuple"],[1,"u8"],[1,"slice"],[17,"Item"],[1,"u32"],[10,"Iterator",18],[5,"Memmap",19]],"b":[]},\
"hyperion_checked":{"doc":"","t":"KKRRMM","n":["CheckedAdd","CheckedSub","Output","Output","checked_add","checked_sub"],"q":[[0,"hyperion_checked"],[6,"core::option"]],"d":["","","","","",""],"i":[0,0,2,4,2,4],"f":[0,0,0,0,[[[2,[],[[1,[-1]]]],-2],[[3,[-1]]],[],[]],[[[4,[],[[1,[-1]]]],-2],[[3,[-1]]],[],[]]],"c":[],"p":[[17,"Output"],[10,"CheckedAdd",0],[6,"Option",6],[10,"CheckedSub",0]],"b":[]},\
"hyperion_clock":{"doc":"","t":"KFMNNNNNNNHNNMNHMNNNN","n":["ClockSource","NopClock","_apic_sleep_simple_blocking","_apic_sleep_simple_blocking","borrow","borrow_mut","deref","deref_mut","drop","from","get","init","into","nanosecond_now","nanosecond_now","set_source_picker","trigger_interrupt_at","trigger_interrupt_at","try_from","try_into","type_id"],"q":[[0,"hyperion_clock"],[21,"core::ops::function"],[22,"core::result"],[23,"core::any"]],"d":["","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,1,5,5,5,5,5,5,5,0,5,5,1,5,0,1,5,5,5,5],"f":[0,0,[[1,2,3],4],[[5,2,3],4],[-1,-2,[],[]],[-1,-2,[],[]],[6,-1,[]],[6,-1,[]],[6,4],[-1,-1,[]],[[],1],[[],6],[-1,-2,[],[]],[1,7],[5,7],[[],4],[[1,7],4],[[5,7],4],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]]],"c":[],"p":[[10,"ClockSource",0],[1,"u16"],[10,"FnMut",21],[1,"tuple"],[5,"NopClock",0],[1,"usize"],[1,"u128"],[6,"Result",22],[5,"TypeId",23]],"b":[]},\
"hyperion_color":{"doc":"","t":"TTFTTTNNONNNNNNNNNNNONNONNN","n":["BLACK","BLUE","Color","GREEN","RED","WHITE","as_arr","as_u32","b","borrow","borrow_mut","clone","default","eq","fmt","from","from_hex","from_hex_bytes","from_hex_bytes_2","from_u32","g","into","new","r","try_from","try_into","type_id"],"q":[[0,"hyperion_color"],[27,"core::fmt"],[28,"core::fmt"],[29,"core::result"],[30,"core::any"]],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,[1,[[3,[2]]]],[1,4],0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[],1],[[1,1],5],[[1,6],7],[-1,-1,[]],[8,[[9,[1]]]],[[[10,[2]]],[[9,[1]]]],[[[3,[2]]],1],[4,1],0,[-1,-2,[],[]],[[2,2,2],1],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]]],"c":[],"p":[[5,"Color",0],[1,"u8"],[1,"array"],[1,"u32"],[1,"bool"],[5,"Formatter",27],[8,"Result",27],[1,"str"],[6,"Option",28],[1,"slice"],[6,"Result",29],[5,"TypeId",30]],"b":[]},\
"hyperion_cpu_id":{"doc":"","t":"FNNHHHNNHNNNNNN","n":["Tls","borrow","borrow_mut","cpu_count","cpu_id","cpu_id_dyn_type","deref","from","init","inner","into","new","try_from","try_into","type_id"],"q":[[0,"hyperion_cpu_id"],[15,"core::cell"],[16,"core::ops::function"],[17,"core::result"],[18,"core::any"]],"d":["","","","<code>cpu_id()</code> &lt; <code>cpu_count()</code>","technically UB to read before a call to <code>init</code> on this CPU","","","Returns the argument unchanged.","initialize <code>cpu_id</code>","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,3,3,0,0,0,3,3,0,3,3,3,3,3,3],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],[[],2],[[[3,[-1]]],-2,[],[]],[-1,-1,[]],[[],4],[[[3,[-1]]],[[6,[[5,[-1]]]]],[]],[-1,-2,[],[]],[-2,[[3,[-1]]],[],[[8,[],[[7,[-1]]]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[1,"usize"],[1,"u8"],[5,"Tls",0],[1,"tuple"],[5,"UnsafeCell",15],[1,"slice"],[17,"Output"],[10,"FnMut",16],[6,"Result",17],[5,"TypeId",18]],"b":[]},\
"hyperion_defer":{"doc":"","t":"FNNNNNNNNNN","n":["Defer","borrow","borrow_mut","drop","from","into","new","take","try_from","try_into","type_id"],"q":[[0,"hyperion_defer"],[11,"core::ops::function"],[12,"core::result"],[13,"core::any"]],"d":["","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],2,3],[-1,-1,[]],[-1,-2,[],[]],[-1,[[1,[-1]]],3],[[[1,[-1]]],-1,3],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]]],"c":[],"p":[[5,"Defer",0],[1,"tuple"],[10,"FnOnce",11],[6,"Result",12],[5,"TypeId",13]],"b":[]},\
"hyperion_driver_acpi":{"doc":"","t":"GGPPPPPPFFFFGFPPPFCNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCHNNNNNNNNNNNNNNNNNNCNCNNNNNNNHCCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSJFFFSFONNNNNNNNNNNNNNNNNNNNNNNONNNNHHNONNNNNNNHNNNNNNNNNNNNOOOOOOOOONNNONNOOOOOONNNNNNNNNNNNNIPFFFJFFGFFPFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNJFFFONNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNONNNNNNNNNNNNOPJFGPNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNPPPPJFGPNNNNNNNNNNNNNNNONNNNNNNNNNNONNNNNNNNNJFGPNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNN","n":["AcpiOem","AcpiVersion","Bochs","InvalidChecksum","InvalidRevision","InvalidSignature","InvalidStructure","Other","RawSdtHeader","ReadOnly","ReadWrite","Reserved","SdtError","StructUnpacker","Utf8Error","V1","V2","WriteOnly","apic","backtrack","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checksum_of","checksum_of_slice","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","hpet","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","ioapic","left","madt","new","next","next_unchecked","now_at","parse","read","read","read_unaligned_volatile","rsdp","rsdt","skip","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpack","write","write","APIC_CALIBRATION_MICROS","APIC_PERIOD_MULT","APIC_TIMER_HANDLER","ApicId","ApicRegs","ApicTls","IRQ_APIC_SPURIOUS","Lapic","arbitration_priority","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","current","current","current_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","destination_format","drop","drop","drop","drop","enable","enable_timer","eoi","eoi","eq","fmt","fmt","from","from","from","from","get_apic_regs","hash","init","init","init","init","inner","into","into","into","into","is_ioapic_compatible","iter","lapic_id","lapic_ver","logical_destination","lvt_error","lvt_lint_0","lvt_lint_1","lvt_perf_mon_counters","lvt_thermal_sensor","lvt_timer","new","new","partial_cmp","processor_priority","regs","regs_mut","remote_read","spurious_interrupt_vector","task_priority","timer_current","timer_divide","timer_init","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","CounterValue","DoesntExist","GeneralCaps","GeneralConfig","GeneralInterruptStatus","HPET","Hpet","HpetDevice","HpetError","HpetRegs","RawHpetBits","Sdt","TimerN","TimerNConfigAndCaps","TimerNHandle","_apic_sleep_simple_blocking","as_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","caps","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comparator_count","comparator_value","config","config_and_caps","count_size_cap","counter_size","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","enable","femtos","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","fsb_enable","fsb_int_del_cap","handler","init","init","init","init","init","init","init","init","init","init","init","init","init","int_ack","int_enable","int_route","int_route_cap","int_trigger","interrupt_status","into","into","into","into","into","into","into","into","into","into","into","leg_rt","leg_rt_cap","legacy_replacement","len","main_counter_value","micros","millis","minutes","mode","nanos","nanos_to_deadline","nanos_to_ticks_i","nanos_to_ticks_u","nanosecond_now","next_timer","now_bytes","num_tim_cap","period","period","periodic_int_cap","picos","read","reserved","rev_id","seconds","set_comparator_count","set_comparator_value","set_config","set_config_and_caps","set_count_size_cap","set_counter_size","set_enable","set_fsb_enable","set_fsb_int_del_cap","set_int_enable","set_int_route","set_int_route_cap","set_int_trigger","set_interrupt_status","set_leg_rt","set_leg_rt_cap","set_legacy_replacement","set_main_counter_value","set_mode","set_num_tim_cap","set_period","set_periodic_int_cap","set_reserved","set_rev_id","set_size_cap","set_value_set","set_vendor_id","size_cap","sleep_until","ticks_to_nanos_i","ticks_to_nanos_u","timer_n_int_status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","trigger_interrupt_at","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_init","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_set","vendor_id","write","IO_APICS","IoApic","IoApicInfo","IoApicRegs","addr","any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","fmt","fmt","from","from","from","gsi_base","id","init","init","init","init","into","into","into","iter","register_select_register","set_irq","set_irq_any","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","window_register","DoesntExist","MADT","Madt","MadtError","Sdt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","from","from","from","init","init","init","into","into","io_apics","local_apic_addr","to_owned","to_owned","try_from","try_from","try_init","try_into","try_into","type_id","type_id","InvalidChecksum","InvalidRevision","InvalidSignature","NoRsdp","RSDP","Rsdp","RsdpError","Utf8Error","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","extended","fmt","fmt","from","from","from","get","init","init","init","into","into","ptr","to_owned","to_owned","try_from","try_from","try_init","try_into","try_into","type_id","type_id","RSDT","Rsdt","RsdtError","SdtHeader","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","extended","find_table","fmt","fmt","from","from","from","from","get","init","init","init","into","into","iter","iter_headers","to_owned","to_owned","try_from","try_from","try_init","try_into","try_into","type_id","type_id"],"q":[[0,"hyperion_driver_acpi"],[173,"hyperion_driver_acpi::apic"],[268,"hyperion_driver_acpi::hpet"],[520,"hyperion_driver_acpi::ioapic"],[573,"hyperion_driver_acpi::madt"],[615,"hyperion_driver_acpi::rsdp"],[660,"hyperion_driver_acpi::rsdt"],[703,"core::fmt"],[704,"core::fmt"],[705,"hyperion_static_str"],[706,"core::str::error"],[707,"core::option"],[708,"core::result"],[709,"core::marker"],[710,"core::cmp"],[711,"spin::rwlock"],[712,"spin"],[713,"core::hash"],[714,"core::iter::traits::iterator"],[715,"core::ops::function"],[716,"core::any"],[717,"spin::mutex"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitwise checksum:","bitwise checksum:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Safety","High Precision Event Timer","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Multiple APIC Descriptor Table","Safety","","Safety","","","","","Safety","Root System Description Pointer","Root/eXtended System Descriptor Table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Table 10-1 Local APIC Register Address Map","","","","","","","","","","","","","","","","","apic id of this processor","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Safety","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","has 64 bit mode capability?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","enable HPET","theoretical max u96 sized output","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","front side bus interrupt mapping enabled","has front side bus interrupt mapping capability?","","","","","","","","","","","","","","","handles a timer interrupt","enable interrupts","I/O APIC routing <code>int_route_cap</code>","interrupt routing capability","interrupt trigger mode 0 = edge-triggered 1 = …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","legacy replacement mapping","has legacy replacement mapping capability?","","","","theoretical max u67 sized output","theoretical max u57 sized output","theoretical max u41 sized output","active mode 0 = one-shot (non-periodic) 1 = periodic","theoretical max u77 sized output","<code>nanos</code> is nanos from now","","","","","","number of timers - 1","HPET counter period in femtoseconds","main counter tick period in femtoseconds","has periodic mode capability?","theoretical max u87 sized output","","","implementation revision ID","theoretical max u47 sized output","","","","","has 64 bit mode capability?","","enable HPET","front side bus interrupt mapping enabled","has front side bus interrupt mapping capability?","enable interrupts","I/O APIC routing <code>int_route_cap</code>","interrupt routing capability","interrupt trigger mode 0 = edge-triggered 1 = …","","legacy replacement mapping","has legacy replacement mapping capability?","","","active mode 0 = one-shot (non-periodic) 1 = periodic","number of timers - 1","main counter tick period in femtoseconds","has periodic mode capability?","","implementation revision ID","has 64 bit mode capability?","write to periodic timer’s accumulator","PCI vendor ID","has 64 bit mode capability?","non blocking sleep, this triggers an interrupt after <code>dur</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","write to periodic timer’s accumulator","PCI vendor ID","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","register selector","","","","","","","","","","","","","register data","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Root/eXtended System Description Pointer","","","","","","","","","","","","","","","","","","<code>ptr</code> is XSDT pointer instead of RSDT pointer","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","a physical address of the Root/eXtended System Descriptor …","","","","","","","","","","RSDT/XSDT","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,6,9,9,9,9,6,0,0,0,0,0,0,9,7,7,0,0,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,0,0,6,7,8,9,1,6,7,8,9,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,6,7,8,9,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,6,7,8,9,9,1,1,0,0,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,0,1,0,1,1,1,1,8,11,16,0,0,0,1,6,7,8,9,1,11,16,17,18,6,7,7,8,9,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,1,16,17,0,0,0,0,0,0,0,0,32,31,28,26,32,31,28,26,32,26,26,26,28,26,28,31,31,28,26,32,31,28,26,32,32,31,28,26,32,0,0,28,32,26,26,32,31,28,26,32,0,26,31,28,26,32,26,31,28,26,32,26,26,32,32,32,32,32,32,32,32,32,31,26,26,32,28,28,32,32,32,32,32,32,26,31,28,26,32,31,28,26,32,31,28,26,32,0,44,0,0,0,0,0,0,0,0,0,44,0,0,0,39,41,41,39,53,49,51,44,43,45,46,47,48,41,39,53,49,51,44,43,45,46,47,48,39,44,43,45,46,47,48,44,43,45,46,47,48,48,49,39,49,43,48,41,39,53,49,51,51,44,43,45,46,47,48,41,39,53,49,51,51,44,43,45,46,47,48,41,39,53,49,51,51,44,43,45,46,47,48,45,39,39,53,49,51,44,43,45,46,47,48,41,39,53,49,51,44,44,43,45,46,47,48,46,46,49,41,39,39,53,49,49,51,44,43,45,46,47,48,39,46,46,46,46,39,41,39,53,49,51,44,43,45,46,47,48,45,43,48,41,39,39,39,39,46,39,39,39,39,39,39,39,43,39,43,46,39,41,48,43,39,48,49,39,49,43,48,45,46,46,46,46,46,46,39,45,43,48,39,46,43,43,46,48,43,46,46,43,46,49,39,39,47,44,43,45,46,47,48,39,41,39,53,49,51,44,43,45,46,47,48,39,41,39,53,49,51,44,43,45,46,47,48,41,39,53,49,51,44,43,45,46,47,48,46,43,41,0,0,0,0,59,57,57,60,59,57,60,59,59,59,57,60,59,57,60,59,57,60,59,59,60,59,57,60,59,59,59,57,57,60,59,57,60,59,57,60,57,57,59,57,60,59,57,60,59,57,60,59,60,62,0,0,0,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,62,61,61,62,61,62,61,61,61,62,61,62,61,61,62,61,62,64,64,64,64,0,0,0,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,63,63,64,63,64,64,63,63,63,64,63,64,63,63,64,63,64,63,63,64,63,64,0,0,0,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,65,65,66,65,66,66,66,65,65,65,66,65,66,65,65,65,66,65,66,65,65,66,65,66],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,4,[]],[[[5,[-1]]],4,[]],[6,6],[7,7],[8,8],[9,9],[1,1],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[[6,6],10],[[7,7],10],[[8,8],10],[[9,9],10],[[1,2],3],[[[11,[-1]],12],13,[14,15]],[[[16,[-1]],12],13,[14,15]],[[[17,[-1]],12],13,[14,15]],[[[18,[-1]],12],13,[14,15]],[[6,12],13],[[7,12],13],[[8,12],13],[[9,12],13],[[1,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[19,6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[20,9],[-1,-1,[]],[[],1],0,[[],3],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,2],0,[[4,2],1],[[1,10],[[21,[-1]]],15],[[1,10],-1,15],[1,4],[[1,[21,[[22,[4]]]]],[[23,[8,9]]]],[[[11,[-1]]],-1,[]],[[[16,[-1]]],-1,[]],[[],-1,[24,15]],0,0,[[1,2],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[4,[[23,[7,-1]]],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[1,10],[[23,[-1,9]]],15],[[[16,[-1]],-1],3,[]],[[[17,[-1]],-1],3,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,26],[[-1,-2],3,[],[]],[[26,26],27],[[],[[29,[28]]]],[[],26],[[],[[30,[28]]]],[[[31,[-1]]],-2,[],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],0,[2,3],[2,3],[2,3],[2,3],[[],3],[[[30,[28]]],3],[28,3],0,[[26,26],10],[[26,12],13],[[32,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],32],[[26,-1],3,33],[[],2],[[],2],[[],2],[[],2],[26,34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,10],[[],[[0,[[36,[],[[35,[26]]]]]]]],0,0,0,0,0,0,0,0,0,[-2,[[31,[-1]]],[],[[38,[],[[37,[-1]]]]]],[34,26],[[26,26],[[21,[27]]]],0,[28,32],[28,32],0,0,0,0,0,0,[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[39,40,38],3],[41,42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[39,43],[44,44],[43,43],[45,45],[46,46],[47,47],[48,48],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[48,4],[49,50],[39,45],[49,46],[43,10],[48,10],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[51,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[51,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],[2,3],[2,3],[51,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[45,10],[39,52],[[39,12],13],[[53,12],13],[[49,12],13],[[51,12],13],[[44,12],13],[[43,12],13],[[45,12],13],[[46,12],13],[[47,12],13],[[48,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[9,44],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[46,54],[46,54],[49,26],[[],2],[[],39],[[],2],[[],2],[49,3],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[39,3],[46,10],[46,54],[46,54],[46,10],[39,47],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[45,10],[43,10],[48,10],[41,2],[39,50],[39,52],[39,54],[39,54],[46,10],[39,52],[[39,54],54],[[39,55],55],[[39,54],54],[39,52],[39,51],[39,[[22,[4]]]],[43,54],[39,34],[43,54],[46,10],[39,52],[[41,2,[5,[4]]],[[56,[2]]]],[48,10],[43,54],[39,54],[[48,4],3],[[49,50],3],[[39,45],3],[[49,46],3],[[43,10],3],[[48,10],3],[[45,10],3],[[46,54],3],[[46,54],3],[[46,10],3],[[46,54],3],[[46,54],3],[[46,10],3],[[39,47],3],[[45,10],3],[[43,10],3],[[48,10],3],[[39,50],3],[[46,10],3],[[43,54],3],[[43,54],3],[[46,10],3],[[48,10],3],[[43,54],3],[[46,10],3],[[46,10],3],[[43,54],3],[46,10],[[49,54],3],[[39,55],55],[[39,54],54],[[47,2],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[39,52],3],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[[],[[23,[39,44]]]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[46,10],[43,54],[[41,2,[5,[4]]],[[56,[2]]]],0,0,0,0,0,[[],[[21,[[58,[57]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[59,59],[[-1,-2],3,[],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],[2,3],[[59,59],10],[[60,12],13],[[59,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[[],2],[59,57],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[0,[[36,[],[[35,[[58,[57]]]]]]]]]],0,[[57,4,26,4],3],[[57,4,4],26],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[61,61],[62,62],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],[[61,61],10],[[62,62],10],[[61,12],13],[[62,12],13],[-1,-1,[]],[9,62],[-1,-1,[]],[[],61],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[[],[[23,[61,62]]]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[63,63],[64,64],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],[[63,63],10],0,[[63,12],13],[[64,12],13],[-1,-1,[]],[20,64],[-1,-1,[]],[[],63],[[],63],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[[],[[23,[63,64]]]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,65],[66,66],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],0,[[65,[22,[4]]],[[21,[[3,[8,1]]]]]],[[65,12],13],[[66,12],13],[-1,-1,[]],[-1,-1,[]],[9,66],[20,66],[[],65],[[],65],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[65,[[0,[[36,[],[[35,[1]]]]]]]],[65,[[0,[[36,[],[[35,[[3,[8,1]]]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[[],[[23,[65,66]]]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,25,[]],[-1,25,[]]],"c":[],"p":[[5,"StructUnpacker",0],[1,"usize"],[1,"tuple"],[1,"u8"],[1,"slice"],[6,"AcpiOem",0],[6,"AcpiVersion",0],[5,"RawSdtHeader",0],[6,"SdtError",0],[1,"bool"],[5,"ReadOnly",0],[5,"Formatter",703],[8,"Result",703],[10,"Debug",703],[10,"Copy",704],[5,"ReadWrite",0],[5,"WriteOnly",0],[5,"Reserved",0],[5,"StaticStr",705],[5,"Utf8Error",706],[6,"Option",707],[1,"array"],[6,"Result",708],[10,"Sized",704],[5,"TypeId",709],[5,"ApicId",173],[6,"Ordering",710],[5,"Lapic",173],[5,"RwLockReadGuard",711],[8,"RwLockWriteGuard",712],[5,"ApicTls",173],[5,"ApicRegs",173],[10,"Hasher",713],[1,"u32"],[17,"Item"],[10,"Iterator",714],[17,"Output"],[10,"FnMut",715],[5,"Hpet",268],[1,"u16"],[5,"HpetDevice",268],[10,"Any",709],[5,"GeneralCaps",268],[6,"HpetError",268],[5,"GeneralConfig",268],[5,"TimerNConfigAndCaps",268],[5,"GeneralInterruptStatus",268],[5,"RawHpetBits",268],[5,"TimerN",268],[8,"CounterValue",268],[5,"TimerNHandle",268],[1,"u128"],[5,"HpetRegs",268],[1,"u64"],[1,"i64"],[8,"IoResult",716],[5,"IoApic",520],[5,"MutexGuard",717],[5,"IoApicInfo",520],[5,"IoApicRegs",520],[5,"Madt",573],[6,"MadtError",573],[5,"Rsdp",615],[6,"RsdpError",615],[5,"Rsdt",660],[6,"RsdtError",660]],"b":[[684,"impl-From%3CSdtError%3E-for-RsdtError"],[685,"impl-From%3CUtf8Error%3E-for-RsdtError"]]},\
"hyperion_driver_framebuffer":{"doc":"","t":"FFNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["FboDevice","FboInfoDevice","as_any","as_any","borrow","borrow","borrow_mut","borrow_mut","from","from","get","into","into","len","len","map_phys","new","new","read","read","try_from","try_from","try_into","try_into","type_id","type_id","unmap_phys","with","with_mut","write","write"],"q":[[0,"hyperion_driver_framebuffer"],[31,"core::any"],[32,"hyperion_vfs::error"],[33,"core::result"],[34,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,3,1,3,1,3,1,3,3,1,3,1,3,1,1,3,1,3,1,3,1,3,1,3,1,1,1,1,3],"f":[0,0,[1,2],[3,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[3,4],[-1,-2,[],[]],[-1,-2,[],[]],[1,5],[3,5],[[1,5],[[6,[5]]]],[[],1],[[],3],[[1,5,[8,[7]]],[[6,[5]]]],[[3,5,[8,[7]]],[[6,[5]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[1,[[6,[11]]]],[-2,-1,[],[[13,[[8,[7]]],[[12,[-1]]]]]],[-2,-1,[],[[13,[[8,[7]]],[[12,[-1]]]]]],[[1,5,[8,[7]]],[[6,[5]]]],[[3,5,[8,[7]]],[[6,[5]]]]],"c":[],"p":[[5,"FboDevice",0],[10,"Any",31],[5,"FboInfoDevice",0],[1,"str"],[1,"usize"],[8,"IoResult",32],[1,"u8"],[1,"slice"],[6,"Result",33],[5,"TypeId",31],[1,"tuple"],[17,"Output"],[10,"FnOnce",34]],"b":[]},\
"hyperion_driver_pic":{"doc":"","t":"JFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["PICS","Pic","Pics","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","disable","drop","drop","enable","end_of_interrupt","from","from","init","init","init","into","into","mask","new","read_pit_count","try_from","try_from","try_into","try_into","type_id","type_id","unmask"],"q":[[0,"hyperion_driver_pic"],[33,"core::result"],[34,"core::any"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,2,7,2,7,2,7,2,7,2,2,7,2,2,2,7,2,2,7,2,7,2,2,2,2,7,2,7,2,7,2],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[2,3],[1,3],[1,3],[2,3],[[2,4],3],[-1,-1,[]],[-1,-1,[]],[[],1],[2,3],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[[2,4],3],[[],2],[[],3],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[[2,4],3]],"c":[],"p":[[1,"usize"],[5,"Pics",0],[1,"tuple"],[1,"u8"],[6,"Result",33],[5,"TypeId",34],[5,"Pic",0]],"b":[]},\
"hyperion_driver_pit":{"doc":"","t":"JFNNNNNNNNNNNNNNNN","n":["PIT","Pit","_apic_simple_pit_wait","_apic_sleep_simple_blocking","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","nanosecond_now","new","trigger_interrupt_at","try_from","try_into","type_id"],"q":[[0,"hyperion_driver_pit"],[18,"core::ops::function"],[19,"core::ops::function"],[20,"core::any"]],"d":["","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[[1,2,-1],3,4],[[1,5,6],3],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[7,3],[-1,-1,[]],[[],7],[-1,-2,[],[]],[1,8],[[],1],[[1,8],3],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[5,"Pit",0],[1,"u32"],[1,"tuple"],[10,"FnOnce",18],[1,"u16"],[10,"FnMut",18],[1,"usize"],[1,"u128"],[6,"Result",19],[5,"TypeId",20]],"b":[]},\
"hyperion_driver_ps2":{"doc":"","t":"CCHH","n":["keyboard","mouse","init","init"],"q":[[0,"hyperion_driver_ps2"],[2,"hyperion_driver_ps2::keyboard"],[3,"hyperion_driver_ps2::mouse"]],"d":["","","",""],"i":[0,0,0,0],"f":[0,0,[[],1],[[],1]],"c":[],"p":[[1,"tuple"]],"b":[]},\
"hyperion_driver_qemu":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[],"b":[]},\
"hyperion_driver_rtc":{"doc":"","t":"SJJFFNNNNNNNNNNNNNNNNNNNNNNNNN","n":["CUR_YEAR","RTC","RTC_CENTURY_REG","Rtc","RtcDevice","as_any","borrow","borrow","borrow_mut","borrow_mut","default","enable_ints","from","from","init_clock","int_ack","into","into","len","new","now","now_bytes","read","try_from","try_from","try_into","try_into","type_id","type_id","write"],"q":[[0,"hyperion_driver_rtc"],[30,"core::any"],[31,"time::offset_date_time"],[32,"core::option"],[33,"hyperion_vfs::error"],[34,"core::result"],[35,"core::any"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,3,1,3,1,3,3,3,1,3,3,3,1,1,3,3,3,1,3,1,3,1,3,1,1],"f":[0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],3],[3,4],[-1,-1,[]],[-1,-1,[]],[3,4],[3,4],[-1,-2,[],[]],[-1,-2,[],[]],[1,5],[[],3],[3,[[7,[6]]]],[3,[[9,[8]]]],[[1,5,[10,[8]]],[[11,[5]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[1,5,[10,[8]]],[[11,[5]]]]],"c":[],"p":[[5,"RtcDevice",0],[10,"Any",30],[5,"Rtc",0],[1,"tuple"],[1,"usize"],[5,"OffsetDateTime",31],[6,"Option",32],[1,"u8"],[1,"array"],[1,"slice"],[8,"IoResult",33],[6,"Result",34],[5,"TypeId",30]],"b":[]},\
"hyperion_drivers":{"doc":"","t":"EEHHE","n":["acpi","fbo","lazy_install_early","lazy_install_late","rtc"],"q":[[0,"hyperion_drivers"],[5,"hyperion_vfs::tree"]],"d":["","","","",""],"i":[0,0,0,0,0],"f":[0,0,[-1,1,2],[[],1],0],"c":[],"p":[[1,"tuple"],[10,"IntoNode",5]],"b":[]},\
"hyperion_escape":{"doc":"","t":"CCPPPGFPPPNNNNNNNNNNNNNNNNNFKNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["decode","encode","BgColor","Byte","Bytes","DecodedPart","EscapeDecoder","FgColor","None","Reset","borrow","borrow","borrow_mut","borrow_mut","clear","from","from","into","into","new","next","try_from","try_from","try_into","try_into","type_id","type_id","EncodedPart","EscapeEncoder","borrow","borrow_mut","clone","clone_into","color_to_code","default","fmt","fmt","fmt","from","from","from","into","reset_after","to_owned","to_string","true_black","true_blue","true_cyan","true_darkgrey","true_green","true_grey","true_lightgrey","true_magenta","true_red","true_white","true_yellow","try_from","try_into","type_id","with_escape_code","with_reset"],"q":[[0,"hyperion_escape"],[2,"hyperion_escape::decode"],[27,"hyperion_escape::encode"],[61,"core::result"],[62,"core::any"],[63,"core::clone"],[64,"core::marker"],[65,"hyperion_color"],[66,"alloc::sync"],[67,"core::fmt"],[68,"core::fmt"]],"d":["","","","","Null terminated","","foreground color can be changed like this: …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,2,2,2,0,0,2,2,2,1,2,1,2,1,1,2,1,2,1,1,1,2,1,2,1,2,0,0,6,6,6,6,0,6,6,6,6,6,6,6,6,19,6,6,19,19,19,19,19,19,19,19,19,19,19,6,6,6,19,6],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[1,3],2],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]],[-1,5,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[-1]]],[7,8]],[[-1,-2],9,[],[]],[10,[[12,[11]]]],[[],[[6,[9]]]],[[[6,[-1]],13],14,15],[[[6,[-1]],13],14,16],[[[6,[-1]],13],14,17],[-1,-1,[]],[18,-1,[]],[-1,[[6,[-1]]],[]],[-1,-2,[],[]],[19,[[6,[19]]]],[-1,-2,[],[]],[-1,20,[]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]],[[19,11],[[6,[19]]]],[[[6,[-1]],21],[[6,[-1]]],[]]],"c":[],"p":[[5,"EscapeDecoder",2],[6,"DecodedPart",2],[1,"u8"],[6,"Result",61],[5,"TypeId",62],[5,"EncodedPart",27],[10,"Clone",63],[10,"Sized",64],[1,"tuple"],[5,"Color",65],[1,"str"],[5,"Arc",66],[5,"Formatter",67],[8,"Result",67],[10,"Display",67],[10,"Debug",67],[10,"LowerHex",67],[1,"never"],[10,"EscapeEncoder",27],[5,"String",68],[1,"bool"]],"b":[[35,"impl-Display-for-EncodedPart%3C\'_,+T%3E"],[36,"impl-Debug-for-EncodedPart%3C\'_,+T%3E"],[37,"impl-LowerHex-for-EncodedPart%3C\'_,+T%3E"]]},\
"hyperion_framebuffer":{"doc":"","t":"CCCJFFNNNNNNNNNNNNNNNNNNNNONONNNONNNNNNNNNOH","n":["font","framebuffer","logger","FONT","Framebuffer","FramebufferInfo","ascii_char","borrow","borrow","borrow_mut","borrow_mut","buf","buf_mut","clear","clone","clone_into","default","deref","deref_mut","eq","fill","fmt","fmt","from","from","get","height","info","info","into","into","new","pitch","pixel","scroll","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","width","_print"],"q":[[0,"hyperion_framebuffer"],[3,"hyperion_framebuffer::font"],[4,"hyperion_framebuffer::framebuffer"],[43,"hyperion_framebuffer::logger"],[44,"hyperion_color"],[45,"core::fmt"],[46,"core::fmt"],[47,"core::option"],[48,"core::result"],[49,"core::any"],[50,"core::fmt"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,8,1,8,1,1,1,8,8,8,1,1,8,1,1,8,1,8,1,8,1,1,1,8,1,8,1,1,8,1,8,1,8,1,8,8,0],"f":[0,0,0,0,0,0,[[1,2,2,3,4,4],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[6,[3]]]],[1,[[6,[3]]]],[1,7],[8,8],[[-1,-2],7,[],[]],[[],8],[1,-1,[]],[1,-1,[]],[[8,8],5],[[1,2,2,2,2,4],7],[[1,9],10],[[8,9],10],[-1,-1,[]],[-1,-1,[]],[[],[[12,[[11,[1]]]]]],0,[1,8],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[3]],8],1],0,[[1,2,2,4],7],[[1,2],7],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],0,[15,7]],"c":[],"p":[[5,"Framebuffer",4],[1,"usize"],[1,"u8"],[5,"Color",44],[1,"bool"],[1,"slice"],[1,"tuple"],[5,"FramebufferInfo",4],[5,"Formatter",45],[8,"Result",45],[8,"Mutex",46],[6,"Option",47],[6,"Result",48],[5,"TypeId",49],[5,"Arguments",45]],"b":[]},\
"hyperion_futures":{"doc":"","t":"CCCCCHHHHHFNNNNNNNNNNNNHNNNNNFFFFNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPFGNNNNNNNNNNNNNNNNNNNNNNNNNNNOFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHNNNNNNNNNNNN","n":["executor","keyboard","mpmc","task","timer","pop_task","push_task","run_once","run_tasks","spawn","KeyboardEvents","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","fmt","from","init","into","keyboard_events","poll_next","to_owned","try_from","try_into","type_id","Receiver","Recv","RecvStream","Sender","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","into_future","poll","poll_next","race_stream","recv","send","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_poll_next","try_recv","type_id","type_id","type_id","type_id","Future","None","Process","Task","TaskContext","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","from_future","from_process","init","init","into","into","poll","schedule","try_from","try_from","try_into","try_into","type_id","type_id","wake_by_ref","inner","Sleep","SleepUntil","Ticks","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_future","into_future","new","new","poll","poll","poll_next","sleep","sleep_until","ticks","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"hyperion_futures"],[5,"hyperion_futures::executor"],[10,"hyperion_futures::keyboard"],[29,"hyperion_futures::mpmc"],[94,"hyperion_futures::task"],[126,"hyperion_futures::task::TaskContext"],[127,"hyperion_futures::timer"],[185,"alloc::sync"],[186,"core::option"],[187,"core::future::future"],[188,"core::marker"],[189,"core::fmt"],[190,"core::fmt"],[191,"core::task::wake"],[192,"core::task::poll"],[193,"core::result"],[194,"core::any"],[195,"core::clone"],[196,"hyperion_instant"],[197,"time::duration"]],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","A kernel task","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","async sleep duration","async sleep until deadline","async sleep repeat","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,0,0,0,0,21,22,18,19,21,22,18,19,0,18,19,18,19,21,22,18,19,21,22,18,19,21,22,18,18,19,19,21,22,18,19,21,22,18,19,21,22,18,19,21,21,22,19,19,18,18,19,21,22,18,19,21,22,18,19,22,19,21,22,18,19,28,28,28,0,0,1,28,1,28,1,28,1,28,1,28,1,28,1,1,1,28,1,28,1,1,1,28,1,28,1,28,1,29,0,0,0,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,23,24,23,24,25,0,0,0,23,24,25,23,24,25,23,24,25,23,24,25],"f":[0,0,0,0,0,[[],[[3,[[2,[1]]]]]],[[[2,[1]]],4],[[],[[3,[4]]]],[[],5],[-1,4,[[7,[],[[6,[4]]]],8]],0,[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[[-1,-2],4,[],[]],[[],9],[10,-1,[]],[10,-1,[]],[10,4],[[9,11],12],[-1,-1,[]],[[],10],[-1,-2,[],[]],[[],9],[[[13,[9]],14],[[15,[[3,[-1]]]]],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[4,[[18,[-1]],[19,[-1]]]]],[]],[[[18,[-1]]],[[18,[-1]]],20],[[[19,[-1]]],[[19,[-1]]],20],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,4],[10,4],[[[18,[-1]]],4,[]],[10,4],[10,4],[[[19,[-1]]],4,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],10],[[],10],[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[13,[[21,[-1]]]],14],[[15,[-2]]],[],[]],[[[13,[[22,[-1]]]],14],[[15,[[3,[-2]]]]],[],[]],[[[19,[-1]]],[[22,[-1]]],[]],[[[19,[-1]]],[[21,[-1]]],[]],[[[18,[-1]],-1],[[3,[4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[[[13,[-1]],14],[[15,[[3,[16]]]]],[]],[[[19,[-1]]],[[3,[-1]]],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,4],[10,4],[-1,-1,[]],[-1,-1,[]],[-1,1,[[7,[],[[6,[4]]]],8]],[[],4],[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[1]]],4],[[[2,[1]]],4],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[[[2,[1]]],4],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23,23],[24,24],[25,25],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,4],[10,4],[10,4],[[23,11],12],[[24,11],12],[[25,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],10],[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[26,23],[27,24],[[[13,[23]],14],[[15,[-1]]],[]],[[[13,[24]],14],[[15,[-1]]],[]],[[[13,[25]],14],[[15,[[3,[-1]]]]],[]],[27,24],[26,23],[27,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]]],"c":[],"p":[[5,"Task",94],[5,"Arc",185],[6,"Option",186],[1,"tuple"],[1,"never"],[17,"Output"],[10,"Future",187],[10,"Send",188],[5,"KeyboardEvents",10],[1,"usize"],[5,"Formatter",189],[8,"Result",189],[5,"Pin",190],[5,"Context",191],[6,"Poll",192],[6,"Result",193],[5,"TypeId",194],[5,"Sender",29],[5,"Receiver",29],[10,"Clone",195],[5,"Recv",29],[5,"RecvStream",29],[5,"SleepUntil",127],[5,"Sleep",127],[5,"Ticks",127],[5,"Instant",196],[5,"Duration",197],[6,"TaskContext",94],[15,"Future",126]],"b":[]},\
"hyperion_instant":{"doc":"","t":"FTNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Instant","ZERO","add","borrow","borrow_mut","checked_add","checked_sub","checked_sub","clone","clone_into","cmp","deref","deref_mut","drop","elapsed","eq","fmt","from","init","into","is_reached","nanosecond","new","now","partial_cmp","sub","sub","to_owned","try_from","try_into","type_id"],"q":[[0,"hyperion_instant"],[31,"time::duration"],[32,"core::option"],[33,"core::cmp"],[34,"core::fmt"],[35,"core::fmt"],[36,"core::any"]],"d":["","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[[1,2],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,2],[[3,[-1]]],[]],[[1,1],[[3,[-1]]],[]],[[1,2],[[3,[-1]]],[]],[1,1],[[-1,-2],4,[],[]],[[1,1],5],[6,-1,[]],[6,-1,[]],[6,4],[1,2],[[1,1],7],[[1,8],9],[-1,-1,[]],[[],6],[-1,-2,[],[]],[1,7],[1,10],[10,1],[[],1],[[1,1],[[3,[5]]]],[[1,1],-1,[]],[[1,2],-1,[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]]],"c":[],"p":[[5,"Instant",0],[5,"Duration",31],[6,"Option",32],[1,"tuple"],[6,"Ordering",33],[1,"usize"],[1,"bool"],[5,"Formatter",34],[8,"Result",34],[1,"u128"],[6,"Result",35],[5,"TypeId",36]],"b":[[6,"impl-CheckedSub-for-Instant"],[7,"impl-CheckedSub%3CDuration%3E-for-Instant"],[25,"impl-Sub-for-Instant"],[26,"impl-Sub%3CDuration%3E-for-Instant"]]},\
"hyperion_int_safe_lazy":{"doc":"Lazy initialized value that doesn’t get initialized with …","t":"FNNNNNNNNNNNNN","n":["IntSafeLazy","as_mut_ptr","borrow","borrow_mut","default","fmt","from","get","get_force","into","new","try_from","try_into","type_id"],"q":[[0,"hyperion_int_safe_lazy"],[14,"core::default"],[15,"core::fmt"],[16,"core::fmt"],[17,"core::ops::function"],[18,"core::result"],[19,"core::any"]],"d":["","Retrieves a mutable pointer to the inner data.","","","Creates a new lazy value using <code>Default</code> as the initializing …","","Returns the argument unchanged.","This is the interrupt safe method for retrieving the value …","This is not the interrupt safe method for retrieving the …","Calls <code>U::from(self)</code>.","Creates a new lazy value with the given initializing …","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[[1,[-1,-2]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],2],[[[1,[-1,-2]],3],4,5,[]],[-1,-1,[]],[[[1,[-1,-2]]],[[6,[-1]]],[],[[8,[],[[7,[-1]]]]]],[[[1,[-1,-2]]],-1,[],[[8,[],[[7,[-1]]]]]],[-1,-2,[],[]],[-1,[[1,[-2,-1]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[5,"IntSafeLazy",0],[10,"Default",14],[5,"Formatter",15],[8,"Result",15],[10,"Debug",15],[6,"Option",16],[17,"Output"],[10,"FnOnce",17],[6,"Result",18],[5,"TypeId",19]],"b":[]},\
"hyperion_interrupts":{"doc":"","t":"PJJSJJGFPPNNNNNNNHNNNNNNHNNNNHNNHNNNNHHHNNNNNNNNN","n":["Apic","INT_ALLOCATOR","INT_CONTROLLER","INT_COUNT","INT_EOI_HANDLER","INT_HANDLERS","IntController","IntHandler","None","Pic","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default_handler","deref","deref","deref_mut","deref_mut","drop","drop","end_of_interrupt","eq","fmt","from","from","handler","init","init","interrupt_handler","into","into","load","new","set_any_interrupt_handler","set_interrupt_handler","set_interrupt_handler_if_free","store","store_if_free","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"hyperion_interrupts"],[49,"core::fmt"],[50,"core::fmt"],[51,"core::ops::function"],[52,"core::result"],[53,"core::any"]],"d":["‘Advanced Programmable Interrupt Timer’","","","","","","","","","The legacy ‘Programmable Interrupt Timer’","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[1,0,0,0,0,0,0,0,1,1,8,1,8,1,1,1,1,0,8,1,8,1,8,1,0,1,1,8,1,0,8,1,0,8,1,8,8,0,0,0,8,8,1,8,1,8,1,8,1],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[],1],[3,2],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,2],[4,2],[3,2],[[1,1],5],[[1,6],7],[-1,-1,[]],[-1,-1,[]],[3,8],[[],4],[[],4],[3,2],[-1,-2,[],[]],[-1,-2,[],[]],[8],[[],8],[-1,[[9,[3]]],[[11,[3],[[10,[5]]]]]],[3,2],[3,5],[8,2],[8,5],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]]],"c":[],"p":[[6,"IntController",0],[1,"tuple"],[1,"u8"],[1,"usize"],[1,"bool"],[5,"Formatter",49],[8,"Result",49],[5,"IntHandler",0],[6,"Option",50],[17,"Output"],[10,"Fn",51],[6,"Result",52],[5,"TypeId",53]],"b":[]},\
"hyperion_kernel":{"doc":"Hyperion","t":"JHHCCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH","n":["ALLOCATOR","_start","init","panic","syscall","panic_handler","_accept","_bind","_connect","_listen","_recv","_send","_socket","accept","bind","call_id","close","connect","dup","exit","futex_wait","futex_wake","get_pid","get_tid","listen","log","map_file","metadata","nanosleep","nanosleep_until","open","open_dir","palloc","pfree","pthread_spawn","read","recv","rename","send","socket","syscall","timestamp","unmap_file","write","yield_now"],"q":[[0,"hyperion_kernel"],[5,"hyperion_kernel::panic"],[6,"hyperion_kernel::syscall"],[45,"x86_64::addr"],[46,"core::ops::range"],[47,"hyperion_arch_x86_64::vmm"],[48,"core::panic::panic_info"],[49,"hyperion_syscall::net"],[50,"hyperion_syscall::err"],[51,"hyperion_syscall::net"],[52,"core::ops::function"]],"d":["","","","","","","","","","","","","","accept a connection on a socket","bind a socket","","close a file","connect to a socket","duplicate a file descriptor","exit and kill the current process","futex wait","futex wake","pid of the current process","tid of the current thread","start listening to connections on a socket","print a string to logs","map file to memory","get file metadata","sleep at least arg0 nanoseconds","sleep at least until the nanosecond arg0 happens","open a file","open a directory","allocate physical pages and map them to virtual memory","free allocated physical pages","spawn a new thread","read bytes from a file","recv data from a socket","rename the current process","send data to a socket","create a socket","","get the number of nanoseconds after boot","unmap file from memory","write bytes into a file","give the processor back to the kernel temporarily"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,[[],1],[[[3,[2]],4],5],0,0,[6,1],[7,[[8,[7]]]],[[7,9],[[8,[5]]]],[[7,9],[[8,[5]]]],[7,[[8,[5]]]],[[7,[11,[10]],12],[[8,[12]]]],[[7,[11,[10]],12],[[8,[5]]]],[[13,14,15],[[8,[7]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[[-1,16],[[5,[[8,[12]],9]]],[[18,[16],[[17,[[8,[12]]]]]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,5],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]]],"c":[],"p":[[1,"never"],[5,"VirtAddr",45],[5,"Range",46],[5,"PageMap",47],[1,"tuple"],[5,"PanicInfo",48],[5,"SocketDesc",49],[8,"Result",50],[1,"str"],[1,"u8"],[1,"slice"],[1,"usize"],[5,"SocketDomain",49],[5,"SocketType",49],[5,"Protocol",49],[5,"SyscallRegs",51],[17,"Output"],[10,"FnOnce",52]],"b":[]},\
"hyperion_kernel_impl":{"doc":"","t":"IFFFFFFFIFJNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNONNNNNNNNOONNNNNNNNNHNHHNONNNNNNNNNNNNNNNNNNNHNNOHONHHNNNHHHHHHONNOOONNNNNNNNNNNNNNNNNNNONNNNNNNNNNN","n":["File","FileInner","LocalSocketConn","PipeInput","PipeOutput","ProcessExtra","Socket","SocketFile","SocketRef","SparseVec","VFS_ROOT","as_any","as_any","as_any","as_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","connection","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","domain","drop","drop","drop","drop","drop","drop","drop","drop","file_ref","files","from","from","from","from","from","from","from","from","get","get_file","get_mut","get_socket","get_socket_locked","incoming","incoming","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","len","len","len","map_vfs_err_to_syscall_err","new","new","position","process_ext_with","proto","push","push_file","push_socket","read","read","read","read_slice_parts","read_untrusted_bytes","read_untrusted_bytes_mut","read_untrusted_mut","read_untrusted_ref","read_untrusted_str","recv","remove","replace","send","socket_ref","sockets","to_owned","try_connection","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_incoming","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write"],"q":[[0,"hyperion_kernel_impl"],[150,"core::any"],[151,"core::option"],[152,"hyperion_syscall::fs"],[153,"hyperion_scheduler::lock"],[154,"alloc::sync"],[155,"hyperion_syscall::err"],[156,"hyperion_syscall::net"],[157,"hyperion_scheduler::lock"],[158,"hyperion_scheduler::ipc::pipe"],[159,"hyperion_vfs::error"],[160,"hyperion_syscall::err"],[161,"hyperion_vfs::error"],[162,"core::result"],[163,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,3,4,5,9,1,3,4,12,31,5,6,9,1,3,4,12,31,5,6,6,6,5,9,1,3,4,12,31,5,6,9,1,3,4,12,31,5,6,5,9,1,3,4,12,31,5,6,12,4,9,1,3,4,12,31,5,6,9,0,9,0,0,5,5,9,1,3,4,12,31,5,6,9,1,3,4,12,31,5,6,1,3,5,0,9,6,12,0,5,9,0,0,1,3,5,0,0,0,0,0,0,6,9,9,6,31,4,6,5,9,1,3,4,12,31,5,6,5,9,1,3,4,12,31,5,6,5,9,1,3,4,12,31,5,6,1,3,5],"f":[0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,2],[4,2],[5,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,6],[[-1,-2],7,[],[]],0,[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],0,[8,7],[8,7],[8,7],[8,7],[8,7],[8,7],[8,7],[8,7],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[9,[-1]],8],[[10,[-1]]],[]],[11,[[15,[[14,[[13,[12]]]]]]]],[[[9,[-1]],8],[[10,[-1]]],[]],[16,[[15,[[14,[[13,[5]]]]]]]],[16,[[15,[[18,[17,5]]]]]],[5,[[14,[[19,[6]]]]]],0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,8],[3,8],[5,8],[20,21],[[],[[9,[-1]]],[]],[[],[[7,[6,6]]]],0,[22,4],0,[[[9,[-1]],-1],8,[]],[12,11],[5,16],[[1,8,[24,[23]]],[[25,[8]]]],[[3,8,[24,[23]]],[[25,[8]]]],[[5,8,[24,[23]]],[[25,[8]]]],[[26,26],[[15,[[7,[27,8]]]]]],[[26,26],[[15,[[24,[23]]]]]],[[26,26],[[15,[[24,[23]]]]]],[26,[[15,[-1]]],[]],[26,[[15,[-1]]],[]],[[26,26],[[15,[28]]]],0,[[[9,[-1]],8],[[10,[-1]]],[]],[[[9,[-1]],8,-1],[[10,[-1]]],[]],0,0,0,[-1,-2,[],[]],[5,[[10,[6]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[5,[[10,[[14,[[19,[6]]]]]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],0,[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[1,8,[24,[23]]],[[25,[8]]]],[[3,8,[24,[23]]],[[25,[8]]]],[[5,8,[24,[23]]],[[25,[8]]]]],"c":[],"p":[[5,"PipeInput",0],[10,"Any",150],[5,"PipeOutput",0],[5,"ProcessExtra",0],[5,"SocketFile",0],[5,"LocalSocketConn",0],[1,"tuple"],[1,"usize"],[5,"SparseVec",0],[6,"Option",151],[5,"FileDesc",152],[5,"FileInner",0],[8,"Mutex",153],[5,"Arc",154],[8,"Result",155],[5,"SocketDesc",156],[5,"Futex",153],[5,"ArcMutexGuard",157],[5,"Channel",158],[6,"IoError",159],[5,"Error",155],[5,"Process",160],[1,"u8"],[1,"slice"],[8,"IoResult",159],[1,"u64"],[5,"VirtAddr",161],[1,"str"],[6,"Result",162],[5,"TypeId",150],[5,"Socket",0]],"b":[]},\
"hyperion_kernel_info":{"doc":"","t":"JJJJJ","n":["BUILD_REV","BUILD_TIME","NAME","SPLASH","VERSION"],"q":[[0,"hyperion_kernel_info"]],"d":["","","","",""],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[],"b":[]},\
"hyperion_keyboard":{"doc":"","t":"JCHHHHHHHPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNO","n":["LAZY","event","force_init_queue","layouts","next_keyboard_event","provide_keyboard_event","provide_raw_keyboard_event","set_layout","wait_keyboard_event","A","Apps","ArrowDown","ArrowLeft","ArrowRight","ArrowUp","B","Backspace","C","Calculator","CapsLock","D","Delete","E","ElementState","End","Escape","F","F1","F10","F11","F12","F2","F3","F4","F5","F6","F7","F8","F9","G","H","Home","I","Insert","J","K","Key0","Key1","Key2","Key3","Key4","Key5","Key6","Key7","Key8","Key9","KeyCode","KeyboardEvent","L","LAlt","LControl","LShift","LWin","M","Mute","N","NextTrack","Numpad0","Numpad1","Numpad2","Numpad3","Numpad4","Numpad5","Numpad6","Numpad7","Numpad8","Numpad9","NumpadAdd","NumpadDivide","NumpadEnter","NumpadLock","NumpadMultiply","NumpadPeriod","NumpadSubtract","O","Oem1","Oem10","Oem11","Oem12","Oem13","Oem2","Oem3","Oem4","Oem5","Oem6","Oem7","Oem8","Oem9","OemComma","OemMinus","OemPeriod","OemPlus","P","PageDown","PageUp","PauseBreak","Play","PowerOnTestOk","PressHold","PressRelease","PrevTrack","PrintScreen","Q","R","RAlt2","RAltGr","RControl","RControl2","RShift","RWin","Release","Return","S","ScrollLock","Spacebar","Stop","SysRq","T","Tab","TooManyKeys","U","V","VolumeDown","VolumeUp","W","WWWHome","X","Y","Z","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","keycode","partial_cmp","state","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unicode"],"q":[[0,"hyperion_keyboard"],[9,"hyperion_keyboard::event"],[192,"core::option"],[193,"core::task::wake"],[194,"core::task::poll"],[195,"core::cmp"],[196,"core::fmt"],[197,"core::fmt"],[198,"core::any"]],"d":["","","","","","","","","","Letters, Middle Row #1","The ‘Apps’ key (aka ‘Menu’ or ‘Right-Click’)","The down-arrow in the inverted-T","The left-arrow in the inverted-T","The right-arrow in the inverted-T","The up-arrow in the inverted-T","Letters, Bottom Row #5","Backspace","Letters, Bottom Row #3","Multi-media keys - Open Calculator","Caps Lock","Letters, Middle Row #3","The Delete key - bottom Left of the Extended Block","Letters, Top Row #3","","The End key - bottom Middle of the Extended Block","Top Left of the Keyboard","Letters, Middle Row #4","Function Key F1","Function Key F10","Function Key F11","Function Key F12","Function Key F2","Function Key F3","Function Key F4","Function Key F5","Function Key F6","Function Key F7","Function Key F8","Function Key F9","Letters, Middle Row #5","Letters, Middle Row #6","Top Middle of the Extended Block","Letters, Top Row #8","Top Left of the Extended Block","Letters, Middle Row #7","Letters, Middle Row #8","Number Line, Digit 0","Number Line, Digit 1","Number Line, Digit 2","Number Line, Digit 3","Number Line, Digit 4","Number Line, Digit 5","Number Line, Digit 6","Number Line, Digit 7","Number Line, Digit 8","Number Line, Digit 9","Keycodes that can be generated by a keyboard.","","Letters, Middle Row #9","The left-hand Alt key","The left-hand Control key","Left Shift","The left-hand ‘Windows’ key","Letters, Bottom Row #7","Multi-media keys - Volume Mute Toggle","Letters, Bottom Row #6","Multi-media keys - Next Track","The Numpad 0/Insert Key","Numpad 1/End Key","Numpad 2/Arrow Down Key","Numpad 3/Page Down Key","The Numpad 4/Left Arrow key","The Numpad 5 Key","The Numpad 6/Right Arrow key","The Numpad 7/Home key","The Numpad 8/Up Arrow key","The Numpad 9/Page Up key","The Numpad Add/Plus key","The Numpad Divide (or Slash) key","Numpad Enter","The Num Lock key","The Numpad Multiple (or Star) key","The Numppad Period/Delete Key","The Numpad Subtract (or Minus) key","Letters, Top Row #9","The US ANSI Semicolon/Colon key","Extra JIS key (0x79)","Extra JIS key (0x70)","Extra JIS symbol key (0x73)","Extra JIS symbol key (0x7D)","US ANSI <code>/?</code> Key","The US ANSI Single-Quote/At key","US ANSI Left-Square-Bracket key","US ANSI Backslash Key / UK ISO Backslash Key","US ANSI Right-Square-Bracket key","The UK/ISO Hash/Tilde key (ISO layout only)","Symbol key to the left of <code>Key1</code>","Extra JIS key (0x7B)","US ANSI <code>,&lt;</code> key","US Minus/Underscore Key (right of ‘Key0’)","US ANSI <code>.&gt;</code> Key","US Equals/Plus Key (right of ‘OemMinus’)","Letters, Top Row #10","The Page Down key - -bottom Right of the Extended Block","Top Right of the Extended Block","The Pause/Break key","Multi-media keys - Play","Sent when the keyboard boots","","","Multi-media keys - Previous Track","The Print Screen Key","Letters, Top Row #1","Letters, Top Row #4","Used as a ‘hidden’ Right Alt Key (Print Screen = RAlt2 …","The right-hand AltGr key","The right-hand Control key","Used as a ‘hidden’ Right Control Key (Pause = …","Right Shift","The right-hand Win key","","The Return Key","Letters, Middle Row #2","The Scroll Lock key","The Space Bar","Multi-media keys - Stop","The Sys Req key (you get this keycode with Alt + …","Letters, Top Row #5","The Tab Key","Sent by the keyboard when too many keys are pressed","Letters, Top Row #7","Letters, Bottom Row #4","Multi-media keys - Increase Volume","Multi-media keys - Decrease Volume","Letters, Top Row #2","Multi-media keys - Open Browser","Letters, Bottom Row #2","Letters, Top Row #6","Letters, Bottom Row #1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,4,9,10,4,9,10,4,9,10,4,9,10,10,4,9,10,4,9,10,4,9,10,4,9,10,4,9,10,4,9,10,4,9,10,4,9,10,4,10,4,4,9,10,4,9,10,4,9,10,4,9,10,4],"f":[0,0,[[],1],[[],[[3,[2]]]],[[],[[5,[4]]]],[4,1],[6,1],[2,[[5,[1]]]],[7,[[8,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[9,9],[10,10],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[10,10],11],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,1],[12,1],[12,1],[[4,4],13],[[9,9],13],[[10,10],13],[[4,14],15],[[9,14],15],[[10,14],[[17,[1,16]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],12],[[],12],[[],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[10,10],[[5,[11]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0],"c":[],"p":[[1,"tuple"],[1,"str"],[1,"slice"],[5,"KeyboardEvent",9],[6,"Option",192],[1,"u8"],[5,"Context",193],[6,"Poll",194],[6,"ElementState",9],[6,"KeyCode",9],[6,"Ordering",195],[1,"usize"],[1,"bool"],[5,"Formatter",196],[8,"Result",196],[5,"Error",196],[6,"Result",197],[5,"TypeId",198]],"b":[]},\
"hyperion_kshell":{"doc":"","t":"PGPPPPPPINNNNNNNNNNNNNNHCCNCNNNNNOOOOFNNNNNNNNNNNNNNNNHFNNNONNNNNNNNNNNONNNNNNN","n":["Err","Error","InsecurePrng","IoError","NamelessFile","Ok","Other","Parse","Result","as_error_source","backtrace","borrow","borrow_mut","cause","deref","deref_mut","description","drop","fmt","fmt","from","init","into","kshell","shell","snake","source","term","to_string","try_from","try_into","type_id","vzip","msg","resource","source","source","Shell","borrow","borrow_mut","deref","deref_mut","drop","from","init","init","input","into","into_inner","new","try_from","try_into","type_id","vzip","snake_game","Term","borrow","borrow_mut","clear","cursor","cursor_prev","default","deref","deref_mut","drop","flush","from","init","into","new","read_at","size","try_from","try_into","type_id","vzip","write_byte","write_bytes","write_str"],"q":[[0,"hyperion_kshell"],[33,"hyperion_kshell::Error"],[37,"hyperion_kshell::shell"],[54,"hyperion_kshell::snake"],[55,"hyperion_kshell::term"],[79,"snafu::no_std_error"],[80,"snafu::backtrace_inert"],[81,"core::option"],[82,"core::fmt"],[83,"core::fmt"],[84,"core::result"],[85,"core::any"],[86,"hyperion_keyboard::event"]],"d":["Contains the error value","","","","","Contains the success value","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[16,0,2,2,2,16,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,2,0,2,2,2,2,2,19,20,20,21,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,0,0,0,0,0,0,[-1,1,[]],[2,[[4,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[2,[[4,[1]]]],[5,-1,[]],[5,-1,[]],[2,6],[5,7],[[2,8],9],[[2,8],9],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],7],0,0,[2,[[4,[1]]]],0,[-1,10,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[-1,-1,[]],[[],5],[13,7],[[13,14],[[4,[7]]]],[-1,-2,[],[]],[13,15],[15,13],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],[15,[[16,[7]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[15,7],0,[15,7],[[],15],[5,-1,[]],[5,-1,[]],[5,7],[15,7],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],15],[[15,[7,[5,5]]],17],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],[[15,17],7],[[15,[18,[17]]],7],[[15,6],9]],"c":[],"p":[[10,"Error",79],[6,"Error",0],[5,"Backtrace",80],[6,"Option",81],[1,"usize"],[1,"str"],[1,"tuple"],[5,"Formatter",82],[8,"Result",82],[5,"String",83],[6,"Result",84],[5,"TypeId",85],[5,"Shell",37],[5,"KeyboardEvent",86],[5,"Term",55],[8,"Result",0],[1,"u8"],[1,"slice"],[15,"Other",33],[15,"IoError",33],[15,"Parse",33]],"b":[[18,"impl-Display-for-Error"],[19,"impl-Debug-for-Error"]]},\
"hyperion_loader":{"doc":"","t":"FNNNNNNNNNNNNNNHNNN","n":["Loader","borrow","borrow_mut","debug","deref","deref_mut","drop","enter_userland","from","init","init_stack","into","load","load_segment","new","push","try_from","try_into","type_id"],"q":[[0,"hyperion_loader"],[19,"core::option"],[20,"x86_64::addr"],[21,"elf::segment"],[22,"core::marker"],[23,"core::result"],[24,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","push items to the stack","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[3,-1,[]],[3,-1,[]],[3,2],[[1,[5,[4]]],[[6,[2]]]],[-1,-1,[]],[[],3],[[[5,[4]]],[[2,[7,7]]]],[-1,-2,[],[]],[1,2],[[1,8],2],[[[5,[9]]],1],[[7,-1],2,10],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]]],"c":[],"p":[[5,"Loader",0],[1,"tuple"],[1,"usize"],[1,"str"],[1,"slice"],[6,"Option",19],[5,"VirtAddr",20],[5,"ProgramHeader",21],[1,"u8"],[10,"Sized",22],[6,"Result",23],[5,"TypeId",24]],"b":[]},\
"hyperion_log":{"doc":"","t":"TTPPPGKPPPNNNNNQNNQNNQNMQNNMQQMHNQNNNQ","n":["ALL","DEFAULT","Debug","Error","Info","LogLevel","Logger","None","Trace","Warn","borrow","borrow_mut","clone","clone_into","cmp","debug","default","eq","error","fmt","from","info","into","is_enabled","log","parse","partial_cmp","print","print","println","proc_name","set_logger","to_owned","trace","try_from","try_into","type_id","warn"],"q":[[0,"hyperion_log"],[38,"core::cmp"],[39,"core::fmt"],[40,"core::fmt"],[41,"core::fmt"],[42,"core::result"],[43,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,7,0,1,1,7,0,0,7,0,1,0,1,1,1,0],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],3],0,[[],1],[[1,1],4],0,[[1,5],6],[-1,-1,[]],0,[-1,-2,[],[]],[[7,1],4],0,[8,[[9,[1]]]],[[1,1],[[9,[3]]]],[[7,1,10],2],0,0,[7,[[9,[11]]]],[7,2],[-1,-2,[],[]],0,[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0],"c":[],"p":[[6,"LogLevel",0],[1,"tuple"],[6,"Ordering",38],[1,"bool"],[5,"Formatter",39],[8,"Result",39],[10,"Logger",0],[1,"str"],[6,"Option",40],[5,"Arguments",39],[5,"ArcStr",41],[6,"Result",42],[5,"TypeId",43]],"b":[]},\
"hyperion_log_multi":{"doc":"","t":"HHH","n":["init_logger","set_fbo","set_qemu"],"q":[[0,"hyperion_log_multi"],[3,"hyperion_log"]],"d":["","",""],"i":[0,0,0],"f":[[[],1],[2,1],[2,1]],"c":[],"p":[[1,"tuple"],[6,"LogLevel",3]],"b":[]},\
"hyperion_macros":{"doc":"","t":"QQQQQQQ","n":["array","bmp_to_font","build_rev","build_time","gen_int_handlers","get_int_handlers","rtc_year"],"q":[[0,"hyperion_macros"]],"d":["","","","","","",""],"i":[0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0],"c":[],"p":[],"b":[]},\
"hyperion_mem":{"doc":"","t":"IFNNNQNNHNHCHNNNCJFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPFPFPIKGPMNNNNNNNNNNNNMNNNNNNNNNNNNMMMMMNNNNNNNNNNNNMM","n":["KernelSlabAlloc","Pfa","alloc","borrow","borrow_mut","debug_phys_addr","free","from","from_higher_half","into","is_higher_half","pmm","to_higher_half","try_from","try_into","type_id","vmm","PFA","PageFrame","PageFrameAllocator","alloc","allocate","as_bytes","as_bytes_mut","bitmap_len","borrow","borrow","borrow_mut","borrow_mut","byte_len","deallocate","fmt","fmt","free","free_mem","from","from","into","into","is_empty","leak","len","new","physical_addr","reserved_mem","to_string","total_mem","try_from","try_from","try_into","try_into","type_id","type_id","usable_mem","used_mem","virtual_addr","Err","Handled","Kernel","NotHandled","Ok","PageFaultResult","PageMapImpl","Privilege","User","activate","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","current","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","is_mapped","map","new","page_fault","phys_to_virt","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unmap","virt_to_phys"],"q":[[0,"hyperion_mem"],[17,"hyperion_mem::pmm"],[56,"hyperion_mem::vmm"],[110,"hyperion_slab_alloc"],[111,"x86_64::addr"],[112,"x86_64::addr"],[113,"core::any"],[114,"core::alloc::layout"],[115,"core::ptr::non_null"],[116,"core::alloc"],[117,"core::fmt"],[118,"core::fmt"],[119,"core::ops::range"],[120,"x86_64::structures::paging::page_table"],[121,"core::option"]],"d":["","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Physical memory management","","","","","","","","","Alloc pages","","","","","","","","","number of bytes","","","","Free up pages","Currently free usable memory in bytes","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Leak the PageFrame to get a static mut ref to it","number of pages","Safety","physical address of the first page","Reserved memory in bytes","","System total memory in bytes","","","","","","","System usable memory in bytes","Currently used usable memory in bytes","","Contains the error value","","","","Contains the success value","inversed to make <code>?</code> more useful","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,28,28,28,0,28,28,0,28,0,0,0,28,28,28,0,0,0,0,10,10,11,11,10,10,11,10,11,11,10,10,11,10,10,10,11,10,11,11,11,11,11,11,10,10,10,10,11,10,11,10,11,10,10,11,26,0,21,0,26,0,0,0,21,20,21,22,23,21,22,23,21,22,23,21,22,23,20,21,22,23,21,22,23,21,22,23,21,22,23,20,20,20,20,20,21,22,23,21,22,23,21,22,23,21,22,23,20,20],"f":[0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],0,[2,3],[-1,-1,[]],[4,5],[-1,-2,[],[]],[6,7],0,[5,4],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,0,0,0,[[10,1],11],[[10,12],[[8,[[15,[[14,[13]]]],16]]]],[11,[[14,[13]]]],[11,[[14,[13]]]],[10,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,1],[[10,[15,[13]],12],3],[[10,17],18],[[11,17],18],[[10,11],3],[10,1],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,7],[11,[[14,[13]]]],[11,1],[[5,1],11],[11,5],[10,1],[-1,19,[]],[10,1],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[10,1],[10,1],[11,4],0,0,0,0,0,0,0,0,0,[20,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[22,22],[23,23],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],20],[[21,21],7],[[22,22],7],[[23,23],7],[[21,17],18],[[22,17],18],[[23,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[20,[24,[4]],25],7],[[20,[24,[4]],5,25],3],[[],20],[[20,4,21],26],[[20,5],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[[20,[24,[4]]],3],[[20,4],[[27,[5]]]]],"c":[],"p":[[1,"usize"],[5,"PageFrames",110],[1,"tuple"],[5,"VirtAddr",111],[5,"PhysAddr",111],[1,"u64"],[1,"bool"],[6,"Result",112],[5,"TypeId",113],[5,"PageFrameAllocator",17],[5,"PageFrame",17],[5,"Layout",114],[1,"u8"],[1,"slice"],[5,"NonNull",115],[5,"AllocError",116],[5,"Formatter",117],[8,"Result",117],[5,"String",118],[10,"PageMapImpl",56],[6,"Privilege",56],[5,"Handled",56],[5,"NotHandled",56],[5,"Range",119],[5,"PageTableFlags",120],[8,"PageFaultResult",56],[6,"Option",121],[5,"Pfa",0]],"b":[]},\
"hyperion_num_postfix":{"doc":"","t":"TTKFNNNNNNNNNNNNNN","n":["NUM_1000","NUM_1024","NumberPostfix","NumberPostfixed","borrow","borrow_mut","clone","fmt","fmt","from","into","into_inner","postfix","postfix_binary","scale","try_from","try_into","type_id"],"q":[[0,"hyperion_num_postfix"],[18,"core::clone"],[19,"core::fmt"],[20,"core::fmt"],[21,"core::any"]],"d":["","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[7,7,0,0,1,1,1,1,1,1,1,1,7,7,1,1,1,1],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],3],4,5],[[[1,[-1]],3],4,6],[-1,-1,[]],[-1,-2,[],[]],[[[1,[-1]]],-1,[]],[7,[[1,[7]]]],[7,[[1,[7]]]],[[[1,[-1]]],8,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[5,"NumberPostfixed",0],[10,"Clone",18],[5,"Formatter",19],[8,"Result",19],[10,"Display",19],[10,"Debug",19],[10,"NumberPostfix",0],[1,"str"],[6,"Result",20],[5,"TypeId",21]],"b":[[7,"impl-Display-for-NumberPostfixed%3CT%3E"],[8,"impl-Debug-for-NumberPostfixed%3CT%3E"]]},\
"hyperion_random":{"doc":"","t":"KKKKRKNMNMNNNNHHMMHNNNMNM","n":["CryptoRng","Fill","Rng","RngCore","Seed","SeedableRng","fill","fill_bytes","from_rng","from_seed","gen","gen_bool","gen_range","gen_ratio","next_fast_rng","next_secure_rng","next_u32","next_u64","provide_entropy","sample","sample_iter","seed_from_u64","try_fill","try_fill","try_fill_bytes"],"q":[[0,"hyperion_random"],[25,"core::marker"],[26,"rand_core::error"],[27,"core::result"],[28,"core::default"],[29,"core::convert"],[30,"rand::distributions::uniform"],[31,"rand::distributions::uniform"],[32,"rand_chacha::chacha"],[33,"rand::distributions::distribution"],[34,"rand::distributions::distribution"]],"d":["A marker trait used to indicate that an <code>RngCore</code> or …","Types which may be filled with random data","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","","","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data."],"i":[0,0,0,0,9,0,1,5,9,9,1,1,1,1,0,0,5,5,0,1,1,9,3,1,5],"f":[0,0,0,0,0,0,[[1,-1],2,[3,4]],[[5,[7,[6]]],2],[-1,[[11,[[9,[],[[8,[-2]]]],10]]],5,[4,12,[13,[[7,[6]]]]]],[-1,[[9,[],[[8,[-1]]]]],[4,12,[13,[[7,[6]]]]]],[1,-1,[]],[[1,14],15],[[1,-2],-1,16,[[17,[-1]]]],[[1,18,18],15],[[],19],[[],[[21,[20]]]],[5,18],[5,22],[[[7,[6]]],2],[[1,-2],-1,[],[[23,[-1]]]],[[1,-2],[[24,[-2,1,-1]]],[],[[23,[-1]]]],[22,[[9,[],[[8,[-1]]]]],[4,12,[13,[[7,[6]]]]]],[[3,-1],[[11,[2,10]]],[1,4]],[[1,-1],[[11,[2,10]]],[3,4]],[[5,[7,[6]]],[[11,[2,10]]]]],"c":[],"p":[[10,"Rng",0],[1,"tuple"],[10,"Fill",0],[10,"Sized",25],[10,"RngCore",0],[1,"u8"],[1,"slice"],[17,"Seed"],[10,"SeedableRng",0],[5,"Error",26],[6,"Result",27],[10,"Default",28],[10,"AsMut",29],[1,"f64"],[1,"bool"],[10,"SampleUniform",30],[10,"SampleRange",30],[1,"u32"],[5,"ChaCha8Rng",31],[5,"ChaCha20Rng",31],[6,"Option",32],[1,"u64"],[10,"Distribution",33],[5,"DistIter",33]],"b":[]},\
"hyperion_scheduler":{"doc":"","t":"JJCCCHHCCHHHHHHCHHHHHCHHHGFPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOFNNNNNNNNNNNNNNNHHHCFFIFFNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHNNOONOONNOOHNNOONOONNOONNNNNNNNNNNNNNNNNNNNFFIINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNHNNNNHNNNHGPGPPPJFFFKPPPJJJJFFGFONNOMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNONNNNOOHOOONHNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNO","n":["READY","RUNNING","cleanup","condvar","futex","idle","init","ipc","lock","process","recv","rename","running","schedule","send","sleep","sleep","sleep_until","spawn","spawn_userspace","stop","task","task","yield_now","yield_now_wait","Cleanup","CleanupTask","Drop","Ready","Sleep","Wait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","init","init","into","into","run","run","task","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","addr","deadline","val","Condvar","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","notify_all","notify_one","try_from","try_into","type_id","wait","cleanup","wait","wake","pipe","Channel","Closed","Pipe","Receiver","Sender","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","channel_with","clone","clone","clone","clone_into","clone_into","clone_into","close","close","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","fmt","from","from","from","from","init","init","init","init","into","into","into","into","new","new_pipe","new_pipe","pipe","pipe_with","recv","recv","recv","recv","recv","recv_closed","recv_closed","recv_closed","recv_slice","recv_slice","recv_wait","recv_wait","send","send","send","send","send","send_closed","send_closed","send_closed","send_slice","send_slice","send_wait","send_wait","split","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wait_closed","wait_closed","weak_recv_slice","weak_send_slice","AutoFutex","Futex","Mutex","MutexGuard","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","lock","lock","new","new","try_from","try_from","try_into","try_into","try_lock","try_lock","type_id","type_id","unlock","unlock","SleepingTask","borrow","borrow_mut","cmp","deref","deref_mut","drop","eq","finished","from","init","into","partial_cmp","push","try_from","try_into","type_id","wake_up_completed","AllocErr","Dropping","FreeErr","InvalidAddr","InvalidAlloc","OutOfVirtMem","PROCESSES","PageAllocs","Pid","Process","ProcessExt","Ready","Running","Sleeping","TASKS_DROPPING","TASKS_READY","TASKS_RUNNING","TASKS_SLEEPING","Task","TaskInner","TaskState","Tid","address_space","alloc","alloc_at","allocs","as_any","as_str","bitmap","bootloader","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","ext","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free","from","from","from","from","from","from","from","from","from","from","hash","hash","heap_bottom","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","is_dropping","is_ready","is_running","is_sleeping","job","kernel_stack","name","nanos","new","new","new","new","new_any","next","next","next_tid","num","num","partial_cmp","partial_cmp","pid","process","processes","should_terminate","simple_ipc","state","swap_state","switch_because","thread","thread_any","threads","tid","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user_stack"],"q":[[0,"hyperion_scheduler"],[25,"hyperion_scheduler::cleanup"],[60,"hyperion_scheduler::cleanup::Cleanup"],[63,"hyperion_scheduler::condvar"],[79,"hyperion_scheduler::futex"],[82,"hyperion_scheduler::ipc"],[83,"hyperion_scheduler::ipc::pipe"],[184,"hyperion_scheduler::lock"],[218,"hyperion_scheduler::sleep"],[236,"hyperion_scheduler::task"],[443,"time::duration"],[444,"core::iter::traits::iterator"],[445,"core::ops::function"],[446,"core::marker"],[447,"alloc::sync"],[448,"core::result"],[449,"arcstr::arc_str"],[450,"core::convert"],[451,"hyperion_instant"],[452,"core::fmt"],[453,"core::fmt"],[454,"lock_api::mutex"],[455,"x86_64::addr"],[456,"core::sync::atomic"],[457,"core::clone"],[458,"core::marker"],[459,"core::cmp"],[460,"spin::mutex"],[461,"core::option"],[462,"x86_64::structures::paging::page_table"],[463,"x86_64::addr"],[464,"core::hash"],[465,"hyperion_arch_x86_64::stack"],[466,"alloc::boxed"],[467,"alloc::vec"],[468,"alloc::string"]],"d":["","","","","","","init this processors scheduling and immediately switch to …","","","","","","","spawn a new process running this closure or a function or …","","","","","spawn a new thread on the same process","spawn a new thread in the currently running process","destroy the current thread and switch to another thread","","","switch to another thread","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","post switch cleanup","if the value at <code>addr</code> is eq <code>val</code>, go to sleep","wake up threads waiting for events on this <code>addr</code>","","simple P2P 2-copy IPC channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","wait for the receiver to be closed","","","","","","","","","","the actual data channel","the actual data channel","wait for the sender to be closed","","","","","","","","","","","","","","","","","","","","","","","","","Sender doesn’t keep the recv side open","Receiver doesn’t keep the send side open","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Warning","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","A process, each process can have multiple ‘tasks’ …","","","","","","","","","","","","","process address space","","","a store for all allocated (and mapped) physical pages","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extra process info added by the kernel (like file …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","process heap beginning, the end of the user process","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the task state is <code>Dropping</code>.","Returns <code>true</code> if the task state is <code>Ready</code>.","Returns <code>true</code> if the task state is <code>Running</code>.","Returns <code>true</code> if the task state is <code>Sleeping</code>.","thread_entry runs this function once, and stops the …","lazy initialized kernel-space stack, also used when …","process name","cpu time this process (all tasks) has used in nanoseconds","","","","","","","","next thread id","","","","","process id","a shared process ref, multiple tasks can point to the same …","","","naïve PID based IPC","task state, ‘is the task waiting or what?’","","","","","number of threads in this process","thread id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lazy initialized user-space stack"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,25,22,25,22,22,22,25,22,25,22,25,22,22,25,22,25,22,25,22,25,22,22,22,25,22,25,22,25,22,62,63,62,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,0,0,0,0,0,0,0,37,34,32,33,37,34,32,33,0,0,34,32,33,34,32,33,32,33,36,37,34,32,33,37,34,32,33,37,34,32,32,33,33,34,34,37,34,32,33,37,34,32,33,37,34,32,33,37,36,37,0,0,0,37,33,36,37,37,36,37,37,33,36,37,0,37,32,36,37,37,36,37,37,32,36,37,37,34,32,33,37,34,32,33,37,34,32,33,37,34,32,33,32,33,32,33,0,0,0,0,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,0,40,40,40,40,40,40,40,0,40,40,40,40,0,40,40,40,0,0,51,0,55,55,48,0,0,0,0,0,51,51,51,0,0,0,0,0,0,0,0,7,7,7,7,49,51,52,19,7,56,52,18,54,48,55,19,51,7,56,52,18,54,48,55,19,51,18,54,48,55,19,51,18,54,48,55,19,51,18,54,52,7,56,56,52,18,54,48,55,19,19,51,7,56,52,18,54,48,55,19,51,7,7,56,56,52,18,54,48,55,19,51,18,54,48,55,51,7,18,52,18,18,54,48,55,51,7,7,56,52,18,54,48,55,19,19,51,18,54,7,7,56,52,18,54,48,55,19,51,7,56,52,18,54,48,55,19,51,51,51,51,51,56,56,7,7,7,18,54,19,19,18,54,7,18,54,18,54,7,56,0,7,7,56,19,0,19,19,7,56,18,54,48,55,19,51,18,7,56,52,18,54,48,55,19,51,7,56,52,18,54,48,55,19,51,7,56,52,18,54,48,55,19,51,56],"f":[0,0,0,0,0,[[],[[0,[[3,[],[[1,[2]]]]]]]],[-1,4,[5,6]],0,0,[[],[[8,[7]]]],[[[10,[9]]],[[13,[11,12]]]],[-1,14,[[16,[15]]]],[[],17],[-1,18,[[16,[19]]]],[[18,[10,[9]]],[[13,[14,12]]]],0,[2,14],[20,14],[-1,14,[5,6]],[[21,21],14],[[],4],0,[[],19],[[],14],[[],14],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[22,22],[[-1,-2],14,[],[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,14],[11,14],[[22,23],24],[-1,-1,[]],[-1,-1,[]],[[],11],[[],11],[-1,-2,[],[]],[-1,-2,[],[]],[25,14],[[22,19],14],[[22,19],25],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[11,-1,[]],[11,-1,[]],[11,14],[-1,-1,[]],[[],11],[-1,-2,[],[]],[[],27],[27,14],[27,14],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,26,[]],[[27,[29,[28,-1]]],[[29,[28,-1]]],[]],[[30,11,19],14],[[31,11],14],[[31,11],14],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[14,[[32,[9]],[33,[9]]]]]],[11,[[14,[[32,[9]],[33,[9]]]]]],[34,34],[[[32,[-1]]],[[32,[-1]]],35],[[[33,[-1]]],[[33,[-1]]],35],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[[32,[-1]]],14,[]],[[[33,[-1]]],14,[]],[[],36],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,14],[11,14],[[[32,[-1]]],14,[]],[11,14],[11,14],[[[33,[-1]]],14,[]],[[34,34],17],[[34,23],24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],11],[[],11],[[],11],[[],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,[[37,[-1]]],[]],[[],36],[[],[[37,[9]]]],[[],[[8,[[37,[9]]]]]],[11,[[8,[[37,[9]]]]]],[[[10,[9]]],[[13,[11,12]]]],[[[37,[-1]]],[[13,[-1,34]]],[]],[[[33,[-1]]],[[13,[-1,34]]],[]],0,0,[[[37,[-1]]],14,[]],0,0,[[[37,[-1]],[10,[-1]]],[[13,[11,34]]],38],[[[33,[-1]],[10,[-1]]],[[13,[11,34]]],38],0,0,[[18,[10,[9]]],[[13,[14,12]]]],[[[37,[-1]],-1],[[13,[14,34]]],[]],[[[32,[-1]],-1],[[13,[14,34]]],[]],0,0,[[[37,[-1]]],14,[]],0,0,[[[37,[-1]],[10,[-1]]],[[13,[14,34]]],38],[[[32,[-1]],[10,[-1]]],[[13,[14,34]]],38],0,0,[[[37,[-1]]],[[14,[[32,[-1]],[33,[-1]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[[[32,[-1]]],14,[]],[[[33,[-1]]],14,[]],[[[32,[-1]],[10,[-1]]],[[13,[11,34]]],38],[[[33,[-1]],[10,[-1]]],[[13,[14,34]]],38],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,14],[11,14],[-1,-1,[]],[-1,-1,[]],[[],11],[[],11],[-1,-2,[],[]],[-1,-2,[],[]],[28,14],[39,14],[[],28],[[],39],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[28,17],[39,17],[-1,26,[]],[-1,26,[]],[28,14],[39,14],0,[-1,-2,[],[]],[-1,-2,[],[]],[[40,40],41],[11,-1,[]],[11,-1,[]],[11,14],[[40,40],17],[[[45,[[44,[[43,[[42,[40]]]]]]]]],[[0,[[3,[],[[1,[19]]]]]]]],[-1,-1,[]],[[],11],[-1,-2,[],[]],[[40,40],[[45,[41]]]],[[20,19],14],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,26,[]],[[[45,[[44,[[43,[[42,[40]]]]]]]]],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[7,11,46],[[13,[[14,[47,30]],48]]]],[[7,11,47,46],[[13,[30,48]]]],0,[49,50],[51,12],[52,[[44,[53]]]],[[],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[18,18],[54,54],[48,48],[55,55],[19,19],[51,51],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[18,18],41],[[54,54],41],[[],52],[11,-1,[]],[56,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[19,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,14],[7,14],[11,14],[56,14],[11,14],[11,14],[11,14],[11,14],[11,14],[11,14],[11,14],[[18,18],17],[[54,54],17],[[48,48],17],[[55,55],17],[[51,51],17],0,[18,[[45,[[8,[7]]]]]],[[52,23],24],[[18,23],24],[[18,23],24],[[54,23],24],[[48,23],24],[[55,23],24],[[51,23],24],[[7,11,47],[[13,[14,55]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,19,[5,6]],[-1,-1,[]],[-1,-1,[]],[[18,-1],14,57],[[54,-1],14,57],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[51,17],[51,17],[51,17],[51,17],0,0,0,0,[[18,15,58],[[8,[7]]]],[11,18],[11,54],[-1,19,[5,6]],[[[59,[5]],15],19],[[],18],[7,54],0,[18,11],[54,11],[[18,18],[[45,[41]]]],[[54,54],[[45,[41]]]],0,0,[[],[[60,[[8,[7]]]]]],0,0,0,[[19,51],51],[[19,51,22],14],[[[8,[7]],-1],19,[5,6]],[[[8,[7]],[59,[5]]],19],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,61,[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],0],"c":[],"p":[[17,"Item"],[5,"Duration",443],[10,"Iterator",444],[1,"never"],[10,"FnOnce",445],[10,"Send",446],[5,"Process",236],[5,"Arc",447],[1,"u8"],[1,"slice"],[1,"usize"],[1,"str"],[6,"Result",448],[1,"tuple"],[5,"ArcStr",449],[10,"Into",450],[1,"bool"],[5,"Pid",236],[5,"Task",236],[5,"Instant",451],[1,"u64"],[6,"Cleanup",25],[5,"Formatter",452],[8,"Result",452],[5,"CleanupTask",25],[5,"TypeId",453],[5,"Condvar",63],[5,"Futex",184],[5,"MutexGuard",454],[5,"PhysAddr",455],[5,"AtomicUsize",456],[5,"Sender",83],[5,"Receiver",83],[5,"Closed",83],[10,"Clone",457],[8,"Pipe",83],[5,"Channel",83],[10,"Copy",446],[5,"AutoFutex",184],[5,"SleepingTask",218],[6,"Ordering",458],[5,"Reverse",458],[5,"BinaryHeap",459],[5,"MutexGuard",460],[6,"Option",461],[5,"PageTableFlags",462],[5,"VirtAddr",455],[6,"AllocErr",236],[10,"ProcessExt",236],[10,"Any",453],[6,"TaskState",236],[5,"PageAllocs",236],[5,"Bitmap",463],[5,"Tid",236],[6,"FreeErr",236],[5,"TaskInner",236],[10,"Hasher",464],[5,"AddressSpace",465],[5,"Box",466],[5,"Vec",467],[5,"String",468],[15,"Wait",60],[15,"Sleep",60]],"b":[[338,"impl-Display-for-Pid"],[339,"impl-Debug-for-Pid"]]},\
"hyperion_slab_alloc":{"doc":"Slab allocator","t":"KFFFFMNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNONNNNNNNNNNNN","n":["PageFrameAllocator","PageFrames","Slab","SlabAllocator","SlabAllocatorStats","alloc","alloc","alloc","alloc","as_bytes","as_bytes_mut","as_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_len","dealloc","default","fmt","free","free","free","from","from","from","from","get_slab","into","into","into","into","is_empty","len","new","new","new","pop","push","size","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"hyperion_slab_alloc"],[56,"core::alloc::layout"],[57,"lock_api::mutex"],[58,"core::fmt"],[59,"core::fmt"],[60,"core::option"],[61,"core::result"],[62,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","Safety","Safety","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Safety","","","pop a block from the linked list","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,6,3,3,8,2,2,2,2,3,8,9,2,3,8,9,2,3,3,9,6,3,8,2,3,8,9,3,2,3,8,9,2,2,2,3,8,8,8,8,2,3,8,9,2,3,8,9,2,3,8,9],"f":[0,0,0,0,0,[1,2],[[[3,[-1,-2]],4],5,6,7],[[[3,[-1,-2]],1],5,6,7],[[[8,[-1,-2]],5,9],5,6,7],[2,[[10,[5]]]],[2,[[10,[5]]]],[2,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,1],[[[3,[-1,-2]],5,4],11,6,7],[[],[[3,[-1,-2]]],[],7],[[9,12],13],[2,11],[[[3,[-1,-2]],[14,[5]]],11,6,7],[[[8,[-1,-2]],9,[14,[5]]],11,6,7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[3,[-1,-2]],1],[[15,[[11,[5,[8,[-1,-2]]]]]]],[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,16],[2,1],[[5,1],2],[[],[[3,[-1,-2]]],[],7],[1,[[8,[-1,-2]]],[],7],[[[8,[-1,-2]],5,9],5,6,7],[[[8,[-1,-2]],[14,[5]]],11,6,7],0,[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]]],"c":[],"p":[[1,"usize"],[5,"PageFrames",0],[5,"SlabAllocator",0],[5,"Layout",56],[1,"u8"],[10,"PageFrameAllocator",0],[10,"RawMutex",57],[5,"Slab",0],[5,"SlabAllocatorStats",0],[1,"slice"],[1,"tuple"],[5,"Formatter",58],[8,"Result",58],[5,"NonNull",59],[6,"Option",60],[1,"bool"],[6,"Result",61],[5,"TypeId",62]],"b":[[6,"impl-GlobalAlloc-for-SlabAllocator%3CP,+Lock%3E"],[7,"impl-SlabAllocator%3CP,+Lock%3E"]]},\
"hyperion_static_str":{"doc":"","t":"FNNNNNNNNNNNNNNNNNN","n":["StaticStr","as_bytes","as_str","as_str_checked","borrow","borrow_mut","clone","deref","eq","fmt","fmt","from","from_utf8","from_utf8_unchecked","hash","into","try_from","try_into","type_id"],"q":[[0,"hyperion_static_str"],[19,"core::str::error"],[20,"core::result"],[21,"core::fmt"],[22,"core::fmt"],[23,"core::any"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","Safety","","Calls <code>U::from(self)</code>.","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[1,[[3,[2]]]],[1,4],[1,[[6,[4,5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[1,-1,[]],[[1,1],7],[[1,8],9],[[1,8],9],[-1,-1,[]],[[[10,[2]]],[[6,[1,5]]]],[[[10,[2]]],1],[[1,-1],11,12],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,13,[]]],"c":[],"p":[[5,"StaticStr",0],[1,"u8"],[1,"slice"],[1,"str"],[5,"Utf8Error",19],[6,"Result",20],[1,"bool"],[5,"Formatter",21],[8,"Result",21],[1,"array"],[1,"tuple"],[10,"Hasher",22],[5,"TypeId",23]],"b":[[9,"impl-Display-for-StaticStr%3CSIZE%3E"],[10,"impl-Debug-for-StaticStr%3CSIZE%3E"]]},\
"hyperion_sync":{"doc":"","t":"FNNNNQNNQNNNN","n":["TakeOnce","borrow","borrow_mut","from","into","last","new","none","once","take","try_from","try_into","type_id"],"q":[[0,"hyperion_sync"],[13,"lock_api::mutex"],[14,"core::option"],[15,"core::result"],[16,"core::any"]],"d":["","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","CPUs race and only the last one returns true","","","CPUs race and only the first one returns true","","","",""],"i":[0,1,1,1,1,0,1,1,0,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],0,[-1,[[1,[-1,-2]]],[],2],[[],[[1,[-1,-2]]],[],2],0,[[[1,[-1,-2]]],[[3,[-1]]],[],2],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]]],"c":[],"p":[[5,"TakeOnce",0],[10,"RawMutex",13],[6,"Option",14],[6,"Result",15],[5,"TypeId",16]],"b":[]},\
"hyperion_syscall":{"doc":"","t":"HHHHHCHCHHHHCHHHHHHCHHHHHHHHHHHHHHHHHHHHTTTTPFTTTTTTTTTTTTTTPTITTTNNNNNNNNNNNNNNNNNTTTFFFTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSTTFTFFFTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["accept","bind","close","connect","dup","err","exit","fs","futex_wait","futex_wake","get_pid","get_tid","id","listen","log","map_file","metadata","nanosleep","nanosleep_until","net","open","open_dir","palloc","pfree","pthread_spawn","read","recv","rename","send","socket","syscall_0","syscall_1","syscall_2","syscall_3","syscall_4","syscall_5","timestamp","unmap_file","write","yield_now","ALREADY_EXISTS","BAD_FILE_DESCRIPTOR","CLOSED","CONNECTION_REFUSED","Err","Error","FILESYSTEM_ERROR","INTERRUPTED","INVALID_ADDRESS","INVALID_ALLOC","INVALID_DOMAIN","INVALID_FLAGS","INVALID_TYPE","INVALID_UTF8","NOT_A_DIRECTORY","NOT_A_FILE","NOT_FOUND","NO_SUCH_PROCESS","OUT_OF_MEMORY","OUT_OF_VIRTUAL_MEMORY","Ok","PERMISSION_DENIED","Result","UNEXPECTED_EOF","UNKNOWN_PROTOCOL","WRITE_ZERO","as_str","borrow","borrow_mut","clone","cmp","decode","encode","eq","fmt","fmt","from","hash","into","partial_cmp","try_from","try_into","type_id","APPEND","CREATE","CREATE_NEW","FileDesc","FileOpenFlags","Metadata","READ","READ_WRITE","TRUNC","WRITE","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","complement","contains","difference","empty","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","insert","intersection","intersects","into","into","into","into_iter","is_all","is_empty","is_empty","iter","iter_names","len","len","not","partial_cmp","partial_cmp","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","zeroed","ACCEPT","BIND","CLOSE","CONNECT","DUP","EXIT","FUTEX_WAIT","FUTEX_WAKE","GET_PID","GET_TID","LISTEN","LOG","MAP_FILE","METADATA","NANOSLEEP","NANOSLEEP_UNTIL","OPEN","OPEN_DIR","PALLOC","PFREE","PTHREAD_SPAWN","READ","RECV","RENAME","SEND","SOCKET","TIMESTAMP","UNMAP_FILE","WRITE","YIELD_NOW","LOCAL","LOCAL","Protocol","STREAM","SocketDesc","SocketDomain","SocketType","UNIX","UNIX","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","cmp","cmp","cmp","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","partial_cmp","partial_cmp","partial_cmp","partial_cmp","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"hyperion_syscall"],[40,"hyperion_syscall::err"],[83,"hyperion_syscall::fs"],[173,"hyperion_syscall::id"],[203,"hyperion_syscall::net"],[260,"core::sync::atomic"],[261,"core::ptr::non_null"],[262,"core::option"],[263,"core::cmp"],[264,"core::fmt"],[265,"core::fmt"],[266,"core::result"],[267,"core::any"],[268,"core::iter::traits::collect"],[269,"bitflags::iter"],[270,"bitflags::iter"]],"d":["accept a connection on a socket","bind a name to a socket","close a file","connect to a socket","duplicate a file descriptor","","exit the process with a code","","futex wait if value at <code>addr</code> is <code>val</code>","wake <code>num</code> threads that are sleeping on this <code>addr</code>","get the current process id","get the current thread id","","start listening for connections on a socket","print a string into kernel logs","map file contents to memory (mmap)","file metadata (stat)","context switch from this process and switch back when <code>nanos</code>…","context switch from this process and switch back when …","","open a file","open a directory","allocate physical pages and map to heap","deallocate physical pages and unmap from heap","spawn a new pthread for the same process","read from a file","read data from a socket","rename the current process","send data to a socket","create a socket","Safety","Safety","Safety","Safety","Safety","Safety","u128 nanoseconds since boot","unmap device/file mapped memory (munmap)","write into a file","context switch from this process, no guarantees about …","","","","","Contains the error value","","","","","","","","","","","","","","","","Contains the success value","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","writes append to the file","create file if it doesn’t already exist","create file if it doesn’t already exist and err if it …","","","","open file with read caps","open file with read and write caps","truncate file on open (if the file already existed)","open file with write caps","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","","Yield a set of contained flags values.","Yield a set of contained named flags values.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,21,21,2,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,2,21,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,14,14,14,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,5,14,12,5,14,12,5,14,12,5,14,12,14,14,14,14,5,14,12,14,5,14,14,14,14,14,12,5,14,12,14,14,14,14,14,14,14,14,14,5,14,12,14,14,14,12,14,14,12,12,14,5,14,12,14,14,14,14,14,14,5,14,12,5,14,12,5,14,12,14,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,19,0,18,0,0,0,17,19,1,17,18,19,1,17,18,19,1,17,18,19,1,17,18,19,1,17,18,19,1,17,18,19,1,17,18,19,1,17,18,19,1,17,18,19,1,17,18,19,1,17,18,19,1,17,18,19],"f":[[1,[[2,[1]]]],[[1,3],[[2,[4]]]],[5,[[2,[4]]]],[[1,3],[[2,[4]]]],[[5,5],[[2,[5]]]],0,[6,7],0,[[8,9],4],[[8,9],4],[[],9],[[],9],0,[1,[[2,[4]]]],[3,[[2,[4]]]],[[5,[11,[[10,[4]]]],9,9],[[2,[[10,[4]]]]]],[[5,12],[[2,[4]]]],[13,4],[13,4],0,[[3,14,9],[[2,[5]]]],[3,[[2,[5]]]],[9,[[2,[[11,[[10,[15]]]]]]]],[[[10,[15]],9],[[2,[4]]]],[9,4],[[5,[16,[15]]],[[2,[9]]]],[[1,[16,[15]],9],[[2,[9]]]],[3,[[2,[4]]]],[[1,[16,[15]],9],[[2,[4]]]],[[17,18,19],[[2,[1]]]],[9,[[2,[9]]]],[[9,9],[[2,[9]]]],[[9,9,9],[[2,[9]]]],[[9,9,9,9],[[2,[9]]]],[[9,9,9,9,9],[[2,[9]]]],[[9,9,9,9,9,9],[[2,[9]]]],[[],[[2,[20]]]],[[5,[10,[4]],9],[[2,[4]]]],[[5,[16,[15]]],[[2,[9]]]],[[],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[21,3],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[[21,21],22],[9,[[2,[9]]]],[[[2,[9]]],9],[[21,21],23],[[21,24],25],[[21,24],25],[-1,-1,[]],[[21,-1],4,26],[-1,-2,[],[]],[[21,21],[[11,[22]]]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,28,[]],0,0,0,0,0,0,0,0,0,0,[[],14],[[14,14],14],[[14,14],4],[[14,14],14],[[14,14],4],[14,9],[14,9],[[14,14],14],[[14,14],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,5],[14,14],[12,12],[[5,5],22],[[14,14],22],[[12,12],22],[14,14],[[14,14],23],[[14,14],14],[[],14],[[5,5],23],[[14,14],23],[[12,12],23],[[14,-1],4,[[30,[],[[29,[14]]]]]],[[5,24],25],[[14,24],25],[[14,24],25],[[14,24],25],[[14,24],25],[[14,24],25],[[12,24],25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[9,[[11,[14]]]],[9,14],[9,14],[9,14],[-1,14,[[30,[],[[29,[14]]]]]],[3,[[11,[14]]]],[[14,14],4],[[14,14],14],[[14,14],23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,-1,[]],[14,23],[14,23],[12,23],[14,[[31,[14]]]],[14,[[32,[14]]]],[12,9],0,[14,14],[[5,5],[[11,[22]]]],[[14,14],[[11,[22]]]],[[12,12],[[11,[22]]]],[[14,14],4],[[14,14,23],4],[[14,14],14],[[14,14],4],[[14,14],14],[[14,14],4],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[[14,14],14],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[17,17],[18,18],[19,19],[[1,1],22],[[17,17],22],[[18,18],22],[[19,19],22],[[1,1],23],[[17,17],23],[[18,18],23],[[19,19],23],[[1,24],25],[[17,24],25],[[18,24],25],[[19,24],25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[11,[22]]]],[[17,17],[[11,[22]]]],[[18,18],[[11,[22]]]],[[19,19],[[11,[22]]]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]]],"c":[],"p":[[5,"SocketDesc",203],[8,"Result",40],[1,"str"],[1,"tuple"],[5,"FileDesc",83],[1,"i64"],[1,"never"],[5,"AtomicUsize",260],[1,"usize"],[5,"NonNull",261],[6,"Option",262],[5,"Metadata",83],[1,"u64"],[5,"FileOpenFlags",83],[1,"u8"],[1,"slice"],[5,"SocketDomain",203],[5,"SocketType",203],[5,"Protocol",203],[1,"u128"],[5,"Error",40],[6,"Ordering",263],[1,"bool"],[5,"Formatter",264],[8,"Result",264],[10,"Hasher",265],[6,"Result",266],[5,"TypeId",267],[17,"Item"],[10,"IntoIterator",268],[5,"Iter",269],[5,"IterNames",269]],"b":[[74,"impl-Display-for-Error"],[75,"impl-Debug-for-Error"],[98,"impl-FileOpenFlags"],[99,"impl-Flags-for-FileOpenFlags"],[123,"impl-Binary-for-FileOpenFlags"],[124,"impl-UpperHex-for-FileOpenFlags"],[125,"impl-Octal-for-FileOpenFlags"],[126,"impl-LowerHex-for-FileOpenFlags"],[127,"impl-Debug-for-FileOpenFlags"],[133,"impl-FileOpenFlags"],[134,"impl-Flags-for-FileOpenFlags"]]},\
"hyperion_timer":{"doc":"","t":"JJFNNNONNNNNNNNNHNNNO","n":["TIMER_DEADLINES","TIMER_HANDLER","TimerWaker","borrow","borrow_mut","cmp","deadline","deref","deref_mut","drop","eq","fmt","from","init","into","partial_cmp","provide_sleep_wake","try_from","try_into","type_id","waker"],"q":[[0,"hyperion_timer"],[21,"core::cmp"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::result"],[25,"core::any"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","interrupt provided wakeup to a sleep","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],2],0,[3,-1,[]],[3,-1,[]],[3,4],[[1,1],5],[[1,6],7],[-1,-1,[]],[[],3],[-1,-2,[],[]],[[1,1],[[8,[2]]]],[[],4],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0],"c":[],"p":[[5,"TimerWaker",0],[6,"Ordering",21],[1,"usize"],[1,"tuple"],[1,"bool"],[5,"Formatter",22],[8,"Result",22],[6,"Option",23],[6,"Result",24],[5,"TypeId",25]],"b":[]},\
"hyperion_vfs":{"doc":"","t":"ZCCCCCKKMMMNMNMMNNMNPPPPGIPPPPPPPNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNONNNNNNNONNNNNONNNNNNNNIPPIKKRRGIIINNNNNNNNNNNNNNNMNMNNNNNN","n":["AnyMutex","device","error","path","ramdisk","tree","DirectoryDevice","FileDevice","as_any","create_node","get_node","is_empty","len","map_phys","nodes","read","read_exact","unmap_phys","write","write_exact","AlreadyExists","Err","FilesystemError","Interrupted","IoError","IoResult","IsADirectory","NotADirectory","NotFound","Ok","PermissionDenied","UnexpectedEOF","WriteZero","as_error_source","backtrace","borrow","borrow_mut","cause","description","fmt","fmt","from","into","msg","source","to_string","try_from","try_into","type_id","Path","PathBuf","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","eq","file_name","fmt","fmt","from","from","from","from_str","into","is_absolute","is_dir","is_file","iter","join","join","new","parent","pop","set","split","to_absolute","to_owned","to_owned","try_from","try_into","type_id","type_id","Directory","File","as_any","borrow","borrow","borrow_mut","borrow_mut","children","create_node","from","from","get_node","into","into","len","name","new","new","new_empty","new_ref","nodes","parent","read","try_from","try_from","try_into","try_into","type_id","type_id","write","DirRef","Directory","File","FileRef","IntoNode","IntoRoot","Mut","Mut","Node","Root","WeakDirRef","WeakFileRef","borrow","borrow_mut","clone","clone_into","find","find_dir","find_file","from","insert","insert_dir","insert_file","install_dev","install_dev_ref","install_dev_with","into","into_node","into_node","into_root","into_root","new_root","to_owned","try_from","try_into","type_id"],"q":[[0,"hyperion_vfs"],[6,"hyperion_vfs::device"],[20,"hyperion_vfs::error"],[49,"hyperion_vfs::path"],[89,"hyperion_vfs::ramdisk"],[119,"hyperion_vfs::tree"],[155,"core::any"],[156,"lock_api::mutex"],[157,"alloc::sync"],[158,"snafu::no_std_error"],[159,"snafu::backtrace_inert"],[160,"core::option"],[161,"core::fmt"],[162,"core::fmt"],[163,"core::result"],[164,"core::any"],[165,"core::convert"],[166,"alloc::borrow"],[167,"alloc::vec"],[168,"core::convert"]],"d":["","","","","","","","","","","","","","allocate physical pages + map the file to it OR get the …","","","","see <code>Self::map_phys</code>","","","","Contains the error value","","","","","","","","Contains the success value","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","a directory with 0 or more files, like <code>/home/</code>","a normal file, like <code>/etc/fstab</code>","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,3,3,1,1,1,3,1,1,1,1,1,15,7,15,15,0,0,15,15,15,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,23,24,23,23,24,24,23,24,24,24,24,24,23,23,24,23,24,24,23,24,23,23,23,23,23,24,24,23,24,24,23,23,23,24,24,24,23,24,0,0,29,29,30,29,30,30,30,29,30,30,29,30,29,30,29,30,29,30,30,30,29,29,30,29,30,29,30,29,0,5,5,0,0,0,38,37,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,37,5,38,39,5,5,5,5,5],"f":[0,0,0,0,0,0,0,0,[1,2],[[3,4,[5,[-1]]],[[7,[6]]],8],[[3,4],[[7,[[5,[-1]]]]],8],[1,9],[1,10],[[1,10],[[7,[10]]]],[3,[[7,[[11,[[12,[[11,[4]]]]]]]]]],[[1,10,[12,[13]]],[[7,[10]]]],[[1,10,[12,[13]]],[[7,[6]]]],[1,[[7,[6]]]],[[1,10,[12,[13]]],[[7,[10]]]],[[1,10,[12,[13]]],[[7,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,14,[]],[15,[[17,[16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[15,[[17,[14]]]],[15,4],[[15,18],19],[[15,18],19],[-1,-1,[]],[-1,-2,[],[]],[15,4],[15,[[17,[14]]]],[-1,20,[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],0,0,[23,23],[24,23],[23,4],[-1,-2,[],[]],[-1,-2,[],[]],[24,23],[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[[-1,-2],6,[],[]],[24,-1,[]],[[24,24],9],[23,[[17,[4]]]],[[23,18],19],[[24,18],19],[4,23],[23,24],[-1,-1,[]],[4,23],[-1,-2,[],[]],[23,9],[23,9],[23,9],[23,[[0,[[26,[],[[25,[4]]]]]]]],[[23,-1],24,[[27,[23]]]],[[24,4],24],[-1,24,[[27,[23]]]],[23,[[17,[23]]]],[24,24],[[24,-1],24,[[27,[23]]]],[23,[[17,[[6,[23,4]]]]]],[[23,23],[[28,[23]]]],[23,-1,[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],0,0,[29,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[30,[-1]],4,[5,[-1]]],[[7,[6]]],31],[-1,-1,[]],[-1,-1,[]],[[[30,[-1]],4],[[7,[[5,[-1]]]]],31],[-1,-2,[],[]],[-1,-2,[],[]],[29,10],0,[[[32,[13]]],29],[-1,[[30,[-2]]],[[33,[[11,[4]]]]],31],[[],[[34,[-1]]],31],[-1,[[35,[-2]]],[[33,[[11,[4]]]]],31],[[[30,[-1]]],[[7,[[11,[[12,[[11,[4]]]]]]]]],31],0,[[29,10,[12,[13]]],[[7,[10]]]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[[29,10,[12,[13]]],[[7,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1]]],[[5,[-1]]],[]],[[-1,-2],6,[],[]],[[[5,[-1]],-2,9],[[7,[[5,[-1]]]]],31,[[27,[23]]]],[[[5,[-1]],-2,9],[[7,[[35,[-1]]]]],31,[[27,[23]]]],[[[5,[-1]],-2,9,9],[[7,[[34,[-1]]]]],31,[[27,[23]]]],[-1,-1,[]],[[[5,[-1]],-2,9,[5,[-1]]],[[7,[6]]],31,[[27,[23]]]],[[[5,[-1]],-2,9,[35,[-1]]],[[7,[6]]],31,[[27,[23]]]],[[[5,[-1]],-2,9,[34,[-1]]],[[7,[6]]],31,[[27,[23]]]],[[[5,[-1]],-2,-3],6,31,[[27,[23]]],1],[[[5,[-1]],-2,[34,[-1]]],6,31,[[27,[23]]]],[[[5,[-1]],-2,-3],6,31,[[27,[23]]],1],[-1,-2,[],[]],[[[37,[],[[36,[-1]]]]],[[5,[-1]]],31],[[[5,[-1]]],[[5,[-2]]],31,[]],[[[38,[],[[36,[-1]]]]],[[39,[-1]]],31],[[[39,[-1]]],[[39,[-2]]],31,[]],[[],[[5,[-1]]],31],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]]],"c":[],"p":[[10,"FileDevice",6],[10,"Any",155],[10,"DirectoryDevice",6],[1,"str"],[6,"Node",119],[1,"tuple"],[8,"IoResult",20],[10,"RawMutex",156],[1,"bool"],[1,"usize"],[5,"Arc",157],[1,"slice"],[1,"u8"],[10,"Error",158],[6,"IoError",20],[5,"Backtrace",159],[6,"Option",160],[5,"Formatter",161],[8,"Result",161],[5,"String",162],[6,"Result",163],[5,"TypeId",155],[5,"Path",49],[5,"PathBuf",49],[17,"Item"],[10,"Iterator",164],[10,"AsRef",165],[6,"Cow",166],[5,"File",89],[5,"Directory",89],[25,"AnyMutex",0],[5,"Vec",167],[10,"Into",165],[8,"FileRef",119],[8,"DirRef",119],[17,"Mut"],[10,"IntoNode",119],[10,"IntoRoot",119],[8,"Root",119]],"b":[[39,"impl-Display-for-IoError"],[40,"impl-Debug-for-IoError"]]},\
"libstd":{"doc":"","t":"CCQQCCQQCCCCFINNNNNNNNNNNFHNNNNNNNNNNNNNNFFTTTFFJJJFFFNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNONNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNFFFKKNNNNNNMNNNNNNNNNNMNNNNNNNNNNNMNNNFTTKNNNNNNNMNNNNNFFIINNNNNNNNNNNNNNNNNNNNNHHHHHCHCHHHHCHHHHHHCHHHHHHHHHHHHHHHHHHHHTTTTPFTTTTTTTTTTTTTTPTITTTNNNNNNNNNNNNNNNNNNNNTTTFFFTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSTTFTFFFTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNH","n":["alloc","env","eprint","eprintln","fs","io","print","println","process","sync","sys","thread","PageAlloc","SlabAlloc","alloc","alloc","borrow","borrow_mut","dealloc","free","from","into","try_from","try_into","type_id","Args","args","borrow","borrow_mut","clone","clone_into","from","into","into_iter","len","next","next_back","to_owned","try_from","try_into","type_id","Dir","DirEntry","FD","FD","FD","File","OpenOptions","STDERR","STDIN","STDOUT","Stderr","Stdin","Stdout","append","as_desc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","close","create","create_new","drop","file_name","flush","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into_inner","is_dir","lock","lock","lock","metadata","new","new","next_entry","open","open","open","read","read","read","size","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write_str","BufReader","BufWriter","ConstBufReader","Read","Write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","flush","flush","from","from","from","into","into","into","new","new","new","read","read_line","read_line","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","write_fmt","write_str","ExitCode","FAILURE","SUCCESS","Termination","borrow","borrow_mut","default","exit_process","from","from","into","report","report","to_i32","try_from","try_into","type_id","Condvar","Futex","Mutex","MutexGuard","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","lock","new","notify_all","notify_one","try_from","try_from","try_into","try_into","try_lock","type_id","type_id","unlock","wait","accept","bind","close","connect","dup","err","exit","fs","futex_wait","futex_wake","get_pid","get_tid","id","listen","log","map_file","metadata","nanosleep","nanosleep_until","net","open","open_dir","palloc","pfree","pthread_spawn","read","recv","rename","send","socket","syscall_0","syscall_1","syscall_2","syscall_3","syscall_4","syscall_5","timestamp","unmap_file","write","yield_now","ALREADY_EXISTS","BAD_FILE_DESCRIPTOR","CLOSED","CONNECTION_REFUSED","Err","Error","FILESYSTEM_ERROR","INTERRUPTED","INVALID_ADDRESS","INVALID_ALLOC","INVALID_DOMAIN","INVALID_FLAGS","INVALID_TYPE","INVALID_UTF8","NOT_A_DIRECTORY","NOT_A_FILE","NOT_FOUND","NO_SUCH_PROCESS","OUT_OF_MEMORY","OUT_OF_VIRTUAL_MEMORY","Ok","PERMISSION_DENIED","Result","UNEXPECTED_EOF","UNKNOWN_PROTOCOL","WRITE_ZERO","as_str","borrow","borrow_mut","clone","clone_into","cmp","decode","encode","eq","fmt","fmt","from","hash","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id","APPEND","CREATE","CREATE_NEW","FileDesc","FileOpenFlags","Metadata","READ","READ_WRITE","TRUNC","WRITE","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","complement","contains","difference","empty","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","insert","intersection","intersects","into","into","into","into_iter","is_all","is_empty","is_empty","iter","iter_names","len","len","not","partial_cmp","partial_cmp","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","zeroed","ACCEPT","BIND","CLOSE","CONNECT","DUP","EXIT","FUTEX_WAIT","FUTEX_WAKE","GET_PID","GET_TID","LISTEN","LOG","MAP_FILE","METADATA","NANOSLEEP","NANOSLEEP_UNTIL","OPEN","OPEN_DIR","PALLOC","PFREE","PTHREAD_SPAWN","READ","RECV","RENAME","SEND","SOCKET","TIMESTAMP","UNMAP_FILE","WRITE","YIELD_NOW","LOCAL","LOCAL","Protocol","STREAM","SocketDesc","SocketDomain","SocketType","UNIX","UNIX","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","spawn"],"q":[[0,"libstd"],[12,"libstd::alloc"],[25,"libstd::env"],[41,"libstd::fs"],[133,"libstd::io"],[171,"libstd::process"],[188,"libstd::sync"],[213,"libstd::sys"],[253,"libstd::sys::err"],[299,"libstd::sys::fs"],[395,"libstd::sys::id"],[425,"libstd::sys::net"],[490,"libstd::thread"],[491,"core::alloc::layout"],[492,"hyperion_slab_alloc"],[493,"core::result"],[494,"core::any"],[495,"core::option"],[496,"spin::mutex"],[497,"core::convert"],[498,"core::fmt"],[499,"alloc::string"],[500,"core::fmt"],[501,"core::ptr::non_null"],[502,"core::cmp"],[503,"core::fmt"],[504,"core::iter::traits::collect"],[505,"bitflags::iter"],[506,"bitflags::iter"],[507,"core::marker"]],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Safety","","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","accept a connection on a socket","bind a name to a socket","close a file","connect to a socket","duplicate a file descriptor","","exit the process with a code","","futex wait if value at <code>addr</code> is <code>val</code>","wake <code>num</code> threads that are sleeping on this <code>addr</code>","get the current process id","get the current thread id","","start listening for connections on a socket","print a string into kernel logs","map file contents to memory (mmap)","file metadata (stat)","context switch from this process and switch back when <code>nanos</code>…","context switch from this process and switch back when …","","open a file","open a directory","allocate physical pages and map to heap","deallocate physical pages and unmap from heap","spawn a new pthread for the same process","read from a file","read data from a socket","rename the current process","send data to a socket","create a socket","Safety","Safety","Safety","Safety","Safety","Safety","u128 nanoseconds since boot","unmap device/file mapped memory (munmap)","write into a file","context switch from this process, no guarantees about …","","","","","Contains the error value","","","","","","","","","","","","","","","","Contains the success value","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","writes append to the file","create file if it doesn’t already exist","create file if it doesn’t already exist and err if it …","","","","open file with read caps","open file with read and write caps","truncate file on open (if the file already existed)","open file with write caps","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","","Yield a set of contained flags values.","Yield a set of contained named flags values.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,16,19,21,0,0,0,0,0,0,0,0,11,13,16,19,21,23,24,13,11,16,19,21,23,24,13,11,13,13,11,11,13,24,13,16,19,21,23,24,13,11,16,19,21,23,24,13,11,13,24,16,19,21,13,13,11,23,23,13,11,13,13,11,24,11,16,19,21,23,24,13,11,16,19,21,23,24,13,11,16,19,21,23,24,13,11,13,13,11,13,0,0,0,0,0,30,17,20,30,17,20,29,20,30,17,20,30,17,20,30,17,20,31,30,17,30,17,20,30,17,20,30,17,20,29,20,20,20,0,34,34,0,34,34,34,34,34,34,34,36,34,34,34,34,34,0,0,0,0,38,39,38,39,38,39,38,39,38,39,39,39,38,39,38,39,38,38,39,38,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,42,42,42,15,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,15,42,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,47,47,47,0,0,0,47,47,47,47,47,47,47,47,47,47,47,47,47,14,47,22,14,47,22,14,47,22,14,47,22,14,47,22,47,47,47,47,14,47,22,47,14,47,47,47,47,47,22,14,47,22,47,47,47,47,47,47,47,47,47,14,47,22,47,47,47,22,47,47,22,22,47,14,47,22,47,47,47,47,47,14,47,22,47,14,47,22,14,47,22,14,47,22,47,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,50,0,49,0,0,0,48,50,41,48,49,50,41,48,49,50,41,48,49,50,41,48,49,50,41,48,49,50,41,48,49,50,41,48,49,50,41,48,49,50,41,48,49,50,41,48,49,50,41,48,49,50,41,48,49,50,41,48,49,50,41,48,49,50,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],3],[4,5],[-1,-2,[],[]],[-1,-2,[],[]],[[1,3,2],6],[5,6],[-1,-1,[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],0,[[],9],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[[-1,-2],6,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,4],[9,[[10,[-1]]],[]],[9,[[10,[-1]]],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[11,12],11],[13,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,13],[13,[[15,[6]]]],[[11,12],11],[[11,12],11],[13,6],0,[13,[[15,[6]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,14],0,[16,[[18,[[17,[13]]]]]],[19,[[18,[[20,[13]]]]]],[21,[[18,[[20,[13]]]]]],[13,[[15,[22]]]],[14,13],[[],11],[23,[[10,[24]]]],[25,[[15,[23]]]],[25,[[15,[13]]]],[[11,-1],[[15,[13]]],[[26,[25]]]],[[13,[27,[3]]],[[15,[4]]]],[[13,[27,[3]]],[[15,[4]]]],[[11,12],11],0,[[11,12],11],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[[13,[27,[3]]],[[15,[4]]]],[[13,[27,[3]]],[[15,[4]]]],[[11,12],11],[[13,25],28],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[29,[[15,[6]]]],[[[20,[-1]]],[[15,[6]]],29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[30,[-1]]],31],[[-1,[27,[3]]],[[17,[-1]]],31],[-1,[[20,[-1]]],[]],[[31,[27,[3]]],[[15,[4]]]],[[[30,[-1]],32],[[15,[4]]],31],[[[17,[-1]],32],[[15,[4]]],31],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[[29,[27,[3]]],[[15,[4]]]],[[[20,[-1]],[27,[3]]],[[15,[4]]],29],[[[20,[-1]],33],28,29],[[[20,[-1]],25],28,29],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],34],[34,35],[-1,-1,[]],[3,34],[-1,-2,[],[]],[36,34],[34,34],[34,37],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[38,6],[[],39],[39,6],[39,6],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[38,12],[-1,8,[]],[-1,8,[]],[38,6],[[39,[40,[-1]]],[[40,[-1]]],[]],[41,[[7,[41,42]]]],[[41,25],[[7,[6,42]]]],[14,[[7,[6,42]]]],[[41,25],[[7,[6,42]]]],[[14,14],[[7,[14,42]]]],0,[43,35],0,[[44,4],6],[[44,4],6],[[],4],[[],4],0,[41,[[7,[6,42]]]],[25,[[7,[6,42]]]],[[14,[10,[[45,[6]]]],4,4],[[7,[[45,[6]],42]]]],[[14,22],[[7,[6,42]]]],[46,6],[46,6],0,[[25,47,4],[[7,[14,42]]]],[25,[[7,[14,42]]]],[4,[[7,[[10,[[45,[3]]]],42]]]],[[[45,[3]],4],[[7,[6,42]]]],[4,6],[[14,[27,[3]]],[[7,[4,42]]]],[[41,[27,[3]],4],[[7,[4,42]]]],[25,[[7,[6,42]]]],[[41,[27,[3]],4],[[7,[6,42]]]],[[48,49,50],[[7,[41,42]]]],[4,[[7,[4,42]]]],[[4,4],[[7,[4,42]]]],[[4,4,4],[[7,[4,42]]]],[[4,4,4,4],[[7,[4,42]]]],[[4,4,4,4,4],[[7,[4,42]]]],[[4,4,4,4,4,4],[[7,[4,42]]]],[[],[[7,[51,42]]]],[[14,[45,[6]],4],[[7,[6,42]]]],[[14,[27,[3]]],[[7,[4,42]]]],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[42,25],[-1,-2,[],[]],[-1,-2,[],[]],[42,42],[[-1,-2],6,[],[]],[[42,42],52],[4,[[7,[4,42]]]],[[[7,[4,42]]],4],[[42,42],12],[[42,53],[[7,[6,54]]]],[[42,53],[[7,[6,54]]]],[-1,-1,[]],[[42,-1],6,55],[-1,-2,[],[]],[[42,42],[[10,[52]]]],[-1,-2,[],[]],[-1,32,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],0,0,0,0,0,0,0,0,0,0,[[],47],[[47,47],47],[[47,47],6],[[47,47],47],[[47,47],6],[47,4],[47,4],[[47,47],47],[[47,47],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[47,47],[22,22],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[14,14],52],[[47,47],52],[[22,22],52],[47,47],[[47,47],12],[[47,47],47],[[],47],[[14,14],12],[[47,47],12],[[22,22],12],[[47,-1],6,[[57,[],[[56,[47]]]]]],[[14,53],[[7,[6,54]]]],[[47,53],[[7,[6,54]]]],[[47,53],[[7,[6,54]]]],[[47,53],[[7,[6,54]]]],[[47,53],[[7,[6,54]]]],[[47,53],[[7,[6,54]]]],[[22,53],[[7,[6,54]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[4,[[10,[47]]]],[4,47],[4,47],[4,47],[-1,47,[[57,[],[[56,[47]]]]]],[25,[[10,[47]]]],[[47,47],6],[[47,47],47],[[47,47],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[47],[47,12],[47,12],[22,12],[47,[[58,[47]]]],[47,[[59,[47]]]],[22,4],0,[47,47],[[14,14],[[10,[52]]]],[[47,47],[[10,[52]]]],[[22,22],[[10,[52]]]],[[47,47],6],[[47,47,12],6],[[47,47],47],[[47,47],6],[[47,47],47],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[47,47],6],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[[47,47],47],[[],22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[41,41],[48,48],[49,49],[50,50],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[41,41],52],[[48,48],52],[[49,49],52],[[50,50],52],[[41,41],12],[[48,48],12],[[49,49],12],[[50,50],12],[[41,53],[[7,[6,54]]]],[[48,53],[[7,[6,54]]]],[[49,53],[[7,[6,54]]]],[[50,53],[[7,[6,54]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[41,41],[[10,[52]]]],[[48,48],[[10,[52]]]],[[49,49],[[10,[52]]]],[[50,50],[[10,[52]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,6,[60,61]]],"c":[],"p":[[5,"PageAlloc",12],[5,"Layout",491],[1,"u8"],[1,"usize"],[5,"PageFrames",492],[1,"tuple"],[6,"Result",493],[5,"TypeId",494],[5,"Args",25],[6,"Option",495],[5,"OpenOptions",41],[1,"bool"],[5,"File",41],[5,"FileDesc",299],[8,"Result",253],[5,"Stdin",41],[5,"ConstBufReader",133],[5,"MutexGuard",496],[5,"Stdout",41],[5,"BufWriter",133],[5,"Stderr",41],[5,"Metadata",299],[5,"Dir",41],[5,"DirEntry",41],[1,"str"],[10,"AsRef",497],[1,"slice"],[8,"Result",498],[10,"Write",133],[5,"BufReader",133],[10,"Read",133],[5,"String",499],[5,"Arguments",498],[5,"ExitCode",171],[1,"never"],[10,"Termination",171],[1,"i32"],[5,"Futex",188],[5,"Condvar",188],[8,"MutexGuard",188],[5,"SocketDesc",425],[5,"Error",253],[1,"i64"],[5,"AtomicUsize",500],[5,"NonNull",501],[1,"u64"],[5,"FileOpenFlags",299],[5,"SocketDomain",425],[5,"SocketType",425],[5,"Protocol",425],[1,"u128"],[6,"Ordering",502],[5,"Formatter",498],[5,"Error",498],[10,"Hasher",503],[17,"Item"],[10,"IntoIterator",504],[5,"Iter",505],[5,"IterNames",505],[10,"FnOnce",506],[10,"Send",507]],"b":[[14,"impl-GlobalAlloc-for-PageAlloc"],[15,"impl-PageFrameAllocator-for-PageAlloc"],[103,"impl-File"],[104,"impl-Read-for-File"],[129,"impl-Write-for-File"],[130,"impl-File"],[288,"impl-Debug-for-Error"],[289,"impl-Display-for-Error"],[314,"impl-Flags-for-FileOpenFlags"],[315,"impl-FileOpenFlags"],[342,"impl-Debug-for-FileOpenFlags"],[343,"impl-UpperHex-for-FileOpenFlags"],[344,"impl-Octal-for-FileOpenFlags"],[345,"impl-Binary-for-FileOpenFlags"],[346,"impl-LowerHex-for-FileOpenFlags"],[352,"impl-Flags-for-FileOpenFlags"],[353,"impl-FileOpenFlags"]]},\
"sample_elf":{"doc":"","t":"HHHHHHH","n":["_repeat_stdin_to_stdout","_test_duplicate_stdin","_test_userspace_mutex","handle_client","main","run_client","run_server"],"q":[[0,"sample_elf"],[7,"libstd::fs"],[8,"hyperion_syscall::net"],[9,"hyperion_syscall::err"]],"d":["","","","","","",""],"i":[0,0,0,0,0,0,0],"f":[[[],1],[[],2],[[],1],[[3,4],[[5,[1]]]],[[],[[5,[1]]]],[[],[[5,[1]]]],[[],[[5,[1]]]]],"c":[],"p":[[1,"tuple"],[5,"File",7],[1,"usize"],[5,"SocketDesc",8],[8,"Result",9]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
