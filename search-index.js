var searchIndex = JSON.parse('{\
"cargo_run":{"doc":"","t":"FNNNNNNOOHNNNNNOHHOONNNONN","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","cpus","debug","find_makefile","from","from_arg_matches","from_arg_matches_mut","group_id","into","kvm","main","mem","mem","release","try_from","try_into","type_id","uefi","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"cargo_run"],[26,"clap_builder::builder::command"],[27,"clap_builder::parser::matches::arg_matches"],[28,"clap_builder"],[29,"core::result"],[30,"clap_builder::util::id"],[31,"core::option"],[32,"alloc::string"],[33,"core::any"]],"d":["","","","","","","","number of SMP CPUs","QEMU debug level","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","enable KVM in QEMU","","","amount of physical memory","build the kernel with optimizations","","","","enable UEFI in QEMU","",""],"i":[0,4,4,4,4,4,4,4,4,0,4,4,4,4,4,4,0,0,4,4,4,4,4,4,4,4],"f":[0,[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],0,0,[[],2],[-1,-1,[]],[3,[[6,[4,5]]]],[3,[[6,[4,5]]]],[[],[[8,[7]]]],[-1,-2,[],[]],0,[[],2],[9,[[6,[10,10]]]],0,0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,11,[]],0,[[4,3],[[6,[2,5]]]],[[4,3],[[6,[2,5]]]]],"c":[],"p":[[5,"Command",26],[1,"tuple"],[5,"ArgMatches",27],[5,"Args",0],[8,"Error",28],[6,"Result",29],[5,"Id",30],[6,"Option",31],[1,"str"],[5,"String",32],[5,"TypeId",33]],"b":[]},\
"coreutils":{"doc":"","t":"CHCHCCFNNHNNNNNNNHHH","n":["cat","cmd","ls","main","sleep","touch","Bytes","borrow","borrow_mut","cmd","fmt","from","into","to_string","try_from","try_into","type_id","cmd","cmd","cmd"],"q":[[0,"coreutils"],[6,"coreutils::cat"],[17,"coreutils::ls"],[18,"coreutils::sleep"],[19,"coreutils::touch"],[20,"anyhow"],[21,"libstd"],[22,"core::iter::traits::iterator"],[23,"core::fmt"],[24,"core::fmt"],[25,"core::result"],[26,"core::any"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,7,7,0,7,7,7,7,7,7,7,0,0,0],"f":[0,[[],[[2,[1]]]],0,[3,1],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[1]]],[[6,[],[[4,[5]]]]]],[[7,8],9],[-1,-1,[]],[-1,-2,[],[]],[-1,10,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,[[2,[1]]],[[6,[],[[4,[5]]]]]],[-1,[[2,[1]]],[[6,[],[[4,[5]]]]]],[-1,[[2,[1]]],[[6,[],[[4,[5]]]]]]],"c":[],"p":[[1,"tuple"],[8,"Result",20],[5,"CliArgs",21],[17,"Item"],[1,"str"],[10,"Iterator",22],[5,"Bytes",6],[5,"Formatter",23],[8,"Result",23],[5,"String",24],[6,"Result",25],[5,"TypeId",26]],"b":[]},\
"hyperion_arch":{"doc":"","t":"CCHHHCCCHHCHCCCHFNNONNNNNNNNNOHONNNFNNNNNNNNNCOCOHNNCNNNCONFFNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNOOFNNNNNNNNNNNNNNJJHHHHHHHHHHHHCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHFFNNNNNNNNNNNNNNNNNONNNNONNNNNNNHHHHHHHPFPFPFPFPPPPPPGGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNFFSTFFKFTSSFSSSONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNOMNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNONFOOOOONNNNNNNNNHNNHONNNNOOHFNNONNNNHNNNONNNOSSSJSPPPFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["context","cpu","dbg_cpu","done","init","int","paging","pmm","rng_seed","spin_loop","stack","stack_pages","syscall","tls","vmm","wake_cpus","Context","borrow","borrow_mut","cr3","deref","deref_mut","drop","fmt","from","init","into","invalid","new","rsp","switch","syscall_stack","try_from","try_into","type_id","CpuState","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","gdt","gdt","idt","idt","init","init","into","ints","to_owned","try_from","try_into","tss","tss","type_id","Gdt","SegmentSelectors","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","kernel_code","kernel_data","load","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","user_code","user_data","Idt","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","load","new","try_from","try_into","type_id","GP_FAULT_HANDLER","PAGE_FAULT_HANDLER","alignment_check","bound_range_exceeded","breakpoint","debug","device_not_available","divide_error","double_fault","general_protection_fault","invalid_opcode","invalid_tss","machine_check","non_maskable_interrupt","other","overflow","page_fault","security_exception","segment_not_present","simd_floating_point","stack_segment_fault","virtualization","vmm_communication_exception","x87_floating_point","int_handler_100","int_handler_101","int_handler_102","int_handler_103","int_handler_104","int_handler_105","int_handler_106","int_handler_107","int_handler_108","int_handler_109","int_handler_110","int_handler_111","int_handler_112","int_handler_113","int_handler_114","int_handler_115","int_handler_116","int_handler_117","int_handler_118","int_handler_119","int_handler_120","int_handler_121","int_handler_122","int_handler_123","int_handler_124","int_handler_125","int_handler_126","int_handler_127","int_handler_128","int_handler_129","int_handler_130","int_handler_131","int_handler_132","int_handler_133","int_handler_134","int_handler_135","int_handler_136","int_handler_137","int_handler_138","int_handler_139","int_handler_140","int_handler_141","int_handler_142","int_handler_143","int_handler_144","int_handler_145","int_handler_146","int_handler_147","int_handler_148","int_handler_149","int_handler_150","int_handler_151","int_handler_152","int_handler_153","int_handler_154","int_handler_155","int_handler_156","int_handler_157","int_handler_158","int_handler_159","int_handler_160","int_handler_161","int_handler_162","int_handler_163","int_handler_164","int_handler_165","int_handler_166","int_handler_167","int_handler_168","int_handler_169","int_handler_170","int_handler_171","int_handler_172","int_handler_173","int_handler_174","int_handler_175","int_handler_176","int_handler_177","int_handler_178","int_handler_179","int_handler_180","int_handler_181","int_handler_182","int_handler_183","int_handler_184","int_handler_185","int_handler_186","int_handler_187","int_handler_188","int_handler_189","int_handler_190","int_handler_191","int_handler_192","int_handler_193","int_handler_194","int_handler_195","int_handler_196","int_handler_197","int_handler_198","int_handler_199","int_handler_200","int_handler_201","int_handler_202","int_handler_203","int_handler_204","int_handler_205","int_handler_206","int_handler_207","int_handler_208","int_handler_209","int_handler_210","int_handler_211","int_handler_212","int_handler_213","int_handler_214","int_handler_215","int_handler_216","int_handler_217","int_handler_218","int_handler_219","int_handler_220","int_handler_221","int_handler_222","int_handler_223","int_handler_224","int_handler_225","int_handler_226","int_handler_227","int_handler_228","int_handler_229","int_handler_230","int_handler_231","int_handler_232","int_handler_233","int_handler_234","int_handler_235","int_handler_236","int_handler_237","int_handler_238","int_handler_239","int_handler_240","int_handler_241","int_handler_242","int_handler_243","int_handler_244","int_handler_245","int_handler_246","int_handler_247","int_handler_248","int_handler_249","int_handler_250","int_handler_251","int_handler_252","int_handler_253","int_handler_254","int_handler_255","int_handler_32","int_handler_33","int_handler_34","int_handler_35","int_handler_36","int_handler_37","int_handler_38","int_handler_39","int_handler_40","int_handler_41","int_handler_42","int_handler_43","int_handler_44","int_handler_45","int_handler_46","int_handler_47","int_handler_48","int_handler_49","int_handler_50","int_handler_51","int_handler_52","int_handler_53","int_handler_54","int_handler_55","int_handler_56","int_handler_57","int_handler_58","int_handler_59","int_handler_60","int_handler_61","int_handler_62","int_handler_63","int_handler_64","int_handler_65","int_handler_66","int_handler_67","int_handler_68","int_handler_69","int_handler_70","int_handler_71","int_handler_72","int_handler_73","int_handler_74","int_handler_75","int_handler_76","int_handler_77","int_handler_78","int_handler_79","int_handler_80","int_handler_81","int_handler_82","int_handler_83","int_handler_84","int_handler_85","int_handler_86","int_handler_87","int_handler_88","int_handler_89","int_handler_90","int_handler_91","int_handler_92","int_handler_93","int_handler_94","int_handler_95","int_handler_96","int_handler_97","int_handler_98","int_handler_99","Tss","TssStacks","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","inner","into","into","new","set_privilege_stack","stacks","take_interrupt_stack","try_from","try_from","try_into","try_into","type_id","type_id","are_enabled","debug","disable","enable","enable_and_nop64","wait","without","FrameNotPresent","Level1","Level1","Level2","Level2","Level3","Level3","Level4","Size1GiB","Size1GiB","Size2MiB","Size2MiB","Size4KiB","Size4KiB","WalkTableIterResult","WalkTableResult","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_pml4","init","init","init","init","init","init","into","into","into","into","into","into","iter","iter","iter","iter","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Pfa","allocate_frame","borrow","borrow_mut","deallocate_frame","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","AddressSpace","KernelStack","MAX_STACK_COUNT","PAGE_FLAGS","Stack","StackLimitHit","StackType","Stacks","TY","USER_HEAP_TOP","USER_STACK_TOP","UserStack","VIRT_STACK_PAGES","VIRT_STACK_SIZE","VIRT_STACK_SIZE_ALL","base_alloc","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cleanup","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","empty","eq","eq","eq","extent_4k_pages","extra_alloc","fmt","fmt","fmt","fmt","free","from","from","from","from","from","from","grow","guard_page","init","init","init","init","init","init","init","into","into","into","into","into","into","kernel_stacks","limit_4k_pages","new","new","new","page_fault","page_map","region","region","region","take","take_kernel_stack_lazy","take_kernel_stack_prealloc","take_lazy","take_prealloc","take_user_stack_lazy","take_user_stack_prealloc","to_owned","to_owned","to_owned","to_owned","top","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","user_stacks","with_limit","SyscallRegs","arg0","arg1","arg2","arg3","arg4","borrow","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","from","init","init","into","set_handler","syscall_id","to_string","try_from","try_into","type_id","user_instr_ptr","user_stack_ptr","userland","ThreadLocalStorage","borrow","borrow_mut","cpu","deref","deref_mut","drop","from","init","init","init","into","kernel_stack","try_from","try_into","type_id","user_stack","CURRENT_ADDRESS_SPACE","HIGHER_HALF_DIRECT_MAPPING","KERNEL_EXECUTABLE","KERNEL_EXECUTABLE_MAPS","KERNEL_STACKS","MapToError","NotAligned","Overflow","PageMap","TryMapSizedError","WrongSize","activate","borrow","borrow","borrow_mut","borrow_mut","cr3","current","debug","deref","deref","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","init","init","into","into","is_active","is_mapped","map","mark_owned","new","page_fault","phys_to_virt","try_from","try_from","try_into","try_into","type_id","type_id","unmap","virt_to_phys"],"q":[[0,"hyperion_arch"],[16,"hyperion_arch::context"],[35,"hyperion_arch::cpu"],[59,"hyperion_arch::cpu::gdt"],[94,"hyperion_arch::cpu::idt"],[109,"hyperion_arch::cpu::ints"],[133,"hyperion_arch::cpu::ints::other"],[357,"hyperion_arch::cpu::tss"],[389,"hyperion_arch::int"],[396,"hyperion_arch::paging"],[487,"hyperion_arch::pmm"],[501,"hyperion_arch::stack"],[633,"hyperion_arch::syscall"],[660,"hyperion_arch::tls"],[677,"hyperion_arch::vmm"],[725,"x86_64::addr"],[726,"core::ops::range"],[727,"core::fmt"],[728,"core::fmt"],[729,"core::any"],[730,"x86_64::structures::idt"],[731,"x86_64::structures::idt"],[732,"core::ops::function"],[733,"x86_64::structures::paging::page_table"],[734,"x86_64::structures::paging::page_table"],[735,"x86_64::structures::paging::frame"],[736,"core::fmt"],[737,"core::cmp"],[738,"hyperion_mem::vmm"],[739,"hyperion_mem::vmm"],[740,"core::mem::maybe_uninit"],[741,"x86_64::structures::paging::page"],[742,"x86_64::addr"]],"d":["","","","","","","","","","","","","","","<code>PageMap</code> is the Page Table Manager","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Safety","","","Safety","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Safety","","","","","","","","","","","","","","","","","PT (Page Table)","","PD (Page Directory)","","PDP (Page Directory Pointer)","","PML4 (Level 4 Page Map)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","also the max thread count per process","","stacks have a guard page to trigger the page fault","","","","","","the first frame of the stack","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","size of the stack in 4k pages, used in PageFault stack …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","won’t allocate the stack, this only makes sure the guard …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","limit how much the stack is allowed to grow, in 4k pages …","","","","","","","","","Safety","","","","","","","","","","","the location of where the top of the stack is mapped in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","init <code>syscall</code> and <code>sysret</code>","","Calls <code>U::from(self)</code>.","","","","","","","","","Safety","","","","GDT + IDT + TSS","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","kernel stack for syscalls","","","","temporary store for user space stack","","","","level 3 entries 510 and 511 in level 4 entry 511","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Safety","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,0,13,13,13,13,13,13,13,13,13,0,13,0,13,0,13,13,0,13,13,13,0,13,13,0,0,15,14,15,14,14,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,14,14,15,15,14,15,14,15,14,15,14,14,14,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,20,16,20,16,16,20,16,20,16,20,16,20,16,20,16,20,16,16,20,16,16,16,20,16,20,16,20,16,20,0,0,0,0,0,0,0,57,0,33,0,33,0,33,0,57,33,57,33,57,33,0,0,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,26,27,28,29,57,33,26,27,28,29,26,57,33,26,27,28,29,57,33,26,27,28,29,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,0,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,38,0,0,0,0,38,0,0,0,0,0,0,37,44,46,40,41,37,43,44,46,40,41,37,43,37,40,41,37,43,40,41,37,43,44,37,44,46,40,41,37,43,44,46,40,41,37,43,44,46,40,41,37,37,43,37,40,41,37,37,37,40,41,37,43,44,44,46,40,41,37,43,37,37,44,46,40,41,37,37,43,44,46,40,41,37,43,46,37,44,46,37,37,46,38,40,41,44,46,46,44,44,46,46,40,41,37,43,37,44,46,40,41,37,43,44,46,40,41,37,43,44,46,40,41,37,43,46,37,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,49,49,0,49,49,49,49,49,49,49,0,0,51,51,51,51,51,51,51,0,51,51,51,51,51,51,51,51,0,0,0,0,0,53,53,53,0,0,53,11,11,53,11,53,11,11,11,11,53,11,53,11,11,53,53,11,53,11,53,11,53,11,11,11,11,11,11,11,11,53,11,53,11,53,11,11],"f":[0,0,[[],1],[[],2],[[],1],0,0,0,[[],3],[[],1],0,[[],[[5,[4]]]],0,0,0,[[],1],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[6,-1,[]],[6,-1,[]],[6,1],[[7,8],[[10,[1,9]]]],[-1,-1,[]],[[],6],[-1,-2,[],[]],[11,7],[[11,4],7],0,[[7,7],1],0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[13,13],[[-1,-2],1,[],[]],[6,-1,[]],[6,-1,[]],[6,1],[[13,8],[[10,[1,9]]]],[-1,-1,[]],0,0,0,0,[[],1],[[],6],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],0,0,[-1,12,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],1,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[[15,8],[[10,[1,9]]]],[[14,8],[[10,[1,9]]]],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[15,1],[16,15],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[6,-1,[]],[6,-1,[]],[6,1],[[17,8],[[10,[1,9]]]],[-1,-1,[]],[[],6],[-1,-2,[],[]],[17,1],[16,17],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],0,0,[[18,3],1],[18,1],[18,1],[18,1],[18,1],[18,1],[[18,3],2],[[18,3],1],[18,1],[[18,3],1],[18,2],[18,1],0,[18,1],[[18,19],1],[[18,3],1],[[18,3],1],[18,1],[[18,3],1],[18,1],[[18,3],1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],16],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[[16,8],[[10,[1,9]]]],[[20,8],[[10,[1,9]]]],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],16],[[16,4],1],0,[20,[[22,[21]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[[],23],[[],1],[[],1],[[],1],[[],1],[[],1],[-2,-1,[],[[25,[],[[24,[-1]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[[26,8],[[10,[1,9]]]],[[27,8],[[10,[1,9]]]],[[28,8],[[10,[1,9]]]],[[29,8],[[10,[1,9]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[30,26],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[27,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[28,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[29,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[35,[[22,[36]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,36],1],[6,-1,[]],[6,-1,[]],[6,1],[-1,-1,[]],[[],6],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1]],11],1,[38,39]],[40,40],[41,41],[[[37,[-1]]],[[37,[-1]]],42],[43,43],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[],[[44,[-1]]],[38,39]],[[],[[37,[-1]]],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[6,1],[6,1],[[[37,[-1]]],1,[]],[6,1],[6,1],[[],[[37,[-1]]],[]],[[40,40],23],[[41,41],23],[[[37,[-1]],[37,[-1]]],23,45],0,0,[[40,8],[[10,[1,9]]]],[[41,8],[[10,[1,9]]]],[[[37,[-1]],8],[[10,[1,9]]],39],[[43,8],[[10,[1,9]]]],[[[44,[-1]],[37,[-1]]],1,[38,39]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[37,[-1]],11,3],[[10,[1,43]]],[38,39]],[[[37,[-1]]],4,[38,39]],[[],6],[[],6],[[],6],[[],6],[[[37,[-1]],11],1,[38,39]],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],[[44,[-1]]],[38,39]],[11,46],[4,[[37,[-1]]],[38,39]],[[[37,[-1]],11,3],[[10,[47,48]]],[38,39]],0,[[],[[5,[3]]]],[[],[[5,[3]]]],[[],[[5,[3]]]],[[[44,[-1]]],[[37,[-1]]],[38,39]],[46,[[37,[40]]]],[[46,3],[[37,[40]]]],[[[44,[-1]],11],[[37,[-1]]],[38,39]],[[[44,[-1]],11,3],[[37,[-1]]],[38,39]],[46,[[37,[41]]]],[[46,3],[[37,[41]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[[4,3],[[37,[-1]]],[38,39]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],49],[6,-1,[]],[6,-1,[]],[6,1],[[49,8],[[10,[1,9]]]],[[49,8],[[10,[1,9]]]],[-1,-1,[]],[14,1],[[],6],[-1,-2,[],[]],[[],1],0,[-1,50,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],0,0,[[4,4,3,3],2],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[6,-1,[]],[6,-1,[]],[6,1],[-1,-1,[]],[51,1],[[],6],[[[52,[51]],13],51],[-1,-2,[],[]],0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,[11,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,36],[[],11],[11,1],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[11,1],[6,1],[[[53,[-1]],8],[[10,[1,9]]],[39,54]],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[11,23],[[11,[5,[4]],32],23],[[11,[5,[4]],55,32],1],[11,1],[[],11],[[11,4,56],[[10,[47,48]]]],[[11,55],4],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[[11,[5,[4]]],1],[[11,4],[[22,[55]]]]],"c":[],"p":[[1,"tuple"],[1,"never"],[1,"u64"],[5,"VirtAddr",725],[5,"Range",726],[1,"usize"],[5,"Context",16],[5,"Formatter",727],[5,"Error",727],[6,"Result",728],[5,"PageMap",677],[5,"TypeId",729],[5,"CpuState",35],[5,"SegmentSelectors",59],[5,"Gdt",59],[5,"Tss",357],[5,"Idt",94],[5,"InterruptStackFrame",730],[5,"PageFaultErrorCode",730],[5,"TssStacks",357],[1,"u16"],[6,"Option",731],[1,"bool"],[17,"Output"],[10,"FnOnce",732],[5,"Level4",396],[5,"Level3",396],[5,"Level2",396],[5,"Level1",396],[5,"PageTable",733],[17,"Item"],[5,"PageTableFlags",733],[6,"WalkTableIterResult",396],[10,"Iterator",734],[5,"Pfa",487],[5,"PhysFrame",735],[5,"Stack",501],[10,"StackType",501],[10,"Debug",727],[5,"KernelStack",501],[5,"UserStack",501],[10,"Clone",736],[5,"StackLimitHit",501],[5,"Stacks",501],[10,"PartialEq",737],[5,"AddressSpace",501],[5,"NotHandled",738],[5,"Handled",738],[5,"SyscallRegs",633],[5,"String",739],[5,"ThreadLocalStorage",660],[20,"MaybeUninit",740],[6,"TryMapSizedError",677],[10,"PageSize",741],[5,"PhysAddr",725],[6,"Privilege",738],[6,"WalkTableResult",396]],"b":[[645,"impl-Debug-for-SyscallRegs"],[646,"impl-Display-for-SyscallRegs"]]},\
"hyperion_arch_x86_64":{"doc":"","t":"CCHHHCCCHHCHCCCHFNNONNNNNNNNNOHONNNFNNNNNNNNNCOCOHNNCNNNCONFFNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNOOFNNNNNNNNNNNNNNJJHHHHHHHHHHHHCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHFFNNNNNNNNNNNNNNNNNONNNNONNNNNNNHHHHHHHPFPFPFPFPPPPPPGGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNFFSTFFKFTSSFSSSONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNOMNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNONFOOOOONNNNNNNNNHNNHONNNNOOHFNNONNNNHNNNONNNOSSSJSPPPFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["context","cpu","dbg_cpu","done","init","int","paging","pmm","rng_seed","spin_loop","stack","stack_pages","syscall","tls","vmm","wake_cpus","Context","borrow","borrow_mut","cr3","deref","deref_mut","drop","fmt","from","init","into","invalid","new","rsp","switch","syscall_stack","try_from","try_into","type_id","CpuState","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","from","gdt","gdt","idt","idt","init","init","into","ints","to_owned","try_from","try_into","tss","tss","type_id","Gdt","SegmentSelectors","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","kernel_code","kernel_data","load","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","user_code","user_data","Idt","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","load","new","try_from","try_into","type_id","GP_FAULT_HANDLER","PAGE_FAULT_HANDLER","alignment_check","bound_range_exceeded","breakpoint","debug","device_not_available","divide_error","double_fault","general_protection_fault","invalid_opcode","invalid_tss","machine_check","non_maskable_interrupt","other","overflow","page_fault","security_exception","segment_not_present","simd_floating_point","stack_segment_fault","virtualization","vmm_communication_exception","x87_floating_point","int_handler_100","int_handler_101","int_handler_102","int_handler_103","int_handler_104","int_handler_105","int_handler_106","int_handler_107","int_handler_108","int_handler_109","int_handler_110","int_handler_111","int_handler_112","int_handler_113","int_handler_114","int_handler_115","int_handler_116","int_handler_117","int_handler_118","int_handler_119","int_handler_120","int_handler_121","int_handler_122","int_handler_123","int_handler_124","int_handler_125","int_handler_126","int_handler_127","int_handler_128","int_handler_129","int_handler_130","int_handler_131","int_handler_132","int_handler_133","int_handler_134","int_handler_135","int_handler_136","int_handler_137","int_handler_138","int_handler_139","int_handler_140","int_handler_141","int_handler_142","int_handler_143","int_handler_144","int_handler_145","int_handler_146","int_handler_147","int_handler_148","int_handler_149","int_handler_150","int_handler_151","int_handler_152","int_handler_153","int_handler_154","int_handler_155","int_handler_156","int_handler_157","int_handler_158","int_handler_159","int_handler_160","int_handler_161","int_handler_162","int_handler_163","int_handler_164","int_handler_165","int_handler_166","int_handler_167","int_handler_168","int_handler_169","int_handler_170","int_handler_171","int_handler_172","int_handler_173","int_handler_174","int_handler_175","int_handler_176","int_handler_177","int_handler_178","int_handler_179","int_handler_180","int_handler_181","int_handler_182","int_handler_183","int_handler_184","int_handler_185","int_handler_186","int_handler_187","int_handler_188","int_handler_189","int_handler_190","int_handler_191","int_handler_192","int_handler_193","int_handler_194","int_handler_195","int_handler_196","int_handler_197","int_handler_198","int_handler_199","int_handler_200","int_handler_201","int_handler_202","int_handler_203","int_handler_204","int_handler_205","int_handler_206","int_handler_207","int_handler_208","int_handler_209","int_handler_210","int_handler_211","int_handler_212","int_handler_213","int_handler_214","int_handler_215","int_handler_216","int_handler_217","int_handler_218","int_handler_219","int_handler_220","int_handler_221","int_handler_222","int_handler_223","int_handler_224","int_handler_225","int_handler_226","int_handler_227","int_handler_228","int_handler_229","int_handler_230","int_handler_231","int_handler_232","int_handler_233","int_handler_234","int_handler_235","int_handler_236","int_handler_237","int_handler_238","int_handler_239","int_handler_240","int_handler_241","int_handler_242","int_handler_243","int_handler_244","int_handler_245","int_handler_246","int_handler_247","int_handler_248","int_handler_249","int_handler_250","int_handler_251","int_handler_252","int_handler_253","int_handler_254","int_handler_255","int_handler_32","int_handler_33","int_handler_34","int_handler_35","int_handler_36","int_handler_37","int_handler_38","int_handler_39","int_handler_40","int_handler_41","int_handler_42","int_handler_43","int_handler_44","int_handler_45","int_handler_46","int_handler_47","int_handler_48","int_handler_49","int_handler_50","int_handler_51","int_handler_52","int_handler_53","int_handler_54","int_handler_55","int_handler_56","int_handler_57","int_handler_58","int_handler_59","int_handler_60","int_handler_61","int_handler_62","int_handler_63","int_handler_64","int_handler_65","int_handler_66","int_handler_67","int_handler_68","int_handler_69","int_handler_70","int_handler_71","int_handler_72","int_handler_73","int_handler_74","int_handler_75","int_handler_76","int_handler_77","int_handler_78","int_handler_79","int_handler_80","int_handler_81","int_handler_82","int_handler_83","int_handler_84","int_handler_85","int_handler_86","int_handler_87","int_handler_88","int_handler_89","int_handler_90","int_handler_91","int_handler_92","int_handler_93","int_handler_94","int_handler_95","int_handler_96","int_handler_97","int_handler_98","int_handler_99","Tss","TssStacks","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","inner","into","into","new","set_privilege_stack","stacks","take_interrupt_stack","try_from","try_from","try_into","try_into","type_id","type_id","are_enabled","debug","disable","enable","enable_and_nop64","wait","without","FrameNotPresent","Level1","Level1","Level2","Level2","Level3","Level3","Level4","Size1GiB","Size1GiB","Size2MiB","Size2MiB","Size4KiB","Size4KiB","WalkTableIterResult","WalkTableResult","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_pml4","init","init","init","init","init","init","into","into","into","into","into","into","iter","iter","iter","iter","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Pfa","allocate_frame","borrow","borrow_mut","deallocate_frame","deref","deref_mut","drop","from","init","into","try_from","try_into","type_id","AddressSpace","KernelStack","MAX_STACK_COUNT","PAGE_FLAGS","Stack","StackLimitHit","StackType","Stacks","TY","USER_HEAP_TOP","USER_STACK_TOP","UserStack","VIRT_STACK_PAGES","VIRT_STACK_SIZE","VIRT_STACK_SIZE_ALL","base_alloc","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cleanup","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","empty","eq","eq","eq","extent_4k_pages","extra_alloc","fmt","fmt","fmt","fmt","free","from","from","from","from","from","from","grow","guard_page","init","init","init","init","init","init","init","into","into","into","into","into","into","kernel_stacks","limit_4k_pages","new","new","new","page_fault","page_map","region","region","region","take","take_kernel_stack_lazy","take_kernel_stack_prealloc","take_lazy","take_prealloc","take_user_stack_lazy","take_user_stack_prealloc","to_owned","to_owned","to_owned","to_owned","top","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","user_stacks","with_limit","SyscallRegs","arg0","arg1","arg2","arg3","arg4","borrow","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","from","init","init","into","set_handler","syscall_id","to_string","try_from","try_into","type_id","user_instr_ptr","user_stack_ptr","userland","ThreadLocalStorage","borrow","borrow_mut","cpu","deref","deref_mut","drop","from","init","init","init","into","kernel_stack","try_from","try_into","type_id","user_stack","CURRENT_ADDRESS_SPACE","HIGHER_HALF_DIRECT_MAPPING","KERNEL_EXECUTABLE","KERNEL_EXECUTABLE_MAPS","KERNEL_STACKS","MapToError","NotAligned","Overflow","PageMap","TryMapSizedError","WrongSize","activate","borrow","borrow","borrow_mut","borrow_mut","cr3","current","debug","deref","deref","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","init","init","into","into","is_active","is_mapped","map","mark_owned","new","page_fault","phys_to_virt","try_from","try_from","try_into","try_into","type_id","type_id","unmap","virt_to_phys"],"q":[[0,"hyperion_arch_x86_64"],[16,"hyperion_arch_x86_64::context"],[35,"hyperion_arch_x86_64::cpu"],[59,"hyperion_arch_x86_64::cpu::gdt"],[94,"hyperion_arch_x86_64::cpu::idt"],[109,"hyperion_arch_x86_64::cpu::ints"],[133,"hyperion_arch_x86_64::cpu::ints::other"],[357,"hyperion_arch_x86_64::cpu::tss"],[389,"hyperion_arch_x86_64::int"],[396,"hyperion_arch_x86_64::paging"],[487,"hyperion_arch_x86_64::pmm"],[501,"hyperion_arch_x86_64::stack"],[633,"hyperion_arch_x86_64::syscall"],[660,"hyperion_arch_x86_64::tls"],[677,"hyperion_arch_x86_64::vmm"],[725,"x86_64::addr"],[726,"core::ops::range"],[727,"core::fmt"],[728,"core::fmt"],[729,"core::any"],[730,"x86_64::structures::idt"],[731,"x86_64::structures::idt"],[732,"core::ops::function"],[733,"x86_64::structures::paging::page_table"],[734,"x86_64::structures::paging::page_table"],[735,"x86_64::structures::paging::page"],[736,"x86_64::structures::paging::frame"],[737,"core::fmt"],[738,"core::cmp"],[739,"hyperion_mem::vmm"],[740,"alloc::string"],[741,"core::mem::maybe_uninit"],[742,"x86_64::structures::paging::page"]],"d":["","","","","","","","","","","","","","","<code>PageMap</code> is the Page Table Manager","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Safety","","","Safety","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Safety","","","","","","","","","","","","","","","","","PT (Page Table)","","PD (Page Directory)","","PDP (Page Directory Pointer)","","PML4 (Level 4 Page Map)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","also the max thread count per process","","stacks have a guard page to trigger the page fault","","","","","","the first frame of the stack","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","size of the stack in 4k pages, used in PageFault stack …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","won’t allocate the stack, this only makes sure the guard …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","limit how much the stack is allowed to grow, in 4k pages …","","","","","","","","","Safety","","","","","","","","","","","the location of where the top of the stack is mapped in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","init <code>syscall</code> and <code>sysret</code>","","Calls <code>U::from(self)</code>.","","","","","","","","","Safety","","","","GDT + IDT + TSS","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","kernel stack for syscalls","","","","temporary store for user space stack","","","","level 3 entries 510 and 511 in level 4 entry 511","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Safety","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,0,13,13,13,13,13,13,13,13,13,0,13,0,13,0,13,13,0,13,13,13,0,13,13,0,0,15,14,15,14,14,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,14,14,15,15,14,15,14,15,14,15,14,14,14,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,20,16,20,16,16,20,16,20,16,20,16,20,16,20,16,20,16,16,20,16,16,16,20,16,20,16,20,16,20,0,0,0,0,0,0,0,57,0,33,0,33,0,33,0,57,33,57,33,57,33,0,0,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,26,27,28,29,57,33,26,27,28,29,26,57,33,26,27,28,29,57,33,26,27,28,29,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,57,33,26,27,28,29,0,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,39,0,0,0,0,39,0,0,0,0,0,0,38,45,47,41,42,38,44,45,47,41,42,38,44,38,41,42,38,44,41,42,38,44,45,38,45,47,41,42,38,44,45,47,41,42,38,44,45,47,41,42,38,38,44,38,41,42,38,38,38,41,42,38,44,45,45,47,41,42,38,44,38,38,45,47,41,42,38,38,44,45,47,41,42,38,44,47,38,45,47,38,38,47,39,41,42,45,47,47,45,45,47,47,41,42,38,44,38,45,47,41,42,38,44,45,47,41,42,38,44,45,47,41,42,38,44,47,38,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,49,49,0,49,49,49,49,49,49,49,0,0,51,51,51,51,51,51,51,0,51,51,51,51,51,51,51,51,0,0,0,0,0,53,53,53,0,0,53,10,10,53,10,53,10,10,10,10,53,10,53,10,10,53,53,10,53,10,53,10,53,10,10,10,10,10,10,10,10,53,10,53,10,53,10,10],"f":[0,0,[[],1],[[],2],[[],1],0,0,0,[[],3],[[],1],0,[[],[[5,[4]]]],0,0,0,[[],1],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[6,-1,[]],[6,-1,[]],[6,1],[[7,8],9],[-1,-1,[]],[[],6],[-1,-2,[],[]],[10,7],[[10,4],7],0,[[7,7],1],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[13,13],[[-1,-2],1,[],[]],[6,-1,[]],[6,-1,[]],[6,1],[[13,8],9],[-1,-1,[]],0,0,0,0,[[],1],[[],6],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],0,0,[-1,12,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],1,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[[15,8],9],[[14,8],9],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[15,1],[16,15],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[6,-1,[]],[6,-1,[]],[6,1],[[17,8],9],[-1,-1,[]],[[],6],[-1,-2,[],[]],[17,1],[16,17],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],0,0,[[18,3],1],[18,1],[18,1],[18,1],[18,1],[18,1],[[18,3],2],[[18,3],1],[18,1],[[18,3],1],[18,2],[18,1],0,[18,1],[[18,19],1],[[18,3],1],[[18,3],1],[18,1],[[18,3],1],[18,1],[[18,3],1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],16],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[[16,8],9],[[20,8],9],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],16],[[16,4],1],0,[20,[[22,[21]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[[],23],[[],1],[[],1],[[],1],[[],1],[[],1],[-2,-1,[],[[25,[],[[24,[-1]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[[26,8],9],[[27,8],9],[[28,8],9],[[29,8],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[30,26],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[27,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[28,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[29,[[0,[[34,[],[[31,[[1,[6,32,33]]]]]]]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[35,[[22,[[37,[36]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,[37,[36]]],1],[6,-1,[]],[6,-1,[]],[6,1],[-1,-1,[]],[[],6],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[-1]],10],1,[39,40]],[41,41],[42,42],[[[38,[-1]]],[[38,[-1]]],43],[44,44],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[],[[45,[-1]]],[39,40]],[[],[[38,[-1]]],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[6,1],[6,1],[6,1],[[[38,[-1]]],1,[]],[6,1],[6,1],[[],[[38,[-1]]],[]],[[41,41],23],[[42,42],23],[[[38,[-1]],[38,[-1]]],23,46],0,0,[[41,8],9],[[42,8],9],[[[38,[-1]],8],9,40],[[44,8],9],[[[45,[-1]],[38,[-1]]],1,[39,40]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[38,[-1]],10,3],[[11,[1,44]]],[39,40]],[[[38,[-1]]],4,[39,40]],[[],6],[[],6],[[],6],[[],6],[[],6],[[[38,[-1]],10],1,[39,40]],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],[[45,[-1]]],[39,40]],[10,47],[4,[[38,[-1]]],[39,40]],[[[38,[-1]],10,3],48,[39,40]],0,[[],[[5,[3]]]],[[],[[5,[3]]]],[[],[[5,[3]]]],[[[45,[-1]]],[[38,[-1]]],[39,40]],[47,[[38,[41]]]],[[47,3],[[38,[41]]]],[[[45,[-1]],10],[[38,[-1]]],[39,40]],[[[45,[-1]],10,3],[[38,[-1]]],[39,40]],[47,[[38,[42]]]],[[47,3],[[38,[42]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],0,[[4,3],[[38,[-1]]],[39,40]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],49],[6,-1,[]],[6,-1,[]],[6,1],[[49,8],9],[[49,8],9],[-1,-1,[]],[14,1],[[],6],[-1,-2,[],[]],[[],1],0,[-1,50,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],0,0,[[4,4,3,3],2],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[6,-1,[]],[6,-1,[]],[6,1],[-1,-1,[]],[51,1],[[[52,[51]],13],51],[[],6],[-1,-2,[],[]],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],0,0,0,0,0,0,0,0,0,0,0,0,[10,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,37],[[],10],[10,1],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,1],[10,1],[6,1],[[[53,[-1]],8],9,[40,54]],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[10,23],[[10,[5,[4]],32],23],[[10,[5,[4]],55,32],1],[10,1],[[],10],[[10,4,56],48],[[10,55],4],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,12,[]],[[10,[5,[4]]],1],[[10,4],[[22,[55]]]]],"c":[],"p":[[1,"tuple"],[1,"never"],[1,"u64"],[5,"VirtAddr",725],[5,"Range",726],[1,"usize"],[5,"Context",16],[5,"Formatter",727],[8,"Result",727],[5,"PageMap",677],[6,"Result",728],[5,"TypeId",729],[5,"CpuState",35],[5,"SegmentSelectors",59],[5,"Gdt",59],[5,"Tss",357],[5,"Idt",94],[5,"InterruptStackFrame",730],[5,"PageFaultErrorCode",730],[5,"TssStacks",357],[1,"u16"],[6,"Option",731],[1,"bool"],[17,"Output"],[10,"FnOnce",732],[5,"Level4",396],[5,"Level3",396],[5,"Level2",396],[5,"Level1",396],[5,"PageTable",733],[17,"Item"],[5,"PageTableFlags",733],[6,"WalkTableIterResult",396],[10,"Iterator",734],[5,"Pfa",487],[6,"Size4KiB",735],[5,"PhysFrame",736],[5,"Stack",501],[10,"StackType",501],[10,"Debug",727],[5,"KernelStack",501],[5,"UserStack",501],[10,"Clone",737],[5,"StackLimitHit",501],[5,"Stacks",501],[10,"PartialEq",738],[5,"AddressSpace",501],[8,"PageFaultResult",739],[5,"SyscallRegs",633],[5,"String",740],[5,"ThreadLocalStorage",660],[20,"MaybeUninit",741],[6,"TryMapSizedError",677],[10,"PageSize",735],[5,"PhysAddr",725],[6,"Privilege",739],[6,"WalkTableResult",396]],"b":[[645,"impl-Display-for-SyscallRegs"],[646,"impl-Debug-for-SyscallRegs"]]},\
"hyperion_backtrace":{"doc":"","t":"GIPPPFPPPHNNNNNNNNNNONNHHHHHOHONNNNNNNHH","n":["BacktraceError","BacktraceResult","ElfNotLoaded","ElfParse","Err","FrameInfo","Inner","NoSymtabOrStrtab","Ok","base_ptr","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","instr_ptr","into","into","kernel_base","print_backtrace","print_backtrace_from","print_symtab","symbol","symbol_name","symbol_noerr","symbol_offs","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unwind_stack","unwind_stack_from"],"q":[[0,"hyperion_backtrace"],[40,"x86_64::addr"],[41,"core::fmt"],[42,"core::fmt"],[43,"core::any"],[44,"core::ops::function"]],"d":["","","","","Contains the error value","","","","Contains the success value","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Safety","","returns the <code>symbol_name + offset</code> for the provided …","","","","","","","","","","","","Safety"],"i":[0,0,4,4,13,0,4,4,13,0,4,2,4,2,2,2,4,2,4,2,2,4,2,0,0,0,0,0,2,0,2,2,4,2,4,2,4,2,0,0],"f":[0,0,0,0,0,0,0,0,0,[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],3,[],[]],[[4,5],6],[[2,5],6],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],7],[[],3],[1,3],[[],[[8,[3,4]]]],[7,[[8,[[3,[9,10]],4]]]],0,[7,2],0,[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,3,[[12,[2]]]],[[1,-1],3,[[12,[2]]]]],"c":[],"p":[[5,"VirtAddr",40],[5,"FrameInfo",0],[1,"tuple"],[6,"BacktraceError",0],[5,"Formatter",41],[8,"Result",41],[1,"u64"],[6,"Result",42],[1,"str"],[1,"usize"],[5,"TypeId",43],[10,"FnMut",44],[8,"BacktraceResult",0]],"b":[]},\
"hyperion_bitmap":{"doc":"","t":"FFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["AtomicBitmap","Bitmap","borrow","borrow","borrow_mut","borrow_mut","default","fill","fill","fmt","from","from","from","from","from_mut","get","into","into","is_empty","is_empty","iter","iter_bytes","iter_false","iter_true","len","len","load","new","new","set","store","swap","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"hyperion_bitmap"],[38,"core::sync::atomic"],[39,"core::fmt"],[40,"core::fmt"],[41,"core::iter::traits::iterator"],[42,"core::sync::atomic"],[43,"core::any"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","iterator over indexes of 0 bits","iterator over indexes of 1 bits","","","","","","","","","","","","","",""],"i":[0,0,2,1,2,1,1,2,1,1,2,2,2,1,2,1,2,1,2,1,1,1,1,1,2,1,2,2,1,1,2,2,2,1,2,1,2,1],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[2,3,4],5],[[1,3],5],[[1,6],7],[[[9,[8]]],2],[-1,-1,[]],[[[10,[8]]],2],[-1,-1,[]],[[[9,[8]]],2],[[1,11],[[12,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[2,3],[1,3],[1,[[0,[[14,[],[[13,[3]]]]]]]],[1,[[0,[[14,[],[[13,[8]]]]]]]],[1,[[0,[[14,[],[[13,[11]]]]]]]],[1,[[0,[[14,[],[[13,[11]]]]]]]],[2,11],[1,11],[[2,11,4],[[12,[3]]]],[[[9,[15]]],2],[[[9,[8]]],1],[[1,11,3],[[12,[5]]]],[[2,11,3,4],[[12,[5]]]],[[2,11,3,4],[[12,[3]]]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]]],"c":[],"p":[[5,"Bitmap",0],[5,"AtomicBitmap",0],[1,"bool"],[6,"Ordering",38],[1,"tuple"],[5,"Formatter",39],[8,"Result",39],[1,"u8"],[1,"slice"],[1,"array"],[1,"usize"],[6,"Option",40],[17,"Item"],[10,"Iterator",41],[5,"AtomicU8",38],[6,"Result",42],[5,"TypeId",43]],"b":[[10,"impl-From%3C%26mut+%5Bu8%5D%3E-for-AtomicBitmap%3C\'a%3E"],[12,"impl-From%3C%26mut+%5Bu8;+N%5D%3E-for-AtomicBitmap%3C\'a%3E"]]},\
"hyperion_boot":{"doc":"","t":"JJCHHHHHHHHHHHHHFNNNNONNNNHNONNONNNNO","n":["BOOT_STACK_SIZE","NAME","args","boot_cpu","cmdline","cpu_count","framebuffer","hhdm_offset","init","kernel_file","lapics","memmap","phys_addr","rsdp","smp_init","virt_addr","Arguments","borrow","borrow_mut","clone","clone_into","cmdline","default","eq","fmt","from","get","get","had_unrecognized","into","parse","serial_log_level","to_owned","try_from","try_into","type_id","video_log_level"],"q":[[0,"hyperion_boot"],[16,"hyperion_boot::args"],[37,"hyperion_boot_interface::smp"],[38,"core::option"],[39,"hyperion_boot_interface::framebuffer"],[40,"core::iter::traits::iterator"],[41,"hyperion_boot_interface::map"],[42,"core::fmt"],[43,"core::fmt"],[44,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],1],[[],[[3,[2]]]],[[],4],[[],[[3,[5]]]],[[],6],[[],7],[[],[[3,[[9,[8]]]]]],[[],[[0,[[12,[],[[10,[11]]]]]]]],[[],[[0,[[12,[],[[10,[13]]]]]]]],[[],4],[[],[[3,[7]]]],[[],7],[[],4],0,[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],7,[],[]],0,[[],14],[[14,14],15],[[14,16],17],[-1,-1,[]],[[],14],[[],14],0,[-1,-2,[],[]],[2,14],0,[-1,-2,[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,19,[]],0],"c":[],"p":[[5,"Cpu",37],[1,"str"],[6,"Option",38],[1,"usize"],[5,"FramebufferCreateInfo",39],[1,"u64"],[1,"tuple"],[1,"u8"],[1,"slice"],[17,"Item"],[1,"u32"],[10,"Iterator",40],[5,"Memmap",41],[5,"Arguments",16],[1,"bool"],[5,"Formatter",42],[8,"Result",42],[6,"Result",43],[5,"TypeId",44]],"b":[]},\
"hyperion_boot_interface":{"doc":"","t":"PFPFPFGPONNNNNNNNONNNNNNNNNNNNNNONNNNNNNNNNNNNOONOONNNNNNNNONNNNO","n":["BootloaderReclaimable","Cpu","Framebuffer","FramebufferCreateInfo","KernelAndModules","Memmap","Memtype","Usable","base","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","clone","clone","clone","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","height","into","into","into","into","is_boot","is_bootloader_reclaimable","is_bootloader_reclaimable","is_framebuffer","is_framebuffer","is_kernel_and_modules","is_kernel_and_modules","is_usable","is_usable","len","local_apic_id","new","pitch","processor_id","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","width"],"q":[[0,"hyperion_boot_interface"],[65,"core::fmt"],[66,"core::fmt"],[67,"core::any"]],"d":["","","","","","","","","physical address memory region base (bottom)","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the memtype is <code>BootloaderReclaimable</code>.","Returns <code>true</code> if the memtype is <code>BootloaderReclaimable</code>.","Returns <code>true</code> if the memtype is <code>Framebuffer</code>.","Returns <code>true</code> if the memtype is <code>Framebuffer</code>.","Returns <code>true</code> if the memtype is <code>KernelAndModules</code>.","Returns <code>true</code> if the memtype is <code>KernelAndModules</code>.","Returns <code>true</code> if the memtype is <code>Usable</code>.","Returns <code>true</code> if the memtype is <code>Usable</code>.","length of the memory region (top - bottom)","","","","","","","","","","","","","","","","","",""],"i":[2,0,2,0,2,0,0,2,1,10,1,2,3,10,1,2,3,10,1,2,3,1,2,3,1,2,3,3,10,1,2,3,10,10,1,2,3,3,1,2,1,2,1,2,1,2,1,3,3,10,3,10,1,2,3,10,1,2,3,1,10,1,2,3,10],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,1],[2,2],[3,3],[[1,1],4],[[2,2],4],[[3,3],4],[[1,5],6],[[2,5],6],[[3,5],6],[[3,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,4],[1,4],[2,4],[1,4],[2,4],[1,4],[2,4],[1,4],[2,4],0,0,[[7,7],3],0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],0,[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],0],"c":[],"p":[[5,"Memmap",0],[6,"Memtype",0],[5,"Cpu",0],[1,"bool"],[5,"Formatter",65],[8,"Result",65],[1,"u32"],[6,"Result",66],[5,"TypeId",67],[5,"FramebufferCreateInfo",0]],"b":[[26,"impl-Display-for-Cpu"],[27,"impl-Debug-for-Cpu"]]},\
"hyperion_boot_limine":{"doc":"","t":"JJHHHHHHHHHHHHH","n":["BOOT_STACK_SIZE","NAME","boot_cpu","cmdline","cpu_count","framebuffer","hhdm_offset","init","kernel_file","lapics","memmap","phys_addr","rsdp","smp_init","virt_addr"],"q":[[0,"hyperion_boot_limine"],[15,"hyperion_boot_interface::smp"],[16,"core::option"],[17,"hyperion_boot_interface::framebuffer"],[18,"core::iter::traits::iterator"],[19,"hyperion_boot_interface::map"]],"d":["","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[[],1],[[],[[3,[2]]]],[[],4],[[],[[3,[5]]]],[[],6],[[],7],[[],[[3,[[9,[8]]]]]],[[],[[0,[[12,[],[[10,[11]]]]]]]],[[],[[0,[[12,[],[[10,[13]]]]]]]],[[],4],[[],[[3,[7]]]],[[],7],[[],4]],"c":[],"p":[[5,"Cpu",15],[1,"str"],[6,"Option",16],[1,"usize"],[5,"FramebufferCreateInfo",17],[1,"u64"],[1,"tuple"],[1,"u8"],[1,"slice"],[17,"Item"],[1,"u32"],[10,"Iterator",18],[5,"Memmap",19]],"b":[]},\
"hyperion_checked":{"doc":"","t":"KKRRMM","n":["CheckedAdd","CheckedSub","Output","Output","checked_add","checked_sub"],"q":[[0,"hyperion_checked"],[6,"core::option"]],"d":["","","","","",""],"i":[0,0,2,4,2,4],"f":[0,0,0,0,[[[2,[],[[1,[-1]]]],-2],[[3,[-1]]],[],[]],[[[4,[],[[1,[-1]]]],-2],[[3,[-1]]],[],[]]],"c":[],"p":[[17,"Output"],[10,"CheckedAdd",0],[6,"Option",6],[10,"CheckedSub",0]],"b":[]},\
"hyperion_clock":{"doc":"","t":"KFMNNNNNNNHNNMNHMNNNN","n":["ClockSource","NopClock","_apic_sleep_simple_blocking","_apic_sleep_simple_blocking","borrow","borrow_mut","deref","deref_mut","drop","from","get","init","into","nanosecond_now","nanosecond_now","set_source_picker","trigger_interrupt_at","trigger_interrupt_at","try_from","try_into","type_id"],"q":[[0,"hyperion_clock"],[21,"core::ops::function"],[22,"core::result"],[23,"core::any"]],"d":["","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,1,5,5,5,5,5,5,5,0,5,5,1,5,0,1,5,5,5,5],"f":[0,0,[[1,2,3],4],[[5,2,3],4],[-1,-2,[],[]],[-1,-2,[],[]],[6,-1,[]],[6,-1,[]],[6,4],[-1,-1,[]],[[],1],[[],6],[-1,-2,[],[]],[1,7],[5,7],[[],4],[[1,7],4],[[5,7],4],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]]],"c":[],"p":[[10,"ClockSource",0],[1,"u16"],[10,"FnMut",21],[1,"tuple"],[5,"NopClock",0],[1,"usize"],[1,"u128"],[6,"Result",22],[5,"TypeId",23]],"b":[]},\
"hyperion_color":{"doc":"","t":"TTFTTTNNONNNNNNNNNNNONNONNN","n":["BLACK","BLUE","Color","GREEN","RED","WHITE","as_arr","as_u32","b","borrow","borrow_mut","clone","default","eq","fmt","from","from_hex","from_hex_bytes","from_hex_bytes_2","from_u32","g","into","new","r","try_from","try_into","type_id"],"q":[[0,"hyperion_color"],[27,"core::fmt"],[28,"core::fmt"],[29,"core::result"],[30,"core::any"]],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,[1,[[3,[2]]]],[1,4],0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[],1],[[1,1],5],[[1,6],7],[-1,-1,[]],[8,[[9,[1]]]],[[[10,[2]]],[[9,[1]]]],[[[3,[2]]],1],[4,1],0,[-1,-2,[],[]],[[2,2,2],1],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]]],"c":[],"p":[[5,"Color",0],[1,"u8"],[1,"array"],[1,"u32"],[1,"bool"],[5,"Formatter",27],[8,"Result",27],[1,"str"],[6,"Option",28],[1,"slice"],[6,"Result",29],[5,"TypeId",30]],"b":[]},\
"hyperion_cpu_id":{"doc":"","t":"FNNHHHNNHNNNNNN","n":["Tls","borrow","borrow_mut","cpu_count","cpu_id","cpu_id_dyn_type","deref","from","init","inner","into","new","try_from","try_into","type_id"],"q":[[0,"hyperion_cpu_id"],[15,"core::cell"],[16,"core::ops::function"],[17,"core::result"],[18,"core::any"]],"d":["","","","<code>cpu_id()</code> &lt; <code>cpu_count()</code>","technically UB to read before a call to <code>init</code> on this CPU","","","Returns the argument unchanged.","initialize <code>cpu_id</code>","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,3,3,0,0,0,3,3,0,3,3,3,3,3,3],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],[[],2],[[[3,[-1]]],-2,[],[]],[-1,-1,[]],[[],4],[[[3,[-1]]],[[6,[[5,[-1]]]]],[]],[-1,-2,[],[]],[-2,[[3,[-1]]],[],[[8,[],[[7,[-1]]]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[1,"usize"],[1,"u8"],[5,"Tls",0],[1,"tuple"],[5,"UnsafeCell",15],[1,"slice"],[17,"Output"],[10,"FnMut",16],[6,"Result",17],[5,"TypeId",18]],"b":[]},\
"hyperion_defer":{"doc":"","t":"FNNNNNNNNNN","n":["Defer","borrow","borrow_mut","drop","from","into","new","take","try_from","try_into","type_id"],"q":[[0,"hyperion_defer"],[11,"core::ops::function"],[12,"core::result"],[13,"core::any"]],"d":["","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],2,3],[-1,-1,[]],[-1,-2,[],[]],[-1,[[1,[-1]]],3],[[[1,[-1]]],-1,3],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]]],"c":[],"p":[[5,"Defer",0],[1,"tuple"],[10,"FnOnce",11],[6,"Result",12],[5,"TypeId",13]],"b":[]},\
"hyperion_driver_acpi":{"doc":"","t":"GGPPPPPPFFFFGFPPPFCNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCHNNNNNNNNNNNNNNNNNNCNCNNNNNNNHCCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSJFFFSFONNNNNNNNNNNNNNNNNNNNNNNONNNNHHNONNNNNNNHNNNNNNNNNNNNOOOOOOOOONNNONNOOOOOONNNNNNNNNNNNNIPFFFJFFGFFPFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNJFFFONNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNONNNNNNNNNNNNOPJFGPNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNPPPPJFGPNNNNNNNNNNNNNNNONNNNNNNNNNNONNNNNNNNNJFGPNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNN","n":["AcpiOem","AcpiVersion","Bochs","InvalidChecksum","InvalidRevision","InvalidSignature","InvalidStructure","Other","RawSdtHeader","ReadOnly","ReadWrite","Reserved","SdtError","StructUnpacker","Utf8Error","V1","V2","WriteOnly","apic","backtrack","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checksum_of","checksum_of_slice","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","hpet","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","ioapic","left","madt","new","next","next_unchecked","now_at","parse","read","read","read_unaligned_volatile","rsdp","rsdt","skip","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpack","write","write","APIC_CALIBRATION_MICROS","APIC_PERIOD_MULT","APIC_TIMER_HANDLER","ApicId","ApicRegs","ApicTls","IRQ_APIC_SPURIOUS","Lapic","arbitration_priority","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","current","current","current_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","destination_format","drop","drop","drop","drop","enable","enable_timer","eoi","eoi","eq","fmt","fmt","from","from","from","from","get_apic_regs","hash","init","init","init","init","inner","into","into","into","into","is_ioapic_compatible","iter","lapic_id","lapic_ver","logical_destination","lvt_error","lvt_lint_0","lvt_lint_1","lvt_perf_mon_counters","lvt_thermal_sensor","lvt_timer","new","new","partial_cmp","processor_priority","regs","regs_mut","remote_read","spurious_interrupt_vector","task_priority","timer_current","timer_divide","timer_init","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","CounterValue","DoesntExist","GeneralCaps","GeneralConfig","GeneralInterruptStatus","HPET","Hpet","HpetDevice","HpetError","HpetRegs","RawHpetBits","Sdt","TimerN","TimerNConfigAndCaps","TimerNHandle","_apic_sleep_simple_blocking","as_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","caps","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comparator_count","comparator_value","config","config_and_caps","count_size_cap","counter_size","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","enable","femtos","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","fsb_enable","fsb_int_del_cap","handler","init","init","init","init","init","init","init","init","init","init","init","init","init","int_ack","int_enable","int_route","int_route_cap","int_trigger","interrupt_status","into","into","into","into","into","into","into","into","into","into","into","leg_rt","leg_rt_cap","legacy_replacement","len","main_counter_value","micros","millis","minutes","mode","nanos","nanos_to_deadline","nanos_to_ticks_i","nanos_to_ticks_u","nanosecond_now","next_timer","now_bytes","num_tim_cap","period","period","periodic_int_cap","picos","read","reserved","rev_id","seconds","set_comparator_count","set_comparator_value","set_config","set_config_and_caps","set_count_size_cap","set_counter_size","set_enable","set_fsb_enable","set_fsb_int_del_cap","set_int_enable","set_int_route","set_int_route_cap","set_int_trigger","set_interrupt_status","set_leg_rt","set_leg_rt_cap","set_legacy_replacement","set_main_counter_value","set_mode","set_num_tim_cap","set_period","set_periodic_int_cap","set_reserved","set_rev_id","set_size_cap","set_value_set","set_vendor_id","size_cap","sleep_until","ticks_to_nanos_i","ticks_to_nanos_u","timer_n_int_status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","trigger_interrupt_at","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_init","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_set","vendor_id","write","IO_APICS","IoApic","IoApicInfo","IoApicRegs","addr","any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","fmt","fmt","from","from","from","gsi_base","id","init","init","init","init","into","into","into","iter","register_select_register","set_irq","set_irq_any","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","window_register","DoesntExist","MADT","Madt","MadtError","Sdt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","fmt","fmt","from","from","from","init","init","init","into","into","io_apics","local_apic_addr","to_owned","to_owned","try_from","try_from","try_init","try_into","try_into","type_id","type_id","InvalidChecksum","InvalidRevision","InvalidSignature","NoRsdp","RSDP","Rsdp","RsdpError","Utf8Error","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","extended","fmt","fmt","from","from","from","get","init","init","init","into","into","ptr","to_owned","to_owned","try_from","try_from","try_init","try_into","try_into","type_id","type_id","RSDT","Rsdt","RsdtError","SdtHeader","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","extended","find_table","fmt","fmt","from","from","from","from","get","init","init","init","into","into","iter","iter_headers","to_owned","to_owned","try_from","try_from","try_init","try_into","try_into","type_id","type_id"],"q":[[0,"hyperion_driver_acpi"],[173,"hyperion_driver_acpi::apic"],[268,"hyperion_driver_acpi::hpet"],[520,"hyperion_driver_acpi::ioapic"],[573,"hyperion_driver_acpi::madt"],[615,"hyperion_driver_acpi::rsdp"],[660,"hyperion_driver_acpi::rsdt"],[703,"core::fmt"],[704,"core::fmt"],[705,"hyperion_static_str"],[706,"core::str::error"],[707,"core::option"],[708,"core::result"],[709,"core::marker"],[710,"core::cmp"],[711,"spin::rwlock"],[712,"spin"],[713,"core::hash"],[714,"core::iter::traits::iterator"],[715,"core::ops::function"],[716,"core::any"],[717,"spin::mutex"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bitwise checksum:","bitwise checksum:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Safety","Returns the argument unchanged.","High Precision Event Timer","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Multiple APIC Descriptor Table","Safety","","Safety","","","","","Safety","Root System Description Pointer","Root/eXtended System Descriptor Table","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Table 10-1 Local APIC Register Address Map","","","","","","","","","","","","","","","","","apic id of this processor","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Safety","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","has 64 bit mode capability?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","enable HPET","theoretical max u96 sized output","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","front side bus interrupt mapping enabled","has front side bus interrupt mapping capability?","","","","","","","","","","","","","","","handles a timer interrupt","enable interrupts","I/O APIC routing <code>int_route_cap</code>","interrupt routing capability","interrupt trigger mode 0 = edge-triggered 1 = …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","legacy replacement mapping","has legacy replacement mapping capability?","","","","theoretical max u67 sized output","theoretical max u57 sized output","theoretical max u41 sized output","active mode 0 = one-shot (non-periodic) 1 = periodic","theoretical max u77 sized output","<code>nanos</code> is nanos from now","","","","","","number of timers - 1","HPET counter period in femtoseconds","main counter tick period in femtoseconds","has periodic mode capability?","theoretical max u87 sized output","","","implementation revision ID","theoretical max u47 sized output","","","","","has 64 bit mode capability?","","enable HPET","front side bus interrupt mapping enabled","has front side bus interrupt mapping capability?","enable interrupts","I/O APIC routing <code>int_route_cap</code>","interrupt routing capability","interrupt trigger mode 0 = edge-triggered 1 = …","","legacy replacement mapping","has legacy replacement mapping capability?","","","active mode 0 = one-shot (non-periodic) 1 = periodic","number of timers - 1","main counter tick period in femtoseconds","has periodic mode capability?","","implementation revision ID","has 64 bit mode capability?","write to periodic timer’s accumulator","PCI vendor ID","has 64 bit mode capability?","non blocking sleep, this triggers an interrupt after <code>dur</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","write to periodic timer’s accumulator","PCI vendor ID","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","register selector","","","","","","","","","","","","","register data","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Root/eXtended System Description Pointer","","","","","","","","","","","","","","","","","","<code>ptr</code> is XSDT pointer instead of RSDT pointer","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","a physical address of the Root/eXtended System Descriptor …","","","","","","","","","","RSDT/XSDT","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,6,9,9,9,9,6,0,0,0,0,0,0,9,7,7,0,0,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,0,0,6,7,8,9,1,6,7,8,9,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,6,7,8,9,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,6,7,8,9,9,1,1,0,0,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,0,1,0,1,1,1,1,8,11,16,0,0,0,1,6,7,8,9,1,11,16,17,18,6,7,7,8,9,1,11,16,17,18,6,7,8,9,1,11,16,17,18,6,7,8,9,1,1,16,17,0,0,0,0,0,0,0,0,32,31,28,26,32,31,28,26,32,26,26,26,28,26,28,31,31,28,26,32,31,28,26,32,32,31,28,26,32,0,0,28,32,26,26,32,31,28,26,32,0,26,31,28,26,32,26,31,28,26,32,26,26,32,32,32,32,32,32,32,32,32,31,26,26,32,28,28,32,32,32,32,32,32,26,31,28,26,32,31,28,26,32,31,28,26,32,0,44,0,0,0,0,0,0,0,0,0,44,0,0,0,39,41,41,39,53,49,51,44,43,45,46,47,48,41,39,53,49,51,44,43,45,46,47,48,39,44,43,45,46,47,48,44,43,45,46,47,48,48,49,39,49,43,48,41,39,53,49,51,51,44,43,45,46,47,48,41,39,53,49,51,51,44,43,45,46,47,48,41,39,53,49,51,51,44,43,45,46,47,48,45,39,39,53,49,51,44,43,45,46,47,48,41,39,53,49,51,44,44,43,45,46,47,48,46,46,49,41,39,39,53,49,49,51,44,43,45,46,47,48,39,46,46,46,46,39,41,39,53,49,51,44,43,45,46,47,48,45,43,48,41,39,39,39,39,46,39,39,39,39,39,39,39,43,39,43,46,39,41,48,43,39,48,49,39,49,43,48,45,46,46,46,46,46,46,39,45,43,48,39,46,43,43,46,48,43,46,46,43,46,49,39,39,47,44,43,45,46,47,48,39,41,39,53,49,51,44,43,45,46,47,48,39,41,39,53,49,51,44,43,45,46,47,48,41,39,53,49,51,44,43,45,46,47,48,46,43,41,0,0,0,0,59,57,57,60,59,57,60,59,59,59,57,60,59,57,60,59,57,60,59,59,60,59,57,60,59,59,59,57,57,60,59,57,60,59,57,60,57,57,59,57,60,59,57,60,59,57,60,59,60,62,0,0,0,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,62,61,61,62,61,62,61,61,61,62,61,62,61,61,62,61,62,64,64,64,64,0,0,0,64,63,64,63,64,63,64,63,64,63,64,63,64,63,64,63,63,63,64,63,64,64,63,63,63,64,63,64,63,63,64,63,64,63,63,64,63,64,0,0,0,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,65,65,66,65,66,66,66,65,65,65,66,65,66,65,65,65,66,65,66,65,65,66,65,66],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,4,[]],[[[5,[-1]]],4,[]],[6,6],[7,7],[8,8],[9,9],[1,1],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[[6,6],10],[[7,7],10],[[8,8],10],[[9,9],10],[[1,2],3],[[[11,[-1]],12],13,[14,15]],[[[16,[-1]],12],13,[14,15]],[[[17,[-1]],12],13,[14,15]],[[[18,[-1]],12],13,[14,15]],[[6,12],13],[[7,12],13],[[8,12],13],[[9,12],13],[[1,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[19,6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[20,9],[[],1],[-1,-1,[]],0,[[],3],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,2],0,[[4,2],1],[[1,10],[[21,[-1]]],15],[[1,10],-1,15],[1,4],[[1,[21,[[22,[4]]]]],[[23,[8,9]]]],[[[11,[-1]]],-1,[]],[[[16,[-1]]],-1,[]],[[],-1,[24,15]],0,0,[[1,2],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[4,[[23,[7,-1]]],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[1,10],[[23,[-1,9]]],15],[[[16,[-1]],-1],3,[]],[[[17,[-1]],-1],3,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,26],[[-1,-2],3,[],[]],[[26,26],27],[[],[[29,[28]]]],[[],26],[[],[[30,[28]]]],[[[31,[-1]]],-2,[],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],0,[2,3],[2,3],[2,3],[2,3],[[],3],[[[30,[28]]],3],[28,3],0,[[26,26],10],[[26,12],13],[[32,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],32],[[26,-1],3,33],[[],2],[[],2],[[],2],[[],2],[26,34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,10],[[],[[0,[[36,[],[[35,[26]]]]]]]],0,0,0,0,0,0,0,0,0,[-2,[[31,[-1]]],[],[[38,[],[[37,[-1]]]]]],[34,26],[[26,26],[[21,[27]]]],0,[28,32],[28,32],0,0,0,0,0,0,[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[39,40,38],3],[41,42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[39,43],[44,44],[43,43],[45,45],[46,46],[47,47],[48,48],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[48,4],[49,50],[39,45],[49,46],[43,10],[48,10],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[51,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[51,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],[2,3],[2,3],[2,3],[51,3],[2,3],[2,3],[2,3],[2,3],[2,3],[2,3],[45,10],[39,52],[[39,12],13],[[53,12],13],[[49,12],13],[[51,12],13],[[44,12],13],[[43,12],13],[[45,12],13],[[46,12],13],[[47,12],13],[[48,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[9,44],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[46,54],[46,54],[49,26],[[],2],[[],39],[[],2],[[],2],[[],2],[49,3],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[39,3],[46,10],[46,54],[46,54],[46,10],[39,47],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[45,10],[43,10],[48,10],[41,2],[39,50],[39,52],[39,54],[39,54],[46,10],[39,52],[[39,54],54],[[39,55],55],[[39,54],54],[39,52],[39,51],[39,[[22,[4]]]],[43,54],[39,34],[43,54],[46,10],[39,52],[[41,2,[5,[4]]],[[56,[2]]]],[48,10],[43,54],[39,54],[[48,4],3],[[49,50],3],[[39,45],3],[[49,46],3],[[43,10],3],[[48,10],3],[[45,10],3],[[46,54],3],[[46,54],3],[[46,10],3],[[46,54],3],[[46,54],3],[[46,10],3],[[39,47],3],[[45,10],3],[[43,10],3],[[48,10],3],[[39,50],3],[[46,10],3],[[43,54],3],[[43,54],3],[[46,10],3],[[48,10],3],[[43,54],3],[[46,10],3],[[46,10],3],[[43,54],3],[46,10],[[49,54],3],[[39,55],55],[[39,54],54],[[47,2],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[39,52],3],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[[],[[23,[39,44]]]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[46,10],[43,54],[[41,2,[5,[4]]],[[56,[2]]]],0,0,0,0,0,[[],[[21,[[58,[57]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[59,59],[[-1,-2],3,[],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],[2,3],[[59,59],10],[[60,12],13],[[59,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[[],2],[59,57],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[0,[[36,[],[[35,[[58,[57]]]]]]]]]],0,[[57,4,26,4],3],[[57,4,4],26],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[61,61],[62,62],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],[[61,61],10],[[62,62],10],[[61,12],13],[[62,12],13],[-1,-1,[]],[-1,-1,[]],[9,62],[[],2],[[],61],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[[],[[23,[61,62]]]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[63,63],[64,64],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],[[63,63],10],0,[[63,12],13],[[64,12],13],[-1,-1,[]],[20,64],[-1,-1,[]],[[],63],[[],63],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[[],[[23,[63,64]]]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[65,65],[66,66],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,3],[2,3],0,[[65,[22,[4]]],[[21,[[3,[8,1]]]]]],[[65,12],13],[[66,12],13],[-1,-1,[]],[-1,-1,[]],[20,66],[9,66],[[],65],[[],65],[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[65,[[0,[[36,[],[[35,[1]]]]]]]],[65,[[0,[[36,[],[[35,[[3,[8,1]]]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[[],[[23,[65,66]]]],[-1,[[23,[-2]]],[],[]],[-1,[[23,[-2]]],[],[]],[-1,25,[]],[-1,25,[]]],"c":[],"p":[[5,"StructUnpacker",0],[1,"usize"],[1,"tuple"],[1,"u8"],[1,"slice"],[6,"AcpiOem",0],[6,"AcpiVersion",0],[5,"RawSdtHeader",0],[6,"SdtError",0],[1,"bool"],[5,"ReadOnly",0],[5,"Formatter",703],[8,"Result",703],[10,"Debug",703],[10,"Copy",704],[5,"ReadWrite",0],[5,"WriteOnly",0],[5,"Reserved",0],[5,"StaticStr",705],[5,"Utf8Error",706],[6,"Option",707],[1,"array"],[6,"Result",708],[10,"Sized",704],[5,"TypeId",709],[5,"ApicId",173],[6,"Ordering",710],[5,"Lapic",173],[5,"RwLockReadGuard",711],[8,"RwLockWriteGuard",712],[5,"ApicTls",173],[5,"ApicRegs",173],[10,"Hasher",713],[1,"u32"],[17,"Item"],[10,"Iterator",714],[17,"Output"],[10,"FnMut",715],[5,"Hpet",268],[1,"u16"],[5,"HpetDevice",268],[10,"Any",709],[5,"GeneralCaps",268],[6,"HpetError",268],[5,"GeneralConfig",268],[5,"TimerNConfigAndCaps",268],[5,"GeneralInterruptStatus",268],[5,"RawHpetBits",268],[5,"TimerN",268],[8,"CounterValue",268],[5,"TimerNHandle",268],[1,"u128"],[5,"HpetRegs",268],[1,"u64"],[1,"i64"],[8,"IoResult",716],[5,"IoApic",520],[5,"MutexGuard",717],[5,"IoApicInfo",520],[5,"IoApicRegs",520],[5,"Madt",573],[6,"MadtError",573],[5,"Rsdp",615],[6,"RsdpError",615],[5,"Rsdt",660],[6,"RsdtError",660]],"b":[[684,"impl-From%3CUtf8Error%3E-for-RsdtError"],[685,"impl-From%3CSdtError%3E-for-RsdtError"]]},\
"hyperion_driver_framebuffer":{"doc":"","t":"FNNNNNNNNNNNNN","n":["FboDevice","as_any","borrow","borrow_mut","from","into","len","read","try_from","try_into","type_id","with","with_mut","write"],"q":[[0,"hyperion_driver_framebuffer"],[14,"core::any"],[15,"hyperion_vfs::error"],[16,"core::result"],[17,"core::any"]],"d":["","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[1,3],[[1,3,[5,[4]]],[[6,[3]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-2,-1,[],[[10,[[5,[4]]],[[9,[-1]]]]]],[-2,-1,[],[[10,[[5,[4]]],[[9,[-1]]]]]],[[1,3,[5,[4]]],[[6,[3]]]]],"c":[],"p":[[5,"FboDevice",0],[10,"Any",14],[1,"usize"],[1,"u8"],[1,"slice"],[8,"IoResult",15],[6,"Result",16],[5,"TypeId",14],[17,"Output"],[10,"FnOnce",17]],"b":[]},\
"hyperion_driver_pic":{"doc":"","t":"JFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["PICS","Pic","Pics","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","disable","drop","drop","enable","end_of_interrupt","from","from","init","init","init","into","into","mask","new","read_pit_count","try_from","try_from","try_into","try_into","type_id","type_id","unmask"],"q":[[0,"hyperion_driver_pic"],[33,"core::result"],[34,"core::any"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,2,7,2,7,2,7,2,7,2,2,7,2,2,2,7,2,2,7,2,7,2,2,2,2,7,2,7,2,7,2],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[2,3],[1,3],[1,3],[2,3],[[2,4],3],[-1,-1,[]],[-1,-1,[]],[[],1],[2,3],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[[2,4],3],[[],2],[[],3],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,6,[]],[[2,4],3]],"c":[],"p":[[1,"usize"],[5,"Pics",0],[1,"tuple"],[1,"u8"],[6,"Result",33],[5,"TypeId",34],[5,"Pic",0]],"b":[]},\
"hyperion_driver_pit":{"doc":"","t":"JFNNNNNNNNNNNNNNNN","n":["PIT","Pit","_apic_simple_pit_wait","_apic_sleep_simple_blocking","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","nanosecond_now","new","trigger_interrupt_at","try_from","try_into","type_id"],"q":[[0,"hyperion_driver_pit"],[18,"core::ops::function"],[19,"core::ops::function"],[20,"core::any"]],"d":["","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[[1,2,-1],3,4],[[1,5,6],3],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[7,3],[-1,-1,[]],[[],7],[-1,-2,[],[]],[1,8],[[],1],[[1,8],3],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[5,"Pit",0],[1,"u32"],[1,"tuple"],[10,"FnOnce",18],[1,"u16"],[10,"FnMut",18],[1,"usize"],[1,"u128"],[6,"Result",19],[5,"TypeId",20]],"b":[]},\
"hyperion_driver_ps2":{"doc":"","t":"CCHH","n":["keyboard","mouse","init","init"],"q":[[0,"hyperion_driver_ps2"],[2,"hyperion_driver_ps2::keyboard"],[3,"hyperion_driver_ps2::mouse"]],"d":["","","",""],"i":[0,0,0,0],"f":[0,0,[[],1],[[],1]],"c":[],"p":[[1,"tuple"]],"b":[]},\
"hyperion_driver_qemu":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[],"b":[]},\
"hyperion_driver_rtc":{"doc":"","t":"SJJFFNNNNNNNNNNNNNNNNNNNNNNNNN","n":["CUR_YEAR","RTC","RTC_CENTURY_REG","Rtc","RtcDevice","as_any","borrow","borrow","borrow_mut","borrow_mut","default","enable_ints","from","from","init_clock","int_ack","into","into","len","new","now","now_bytes","read","try_from","try_from","try_into","try_into","type_id","type_id","write"],"q":[[0,"hyperion_driver_rtc"],[30,"core::any"],[31,"time::offset_date_time"],[32,"core::option"],[33,"hyperion_vfs::error"],[34,"core::result"],[35,"core::any"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,3,1,3,1,3,3,3,1,3,3,3,1,1,3,3,3,1,3,1,3,1,3,1,1],"f":[0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],3],[3,4],[-1,-1,[]],[-1,-1,[]],[3,4],[3,4],[-1,-2,[],[]],[-1,-2,[],[]],[1,5],[[],3],[3,[[7,[6]]]],[3,[[9,[8]]]],[[1,5,[10,[8]]],[[11,[5]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[1,5,[10,[8]]],[[11,[5]]]]],"c":[],"p":[[5,"RtcDevice",0],[10,"Any",30],[5,"Rtc",0],[1,"tuple"],[1,"usize"],[5,"OffsetDateTime",31],[6,"Option",32],[1,"u8"],[1,"array"],[1,"slice"],[8,"IoResult",33],[6,"Result",34],[5,"TypeId",30]],"b":[]},\
"hyperion_drivers":{"doc":"","t":"EEHHE","n":["acpi","fbo","lazy_install_early","lazy_install_late","rtc"],"q":[[0,"hyperion_drivers"],[5,"hyperion_vfs::tree"]],"d":["","","","",""],"i":[0,0,0,0,0],"f":[0,0,[-1,1,2],[[],1],0],"c":[],"p":[[1,"tuple"],[10,"IntoNode",5]],"b":[]},\
"hyperion_escape":{"doc":"","t":"CCPPPGFPPPNNNNNNNNNNNNNNNNNFKNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["decode","encode","BgColor","Byte","Bytes","DecodedPart","EscapeDecoder","FgColor","None","Reset","borrow","borrow","borrow_mut","borrow_mut","clear","from","from","into","into","new","next","try_from","try_from","try_into","try_into","type_id","type_id","EncodedPart","EscapeEncoder","borrow","borrow_mut","clone","clone_into","color_to_code","default","fmt","fmt","fmt","from","from","from","into","reset_after","to_owned","to_string","true_black","true_blue","true_cyan","true_darkgrey","true_green","true_grey","true_lightgrey","true_magenta","true_red","true_white","true_yellow","try_from","try_into","type_id","with_escape_code","with_reset"],"q":[[0,"hyperion_escape"],[2,"hyperion_escape::decode"],[27,"hyperion_escape::encode"],[61,"core::result"],[62,"core::any"],[63,"core::clone"],[64,"core::marker"],[65,"hyperion_color"],[66,"alloc::sync"],[67,"core::fmt"],[68,"core::fmt"]],"d":["","","","","Null terminated","","foreground color can be changed like this: …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,2,2,2,0,0,2,2,2,1,2,1,2,1,1,2,1,2,1,1,1,2,1,2,1,2,0,0,6,6,6,6,0,6,6,6,6,6,6,6,6,19,6,6,19,19,19,19,19,19,19,19,19,19,19,6,6,6,19,6],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[1,3],2],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]],[-1,5,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[6,[-1]]],[7,8]],[[-1,-2],9,[],[]],[10,[[12,[11]]]],[[],[[6,[9]]]],[[[6,[-1]],13],14,15],[[[6,[-1]],13],14,16],[[[6,[-1]],13],14,17],[-1,[[6,[-1]]],[]],[-1,-1,[]],[18,-1,[]],[-1,-2,[],[]],[19,[[6,[19]]]],[-1,-2,[],[]],[-1,20,[]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[19,[[6,[19]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]],[[19,11],[[6,[19]]]],[[[6,[-1]],21],[[6,[-1]]],[]]],"c":[],"p":[[5,"EscapeDecoder",2],[6,"DecodedPart",2],[1,"u8"],[6,"Result",61],[5,"TypeId",62],[5,"EncodedPart",27],[10,"Clone",63],[10,"Sized",64],[1,"tuple"],[5,"Color",65],[1,"str"],[5,"Arc",66],[5,"Formatter",67],[8,"Result",67],[10,"Debug",67],[10,"Display",67],[10,"LowerHex",67],[1,"never"],[10,"EscapeEncoder",27],[5,"String",68],[1,"bool"]],"b":[[35,"impl-Debug-for-EncodedPart%3C\'_,+T%3E"],[36,"impl-Display-for-EncodedPart%3C\'_,+T%3E"],[37,"impl-LowerHex-for-EncodedPart%3C\'_,+T%3E"]]},\
"hyperion_framebuffer":{"doc":"","t":"CCCJFFNNNNNNNNNNNNNNNNNNNONONNNONNNNNNNNNOH","n":["font","framebuffer","logger","FONT","Framebuffer","FramebufferInfo","ascii_char","borrow","borrow","borrow_mut","borrow_mut","buf_mut","clear","clone","clone_into","default","deref","deref_mut","eq","fill","fmt","fmt","from","from","get","height","info","info","into","into","new","pitch","pixel","scroll","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","width","_print"],"q":[[0,"hyperion_framebuffer"],[3,"hyperion_framebuffer::font"],[4,"hyperion_framebuffer::framebuffer"],[42,"hyperion_framebuffer::logger"],[43,"hyperion_color"],[44,"core::fmt"],[45,"core::fmt"],[46,"core::option"],[47,"core::result"],[48,"core::any"],[49,"core::fmt"]],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,8,1,8,1,1,8,8,8,1,1,8,1,1,8,1,8,1,8,1,1,1,8,1,8,1,1,8,1,8,1,8,1,8,8,0],"f":[0,0,0,0,0,0,[[1,2,2,3,4,4],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[6,[3]]]],[1,7],[8,8],[[-1,-2],7,[],[]],[[],8],[1,-1,[]],[1,-1,[]],[[8,8],5],[[1,2,2,2,2,4],7],[[1,9],10],[[8,9],10],[-1,-1,[]],[-1,-1,[]],[[],[[12,[[11,[1]]]]]],0,[1,8],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[3]],8],1],0,[[1,2,2,4],7],[[1,2],7],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],0,[15,7]],"c":[],"p":[[5,"Framebuffer",4],[1,"usize"],[1,"u8"],[5,"Color",43],[1,"bool"],[1,"slice"],[1,"tuple"],[5,"FramebufferInfo",4],[5,"Formatter",44],[8,"Result",44],[8,"Mutex",45],[6,"Option",46],[6,"Result",47],[5,"TypeId",48],[5,"Arguments",44]],"b":[]},\
"hyperion_futures":{"doc":"","t":"CCCCCHHHHHFNNNNNNNNNNNNHNNNNNFFFFNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPFGNNNNNNNNNNNNNNNNNNNNNNNNNNNOFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHNNNNNNNNNNNN","n":["executor","keyboard","mpmc","task","timer","pop_task","push_task","run_once","run_tasks","spawn","KeyboardEvents","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","fmt","from","init","into","keyboard_events","poll_next","to_owned","try_from","try_into","type_id","Receiver","Recv","RecvStream","Sender","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","into_future","poll","poll_next","race_stream","recv","send","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_poll_next","try_recv","type_id","type_id","type_id","type_id","Future","None","Process","Task","TaskContext","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","from_future","from_process","init","init","into","into","poll","schedule","try_from","try_from","try_into","try_into","type_id","type_id","wake_by_ref","inner","Sleep","SleepUntil","Ticks","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_future","into_future","new","new","poll","poll","poll_next","sleep","sleep_until","ticks","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"hyperion_futures"],[5,"hyperion_futures::executor"],[10,"hyperion_futures::keyboard"],[29,"hyperion_futures::mpmc"],[94,"hyperion_futures::task"],[126,"hyperion_futures::task::TaskContext"],[127,"hyperion_futures::timer"],[185,"alloc::sync"],[186,"core::option"],[187,"core::future::future"],[188,"core::marker"],[189,"core::fmt"],[190,"core::fmt"],[191,"core::task::wake"],[192,"core::task::poll"],[193,"core::result"],[194,"core::any"],[195,"core::clone"],[196,"hyperion_instant"],[197,"time::duration"]],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","A kernel task","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","async sleep duration","async sleep until deadline","async sleep repeat","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,0,0,0,0,21,22,18,19,21,22,18,19,0,18,19,18,19,21,22,18,19,21,22,18,19,21,22,18,18,19,19,21,22,18,19,21,22,18,19,21,22,18,19,21,21,22,19,19,18,18,19,21,22,18,19,21,22,18,19,22,19,21,22,18,19,28,28,28,0,0,1,28,1,28,1,28,1,28,1,28,1,28,1,1,1,28,1,28,1,1,1,28,1,28,1,28,1,29,0,0,0,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,25,23,24,23,24,23,24,25,0,0,0,23,24,25,23,24,25,23,24,25,23,24,25],"f":[0,0,0,0,0,[[],[[3,[[2,[1]]]]]],[[[2,[1]]],4],[[],[[3,[4]]]],[[],5],[-1,4,[[7,[],[[6,[4]]]],8]],0,[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[[-1,-2],4,[],[]],[[],9],[10,-1,[]],[10,-1,[]],[10,4],[[9,11],12],[-1,-1,[]],[[],10],[-1,-2,[],[]],[[],9],[[[13,[9]],14],[[15,[[3,[-1]]]]],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[4,[[18,[-1]],[19,[-1]]]]],[]],[[[18,[-1]]],[[18,[-1]]],20],[[[19,[-1]]],[[19,[-1]]],20],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,4],[10,4],[[[18,[-1]]],4,[]],[10,4],[[[19,[-1]]],4,[]],[10,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],10],[[],10],[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[13,[[21,[-1]]]],14],[[15,[-2]]],[],[]],[[[13,[[22,[-1]]]],14],[[15,[[3,[-2]]]]],[],[]],[[[19,[-1]]],[[22,[-1]]],[]],[[[19,[-1]]],[[21,[-1]]],[]],[[[18,[-1]],-1],[[3,[4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[[[13,[-1]],14],[[15,[[3,[16]]]]],[]],[[[19,[-1]]],[[3,[-1]]],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,4],[10,4],[-1,-1,[]],[-1,-1,[]],[-1,1,[[7,[],[[6,[4]]]],8]],[[],4],[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[1]]],4],[[[2,[1]]],4],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[[[2,[1]]],4],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23,23],[24,24],[25,25],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,4],[10,4],[10,4],[[23,11],12],[[24,11],12],[[25,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],10],[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[26,23],[27,24],[[[13,[23]],14],[[15,[-1]]],[]],[[[13,[24]],14],[[15,[-1]]],[]],[[[13,[25]],14],[[15,[[3,[-1]]]]],[]],[27,24],[26,23],[27,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]]],"c":[],"p":[[5,"Task",94],[5,"Arc",185],[6,"Option",186],[1,"tuple"],[1,"never"],[17,"Output"],[10,"Future",187],[10,"Send",188],[5,"KeyboardEvents",10],[1,"usize"],[5,"Formatter",189],[8,"Result",189],[5,"Pin",190],[5,"Context",191],[6,"Poll",192],[6,"Result",193],[5,"TypeId",194],[5,"Sender",29],[5,"Receiver",29],[10,"Clone",195],[5,"Recv",29],[5,"RecvStream",29],[5,"SleepUntil",127],[5,"Sleep",127],[5,"Ticks",127],[5,"Instant",196],[5,"Duration",197],[6,"TaskContext",94],[15,"Future",126]],"b":[]},\
"hyperion_instant":{"doc":"","t":"FTNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Instant","ZERO","add","borrow","borrow_mut","checked_add","checked_sub","checked_sub","clone","clone_into","cmp","deref","deref_mut","drop","elapsed","eq","fmt","from","init","into","is_reached","nanosecond","new","now","partial_cmp","sub","sub","to_owned","try_from","try_into","type_id"],"q":[[0,"hyperion_instant"],[31,"time::duration"],[32,"core::option"],[33,"core::cmp"],[34,"core::fmt"],[35,"core::fmt"],[36,"core::any"]],"d":["","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[[1,2],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,2],[[3,[-1]]],[]],[[1,1],[[3,[-1]]],[]],[[1,2],[[3,[-1]]],[]],[1,1],[[-1,-2],4,[],[]],[[1,1],5],[6,-1,[]],[6,-1,[]],[6,4],[1,2],[[1,1],7],[[1,8],9],[-1,-1,[]],[[],6],[-1,-2,[],[]],[1,7],[1,10],[10,1],[[],1],[[1,1],[[3,[5]]]],[[1,2],-1,[]],[[1,1],-1,[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]]],"c":[],"p":[[5,"Instant",0],[5,"Duration",31],[6,"Option",32],[1,"tuple"],[6,"Ordering",33],[1,"usize"],[1,"bool"],[5,"Formatter",34],[8,"Result",34],[1,"u128"],[6,"Result",35],[5,"TypeId",36]],"b":[[6,"impl-CheckedSub-for-Instant"],[7,"impl-CheckedSub%3CDuration%3E-for-Instant"],[25,"impl-Sub%3CDuration%3E-for-Instant"],[26,"impl-Sub-for-Instant"]]},\
"hyperion_int_safe_lazy":{"doc":"Lazy initialized value that doesn’t get initialized with …","t":"FNNNNNNNNNNNNN","n":["IntSafeLazy","as_mut_ptr","borrow","borrow_mut","default","fmt","from","get","get_force","into","new","try_from","try_into","type_id"],"q":[[0,"hyperion_int_safe_lazy"],[14,"core::default"],[15,"core::fmt"],[16,"core::fmt"],[17,"core::ops::function"],[18,"core::result"],[19,"core::any"]],"d":["","Retrieves a mutable pointer to the inner data.","","","Creates a new lazy value using <code>Default</code> as the initializing …","","Returns the argument unchanged.","This is the interrupt safe method for retrieving the value …","This is not the interrupt safe method for retrieving the …","Calls <code>U::from(self)</code>.","Creates a new lazy value with the given initializing …","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[[1,[-1,-2]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],2],[[[1,[-1,-2]],3],4,5,[]],[-1,-1,[]],[[[1,[-1,-2]]],[[6,[-1]]],[],[[8,[],[[7,[-1]]]]]],[[[1,[-1,-2]]],-1,[],[[8,[],[[7,[-1]]]]]],[-1,-2,[],[]],[-1,[[1,[-2,-1]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[5,"IntSafeLazy",0],[10,"Default",14],[5,"Formatter",15],[8,"Result",15],[10,"Debug",15],[6,"Option",16],[17,"Output"],[10,"FnOnce",17],[6,"Result",18],[5,"TypeId",19]],"b":[]},\
"hyperion_interrupts":{"doc":"","t":"PJJSJJGFPPNNNNNNNHNNNNNNHNNNNHNNHNNNNHHHNNNNNNNNN","n":["Apic","INT_ALLOCATOR","INT_CONTROLLER","INT_COUNT","INT_EOI_HANDLER","INT_HANDLERS","IntController","IntHandler","None","Pic","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default_handler","deref","deref","deref_mut","deref_mut","drop","drop","end_of_interrupt","eq","fmt","from","from","handler","init","init","interrupt_handler","into","into","load","new","set_any_interrupt_handler","set_interrupt_handler","set_interrupt_handler_if_free","store","store_if_free","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"hyperion_interrupts"],[49,"core::fmt"],[50,"core::fmt"],[51,"core::ops::function"],[52,"core::result"],[53,"core::any"]],"d":["‘Advanced Programmable Interrupt Timer’","","","","","","","","","The legacy ‘Programmable Interrupt Timer’","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[1,0,0,0,0,0,0,0,1,1,8,1,8,1,1,1,1,0,8,1,8,1,8,1,0,1,1,8,1,0,8,1,0,8,1,8,8,0,0,0,8,8,1,8,1,8,1,8,1],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[],1],[3,2],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,2],[4,2],[3,2],[[1,1],5],[[1,6],7],[-1,-1,[]],[-1,-1,[]],[3,8],[[],4],[[],4],[3,2],[-1,-2,[],[]],[-1,-2,[],[]],[8],[[],8],[-1,[[9,[3]]],[[11,[3],[[10,[5]]]]]],[3,2],[3,5],[8,2],[8,5],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]]],"c":[],"p":[[6,"IntController",0],[1,"tuple"],[1,"u8"],[1,"usize"],[1,"bool"],[5,"Formatter",49],[8,"Result",49],[5,"IntHandler",0],[6,"Option",50],[17,"Output"],[10,"Fn",51],[6,"Result",52],[5,"TypeId",53]],"b":[]},\
"hyperion_kernel":{"doc":"Hyperion","t":"JHHCCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH","n":["ALLOCATOR","_start","init","panic","syscall","panic_handler","_accept","_bind","_connect","_listen","_recv","_send","_socket","accept","bind","call_id","close","connect","dup","exit","futex_wait","futex_wake","get_pid","get_tid","listen","log","nanosleep","nanosleep_until","open","open_dir","palloc","pfree","pthread_spawn","read","recv","rename","send","socket","syscall","timestamp","write","yield_now"],"q":[[0,"hyperion_kernel"],[5,"hyperion_kernel::panic"],[6,"hyperion_kernel::syscall"],[42,"x86_64::addr"],[43,"core::ops::range"],[44,"hyperion_arch_x86_64::vmm"],[45,"core::panic::panic_info"],[46,"hyperion_syscall::net"],[47,"hyperion_syscall::err"],[48,"hyperion_syscall::net"],[49,"core::ops::function"]],"d":["","","","","","","","","","","","","","accept a connection on a socket","bind a socket","","close a file","connect to a socket","duplicate a file descriptor","exit and kill the current process","futex wait","futex wake","pid of the current process","tid of the current thread","start listening to connections on a socket","print a string to logs","sleep at least arg0 nanoseconds","sleep at least until the nanosecond arg0 happens","open a file","open a directory","allocate physical pages and map them to virtual memory","free allocated physical pages","spawn a new thread","read bytes from a file","recv data from a socket","rename the current process","send data to a socket","create a socket","","get the number of nanoseconds after boot","write bytes into a file","give the processor back to the kernel temporarily"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,[[],1],[[[3,[2]],4],5],0,0,[6,1],[7,[[8,[7]]]],[[7,9],[[8,[5]]]],[[7,9],[[8,[5]]]],[7,[[8,[5]]]],[[7,[11,[10]],12],[[8,[12]]]],[[7,[11,[10]],12],[[8,[5]]]],[[13,14,15],[[8,[7]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[[-1,16],[[5,[[8,[12]],9]]],[[18,[16],[[17,[[8,[12]]]]]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,5],[16,[[8,[12]]]],[16,[[8,[12]]]],[16,[[8,[12]]]]],"c":[],"p":[[1,"never"],[5,"VirtAddr",42],[5,"Range",43],[5,"PageMap",44],[1,"tuple"],[5,"PanicInfo",45],[5,"SocketDesc",46],[8,"Result",47],[1,"str"],[1,"u8"],[1,"slice"],[1,"usize"],[5,"SocketDomain",46],[5,"SocketType",46],[5,"Protocol",46],[5,"SyscallRegs",48],[17,"Output"],[10,"FnOnce",49]],"b":[]},\
"hyperion_kernel_impl":{"doc":"","t":"IFFFFFFFIFJNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNONNNNNNNNOONNNNNNNNNNHHNONNNNNNNNNNNNNNNNNNNHNNOHONHHNNNHHHHHONNOOONNNNNNNNNNNNNNNNNNNONNNNNNNNNNN","n":["File","FileInner","LocalSocketConn","PipeInput","PipeOutput","ProcessExtra","Socket","SocketFile","SocketRef","SparseVec","VFS_ROOT","as_any","as_any","as_any","as_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","connection","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","domain","drop","drop","drop","drop","drop","drop","drop","drop","file_ref","files","from","from","from","from","from","from","from","from","get","get_mut","get_socket","get_socket_locked","incoming","incoming","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","len","len","len","map_vfs_err_to_syscall_err","new","new","position","process_ext_with","proto","push","push_file","push_socket","read","read","read","read_slice_parts","read_untrusted_bytes","read_untrusted_bytes_mut","read_untrusted_ref","read_untrusted_str","recv","remove","replace","send","socket_ref","sockets","to_owned","try_connection","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_incoming","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write"],"q":[[0,"hyperion_kernel_impl"],[148,"core::any"],[149,"core::option"],[150,"hyperion_syscall::net"],[151,"hyperion_scheduler::lock"],[152,"alloc::sync"],[153,"hyperion_syscall::err"],[154,"hyperion_scheduler::lock"],[155,"hyperion_scheduler::ipc::pipe"],[156,"hyperion_vfs::error"],[157,"hyperion_syscall::err"],[158,"hyperion_syscall::fs"],[159,"hyperion_vfs::error"],[160,"core::result"],[161,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,3,4,5,9,1,3,4,21,31,5,6,9,1,3,4,21,31,5,6,6,6,5,9,1,3,4,21,31,5,6,9,1,3,4,21,31,5,6,5,9,1,3,4,21,31,5,6,21,4,9,1,3,4,21,31,5,6,9,9,0,0,5,5,9,1,3,4,21,31,5,6,9,1,3,4,21,31,5,6,1,3,5,0,9,6,21,0,5,9,0,0,1,3,5,0,0,0,0,0,6,9,9,6,31,4,6,5,9,1,3,4,21,31,5,6,5,9,1,3,4,21,31,5,6,5,9,1,3,4,21,31,5,6,1,3,5],"f":[0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,2],[4,2],[5,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,6],[[-1,-2],7,[],[]],0,[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],0,[8,7],[8,7],[8,7],[8,7],[8,7],[8,7],[8,7],[8,7],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[9,[-1]],8],[[10,[-1]]],[]],[[[9,[-1]],8],[[10,[-1]]],[]],[11,[[14,[[13,[[12,[5]]]]]]]],[11,[[14,[[16,[15,5]]]]]],[5,[[13,[[17,[6]]]]]],0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,8],[3,8],[5,8],[18,19],[[],[[9,[-1]]],[]],[[],[[7,[6,6]]]],0,[20,4],0,[[[9,[-1]],-1],8,[]],[21,22],[5,11],[[1,8,[24,[23]]],[[25,[8]]]],[[3,8,[24,[23]]],[[25,[8]]]],[[5,8,[24,[23]]],[[25,[8]]]],[[26,26],[[14,[[7,[27,8]]]]]],[[26,26],[[14,[[24,[23]]]]]],[[26,26],[[14,[[24,[23]]]]]],[26,[[14,[-1]]],[]],[[26,26],[[14,[28]]]],0,[[[9,[-1]],8],[[10,[-1]]],[]],[[[9,[-1]],8,-1],[[10,[-1]]],[]],0,0,0,[-1,-2,[],[]],[5,[[10,[6]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[5,[[10,[[13,[[17,[6]]]]]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],0,[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[1,8,[24,[23]]],[[25,[8]]]],[[3,8,[24,[23]]],[[25,[8]]]],[[5,8,[24,[23]]],[[25,[8]]]]],"c":[],"p":[[5,"PipeInput",0],[10,"Any",148],[5,"PipeOutput",0],[5,"ProcessExtra",0],[5,"SocketFile",0],[5,"LocalSocketConn",0],[1,"tuple"],[1,"usize"],[5,"SparseVec",0],[6,"Option",149],[5,"SocketDesc",150],[8,"Mutex",151],[5,"Arc",152],[8,"Result",153],[5,"Futex",151],[5,"ArcMutexGuard",154],[5,"Channel",155],[6,"IoError",156],[5,"Error",153],[5,"Process",157],[5,"FileInner",0],[5,"FileDesc",158],[1,"u8"],[1,"slice"],[8,"IoResult",156],[1,"u64"],[5,"VirtAddr",159],[1,"str"],[6,"Result",160],[5,"TypeId",148],[5,"Socket",0]],"b":[]},\
"hyperion_kernel_info":{"doc":"","t":"JJJJJ","n":["BUILD_REV","BUILD_TIME","NAME","SPLASH","VERSION"],"q":[[0,"hyperion_kernel_info"]],"d":["","","","",""],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[],"b":[]},\
"hyperion_keyboard":{"doc":"","t":"JCHHHHHHHPPPPPPPPPPPPPPGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGFPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNO","n":["LAZY","event","force_init_queue","layouts","next_keyboard_event","provide_keyboard_event","provide_raw_keyboard_event","set_layout","wait_keyboard_event","A","Apps","ArrowDown","ArrowLeft","ArrowRight","ArrowUp","B","Backspace","C","Calculator","CapsLock","D","Delete","E","ElementState","End","Escape","F","F1","F10","F11","F12","F2","F3","F4","F5","F6","F7","F8","F9","G","H","Home","I","Insert","J","K","Key0","Key1","Key2","Key3","Key4","Key5","Key6","Key7","Key8","Key9","KeyCode","KeyboardEvent","L","LAlt","LControl","LShift","LWin","M","Mute","N","NextTrack","Numpad0","Numpad1","Numpad2","Numpad3","Numpad4","Numpad5","Numpad6","Numpad7","Numpad8","Numpad9","NumpadAdd","NumpadDivide","NumpadEnter","NumpadLock","NumpadMultiply","NumpadPeriod","NumpadSubtract","O","Oem1","Oem10","Oem11","Oem12","Oem13","Oem2","Oem3","Oem4","Oem5","Oem6","Oem7","Oem8","Oem9","OemComma","OemMinus","OemPeriod","OemPlus","P","PageDown","PageUp","PauseBreak","Play","PowerOnTestOk","PressHold","PressRelease","PrevTrack","PrintScreen","Q","R","RAlt2","RAltGr","RControl","RControl2","RShift","RWin","Release","Return","S","ScrollLock","Spacebar","Stop","SysRq","T","Tab","TooManyKeys","U","V","VolumeDown","VolumeUp","W","WWWHome","X","Y","Z","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","keycode","partial_cmp","state","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unicode"],"q":[[0,"hyperion_keyboard"],[9,"hyperion_keyboard::event"],[192,"core::option"],[193,"core::task::wake"],[194,"core::task::poll"],[195,"core::cmp"],[196,"core::fmt"],[197,"core::fmt"],[198,"core::any"]],"d":["","","","","","","","","","Letters, Middle Row #1","The ‘Apps’ key (aka ‘Menu’ or ‘Right-Click’)","The down-arrow in the inverted-T","The left-arrow in the inverted-T","The right-arrow in the inverted-T","The up-arrow in the inverted-T","Letters, Bottom Row #5","Backspace","Letters, Bottom Row #3","Multi-media keys - Open Calculator","Caps Lock","Letters, Middle Row #3","The Delete key - bottom Left of the Extended Block","Letters, Top Row #3","","The End key - bottom Middle of the Extended Block","Top Left of the Keyboard","Letters, Middle Row #4","Function Key F1","Function Key F10","Function Key F11","Function Key F12","Function Key F2","Function Key F3","Function Key F4","Function Key F5","Function Key F6","Function Key F7","Function Key F8","Function Key F9","Letters, Middle Row #5","Letters, Middle Row #6","Top Middle of the Extended Block","Letters, Top Row #8","Top Left of the Extended Block","Letters, Middle Row #7","Letters, Middle Row #8","Number Line, Digit 0","Number Line, Digit 1","Number Line, Digit 2","Number Line, Digit 3","Number Line, Digit 4","Number Line, Digit 5","Number Line, Digit 6","Number Line, Digit 7","Number Line, Digit 8","Number Line, Digit 9","Keycodes that can be generated by a keyboard.","","Letters, Middle Row #9","The left-hand Alt key","The left-hand Control key","Left Shift","The left-hand ‘Windows’ key","Letters, Bottom Row #7","Multi-media keys - Volume Mute Toggle","Letters, Bottom Row #6","Multi-media keys - Next Track","The Numpad 0/Insert Key","Numpad 1/End Key","Numpad 2/Arrow Down Key","Numpad 3/Page Down Key","The Numpad 4/Left Arrow key","The Numpad 5 Key","The Numpad 6/Right Arrow key","The Numpad 7/Home key","The Numpad 8/Up Arrow key","The Numpad 9/Page Up key","The Numpad Add/Plus key","The Numpad Divide (or Slash) key","Numpad Enter","The Num Lock key","The Numpad Multiple (or Star) key","The Numppad Period/Delete Key","The Numpad Subtract (or Minus) key","Letters, Top Row #9","The US ANSI Semicolon/Colon key","Extra JIS key (0x79)","Extra JIS key (0x70)","Extra JIS symbol key (0x73)","Extra JIS symbol key (0x7D)","US ANSI <code>/?</code> Key","The US ANSI Single-Quote/At key","US ANSI Left-Square-Bracket key","US ANSI Backslash Key / UK ISO Backslash Key","US ANSI Right-Square-Bracket key","The UK/ISO Hash/Tilde key (ISO layout only)","Symbol key to the left of <code>Key1</code>","Extra JIS key (0x7B)","US ANSI <code>,&lt;</code> key","US Minus/Underscore Key (right of ‘Key0’)","US ANSI <code>.&gt;</code> Key","US Equals/Plus Key (right of ‘OemMinus’)","Letters, Top Row #10","The Page Down key - -bottom Right of the Extended Block","Top Right of the Extended Block","The Pause/Break key","Multi-media keys - Play","Sent when the keyboard boots","","","Multi-media keys - Previous Track","The Print Screen Key","Letters, Top Row #1","Letters, Top Row #4","Used as a ‘hidden’ Right Alt Key (Print Screen = RAlt2 …","The right-hand AltGr key","The right-hand Control key","Used as a ‘hidden’ Right Control Key (Pause = …","Right Shift","The right-hand Win key","","The Return Key","Letters, Middle Row #2","The Scroll Lock key","The Space Bar","Multi-media keys - Stop","The Sys Req key (you get this keycode with Alt + …","Letters, Top Row #5","The Tab Key","Sent by the keyboard when too many keys are pressed","Letters, Top Row #7","Letters, Bottom Row #4","Multi-media keys - Increase Volume","Multi-media keys - Decrease Volume","Letters, Top Row #2","Multi-media keys - Open Browser","Letters, Bottom Row #2","Letters, Top Row #6","Letters, Bottom Row #1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,9,9,10,10,10,10,10,10,10,10,10,10,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,4,9,10,4,9,10,4,9,10,4,9,10,10,4,9,10,4,9,10,4,9,10,4,9,10,4,9,10,4,9,10,4,9,10,4,9,10,4,10,4,4,9,10,4,9,10,4,9,10,4,9,10,4],"f":[0,0,[[],1],[[],[[3,[2]]]],[[],[[5,[4]]]],[4,1],[6,1],[2,[[5,[1]]]],[7,[[8,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[9,9],[10,10],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[10,10],11],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,1],[12,1],[12,1],[[4,4],13],[[9,9],13],[[10,10],13],[[4,14],15],[[9,14],15],[[10,14],[[17,[1,16]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],12],[[],12],[[],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[10,10],[[5,[11]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0],"c":[],"p":[[1,"tuple"],[1,"str"],[1,"slice"],[5,"KeyboardEvent",9],[6,"Option",192],[1,"u8"],[5,"Context",193],[6,"Poll",194],[6,"ElementState",9],[6,"KeyCode",9],[6,"Ordering",195],[1,"usize"],[1,"bool"],[5,"Formatter",196],[8,"Result",196],[5,"Error",196],[6,"Result",197],[5,"TypeId",198]],"b":[]},\
"hyperion_kshell":{"doc":"","t":"PGPPPPPPINNNNNNNNNNNNNNHCCNHCNNNNNOOOOFNNNNNNNNNNNNNNNNHFNNNONNNNNNNNNNNONNNNNNN","n":["Err","Error","InsecurePrng","IoError","NamelessFile","Ok","Other","Parse","Result","as_error_source","backtrace","borrow","borrow_mut","cause","deref","deref_mut","description","drop","fmt","fmt","from","init","into","kshell","shell","snake","source","spinner","term","to_string","try_from","try_into","type_id","vzip","msg","resource","source","source","Shell","borrow","borrow_mut","deref","deref_mut","drop","from","init","init","input","into","into_inner","new","try_from","try_into","type_id","vzip","snake_game","Term","borrow","borrow_mut","clear","cursor","cursor_prev","default","deref","deref_mut","drop","flush","from","init","into","new","read_at","size","try_from","try_into","type_id","vzip","write_byte","write_bytes","write_str"],"q":[[0,"hyperion_kshell"],[34,"hyperion_kshell::Error"],[38,"hyperion_kshell::shell"],[55,"hyperion_kshell::snake"],[56,"hyperion_kshell::term"],[80,"snafu::no_std_error"],[81,"snafu::backtrace_inert"],[82,"core::option"],[83,"core::fmt"],[84,"core::fmt"],[85,"core::result"],[86,"core::any"],[87,"hyperion_keyboard::event"]],"d":["Contains the error value","","","","","Contains the success value","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[16,0,2,2,2,16,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,2,0,0,2,2,2,2,2,19,20,20,21,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,0,0,0,0,0,0,[-1,1,[]],[2,[[4,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[2,[[4,[1]]]],[5,-1,[]],[5,-1,[]],[2,6],[5,7],[[2,8],9],[[2,8],9],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],7],0,0,[2,[[4,[1]]]],[[],7],0,[-1,10,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,7],[-1,-1,[]],[[],5],[13,7],[[13,14],[[4,[7]]]],[-1,-2,[],[]],[13,15],[15,13],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],[15,[[16,[7]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[15,7],0,[15,7],[[],15],[5,-1,[]],[5,-1,[]],[5,7],[15,7],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],15],[[15,[7,[5,5]]],17],0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]],[-1,-2,[],[]],[[15,17],7],[[15,[18,[17]]],7],[[15,6],9]],"c":[],"p":[[10,"Error",80],[6,"Error",0],[5,"Backtrace",81],[6,"Option",82],[1,"usize"],[1,"str"],[1,"tuple"],[5,"Formatter",83],[8,"Result",83],[5,"String",84],[6,"Result",85],[5,"TypeId",86],[5,"Shell",38],[5,"KeyboardEvent",87],[5,"Term",56],[8,"Result",0],[1,"u8"],[1,"slice"],[15,"Other",34],[15,"IoError",34],[15,"Parse",34]],"b":[[18,"impl-Debug-for-Error"],[19,"impl-Display-for-Error"]]},\
"hyperion_loader":{"doc":"","t":"FNNNNNNNNNNNNNNHNNN","n":["Loader","borrow","borrow_mut","debug","deref","deref_mut","drop","enter_userland","from","init","init_stack","into","load","load_segment","new","push","try_from","try_into","type_id"],"q":[[0,"hyperion_loader"],[19,"core::option"],[20,"x86_64::addr"],[21,"elf::segment"],[22,"core::marker"],[23,"core::result"],[24,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","push items to the stack","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[3,-1,[]],[3,-1,[]],[3,2],[[1,[5,[4]]],[[6,[2]]]],[-1,-1,[]],[[],3],[[[5,[4]]],7],[-1,-2,[],[]],[1,2],[[1,8],2],[[[5,[9]]],1],[[7,-1],2,10],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,12,[]]],"c":[],"p":[[5,"Loader",0],[1,"tuple"],[1,"usize"],[1,"str"],[1,"slice"],[6,"Option",19],[5,"VirtAddr",20],[5,"ProgramHeader",21],[1,"u8"],[10,"Sized",22],[6,"Result",23],[5,"TypeId",24]],"b":[]},\
"hyperion_log":{"doc":"","t":"TTPPPGKPPPNNNNNQNNQNNQNMQNNMQQMHNQNNNQ","n":["ALL","DEFAULT","Debug","Error","Info","LogLevel","Logger","None","Trace","Warn","borrow","borrow_mut","clone","clone_into","cmp","debug","default","eq","error","fmt","from","info","into","is_enabled","log","parse","partial_cmp","print","print","println","proc_name","set_logger","to_owned","trace","try_from","try_into","type_id","warn"],"q":[[0,"hyperion_log"],[38,"core::cmp"],[39,"core::fmt"],[40,"core::fmt"],[41,"core::fmt"],[42,"core::result"],[43,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,7,0,1,1,7,0,0,7,0,1,0,1,1,1,0],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],3],0,[[],1],[[1,1],4],0,[[1,5],6],[-1,-1,[]],0,[-1,-2,[],[]],[[7,1],4],0,[8,[[9,[1]]]],[[1,1],[[9,[3]]]],[[7,1,10],2],0,0,[7,[[9,[11]]]],[7,2],[-1,-2,[],[]],0,[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],0],"c":[],"p":[[6,"LogLevel",0],[1,"tuple"],[6,"Ordering",38],[1,"bool"],[5,"Formatter",39],[8,"Result",39],[10,"Logger",0],[1,"str"],[6,"Option",40],[5,"Arguments",39],[5,"ArcStr",41],[6,"Result",42],[5,"TypeId",43]],"b":[]},\
"hyperion_log_multi":{"doc":"","t":"HHH","n":["init_logger","set_fbo","set_qemu"],"q":[[0,"hyperion_log_multi"],[3,"hyperion_log"]],"d":["","",""],"i":[0,0,0],"f":[[[],1],[2,1],[2,1]],"c":[],"p":[[1,"tuple"],[6,"LogLevel",3]],"b":[]},\
"hyperion_macros":{"doc":"","t":"QQQQQQQ","n":["array","bmp_to_font","build_rev","build_time","gen_int_handlers","get_int_handlers","rtc_year"],"q":[[0,"hyperion_macros"]],"d":["","","","","","",""],"i":[0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0],"c":[],"p":[],"b":[]},\
"hyperion_mem":{"doc":"","t":"IFNNNQNNHNHCHNNNCJFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPFPFPIKGPMNNNNNNNNNNNNMNNNNNNNNNNNNMMMMMNNNNNNNNNNNNMM","n":["KernelSlabAlloc","Pfa","alloc","borrow","borrow_mut","debug_phys_addr","free","from","from_higher_half","into","is_higher_half","pmm","to_higher_half","try_from","try_into","type_id","vmm","PFA","PageFrame","PageFrameAllocator","alloc","allocate","as_bytes","as_bytes_mut","bitmap_len","borrow","borrow","borrow_mut","borrow_mut","byte_len","deallocate","fmt","fmt","free","free_mem","from","from","into","into","is_empty","leak","len","new","physical_addr","reserved_mem","to_string","total_mem","try_from","try_from","try_into","try_into","type_id","type_id","usable_mem","used_mem","virtual_addr","Err","Handled","Kernel","NotHandled","Ok","PageFaultResult","PageMapImpl","Privilege","User","activate","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","current","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","is_mapped","map","new","page_fault","phys_to_virt","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unmap","virt_to_phys"],"q":[[0,"hyperion_mem"],[17,"hyperion_mem::pmm"],[56,"hyperion_mem::vmm"],[110,"hyperion_slab_alloc"],[111,"x86_64::addr"],[112,"x86_64::addr"],[113,"core::any"],[114,"core::alloc::layout"],[115,"core::ptr::non_null"],[116,"core::alloc"],[117,"core::fmt"],[118,"core::fmt"],[119,"core::ops::range"],[120,"x86_64::structures::paging::page_table"],[121,"core::option"]],"d":["","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Physical memory management","","","","","","","","","Alloc pages","","","","","","","","","number of bytes","","","","Free up pages","Currently free usable memory in bytes","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Leak the PageFrame to get a static mut ref to it","number of pages","Safety","physical address of the first page","Reserved memory in bytes","","System total memory in bytes","","","","","","","System usable memory in bytes","Currently used usable memory in bytes","","Contains the error value","","","","Contains the success value","inversed to make <code>?</code> more useful","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,28,28,28,0,28,28,0,28,0,0,0,28,28,28,0,0,0,0,10,10,11,11,10,10,11,10,11,11,10,10,11,10,10,10,11,10,11,11,11,11,11,11,10,10,10,10,11,10,11,10,11,10,10,11,26,0,21,0,26,0,0,0,21,20,21,22,23,21,22,23,21,22,23,21,22,23,20,21,22,23,21,22,23,21,22,23,21,22,23,20,20,20,20,20,21,22,23,21,22,23,21,22,23,21,22,23,20,20],"f":[0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],0,[2,3],[-1,-1,[]],[4,5],[-1,-2,[],[]],[6,7],0,[5,4],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],0,0,0,0,[[10,1],11],[[10,12],[[8,[[15,[[14,[13]]]],16]]]],[11,[[14,[13]]]],[11,[[14,[13]]]],[10,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,1],[[10,[15,[13]],12],3],[[10,17],18],[[11,17],18],[[10,11],3],[10,1],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,7],[11,[[14,[13]]]],[11,1],[[5,1],11],[11,5],[10,1],[-1,19,[]],[10,1],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[10,1],[10,1],[11,4],0,0,0,0,0,0,0,0,0,[20,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[22,22],[23,23],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],20],[[21,21],7],[[22,22],7],[[23,23],7],[[21,17],18],[[22,17],18],[[23,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[20,[24,[4]],25],7],[[20,[24,[4]],5,25],3],[[],20],[[20,4,21],26],[[20,5],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[[20,[24,[4]]],3],[[20,4],[[27,[5]]]]],"c":[],"p":[[1,"usize"],[5,"PageFrames",110],[1,"tuple"],[5,"VirtAddr",111],[5,"PhysAddr",111],[1,"u64"],[1,"bool"],[6,"Result",112],[5,"TypeId",113],[5,"PageFrameAllocator",17],[5,"PageFrame",17],[5,"Layout",114],[1,"u8"],[1,"slice"],[5,"NonNull",115],[5,"AllocError",116],[5,"Formatter",117],[8,"Result",117],[5,"String",118],[10,"PageMapImpl",56],[6,"Privilege",56],[5,"Handled",56],[5,"NotHandled",56],[5,"Range",119],[5,"PageTableFlags",120],[8,"PageFaultResult",56],[6,"Option",121],[5,"Pfa",0]],"b":[]},\
"hyperion_num_postfix":{"doc":"","t":"TTKFNNNNNNNNNNNNNN","n":["NUM_1000","NUM_1024","NumberPostfix","NumberPostfixed","borrow","borrow_mut","clone","fmt","fmt","from","into","into_inner","postfix","postfix_binary","scale","try_from","try_into","type_id"],"q":[[0,"hyperion_num_postfix"],[18,"core::clone"],[19,"core::fmt"],[20,"core::fmt"],[21,"core::any"]],"d":["","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[7,7,0,0,1,1,1,1,1,1,1,1,7,7,1,1,1,1],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],3],4,5],[[[1,[-1]],3],4,6],[-1,-1,[]],[-1,-2,[],[]],[[[1,[-1]]],-1,[]],[7,[[1,[7]]]],[7,[[1,[7]]]],[[[1,[-1]]],8,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[5,"NumberPostfixed",0],[10,"Clone",18],[5,"Formatter",19],[8,"Result",19],[10,"Display",19],[10,"Debug",19],[10,"NumberPostfix",0],[1,"str"],[6,"Result",20],[5,"TypeId",21]],"b":[[7,"impl-Display-for-NumberPostfixed%3CT%3E"],[8,"impl-Debug-for-NumberPostfixed%3CT%3E"]]},\
"hyperion_random":{"doc":"","t":"KKKKRKNMNMNNNNHHMMHNNNMNM","n":["CryptoRng","Fill","Rng","RngCore","Seed","SeedableRng","fill","fill_bytes","from_rng","from_seed","gen","gen_bool","gen_range","gen_ratio","next_fast_rng","next_secure_rng","next_u32","next_u64","provide_entropy","sample","sample_iter","seed_from_u64","try_fill","try_fill","try_fill_bytes"],"q":[[0,"hyperion_random"],[25,"core::marker"],[26,"rand_core::error"],[27,"core::result"],[28,"core::default"],[29,"core::convert"],[30,"rand::distributions::uniform"],[31,"rand::distributions::uniform"],[32,"rand_chacha::chacha"],[33,"rand::distributions::distribution"],[34,"rand::distributions::distribution"]],"d":["A marker trait used to indicate that an <code>RngCore</code> or …","Types which may be filled with random data","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","","","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data."],"i":[0,0,0,0,9,0,1,5,9,9,1,1,1,1,0,0,5,5,0,1,1,9,3,1,5],"f":[0,0,0,0,0,0,[[1,-1],2,[3,4]],[[5,[7,[6]]],2],[-1,[[11,[[9,[],[[8,[-2]]]],10]]],5,[4,12,[13,[[7,[6]]]]]],[-1,[[9,[],[[8,[-1]]]]],[4,12,[13,[[7,[6]]]]]],[1,-1,[]],[[1,14],15],[[1,-2],-1,16,[[17,[-1]]]],[[1,18,18],15],[[],19],[[],[[21,[20]]]],[5,18],[5,22],[[[7,[6]]],2],[[1,-2],-1,[],[[23,[-1]]]],[[1,-2],[[24,[-2,1,-1]]],[],[[23,[-1]]]],[22,[[9,[],[[8,[-1]]]]],[4,12,[13,[[7,[6]]]]]],[[3,-1],[[11,[2,10]]],[1,4]],[[1,-1],[[11,[2,10]]],[3,4]],[[5,[7,[6]]],[[11,[2,10]]]]],"c":[],"p":[[10,"Rng",0],[1,"tuple"],[10,"Fill",0],[10,"Sized",25],[10,"RngCore",0],[1,"u8"],[1,"slice"],[17,"Seed"],[10,"SeedableRng",0],[5,"Error",26],[6,"Result",27],[10,"Default",28],[10,"AsMut",29],[1,"f64"],[1,"bool"],[10,"SampleUniform",30],[10,"SampleRange",30],[1,"u32"],[5,"ChaCha8Rng",31],[5,"ChaCha20Rng",31],[6,"Option",32],[1,"u64"],[10,"Distribution",33],[5,"DistIter",33]],"b":[]},\
"hyperion_scheduler":{"doc":"","t":"JJCCCHHCCHHHHHHCHHHHHCHHHGFPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOFNNNNNNNNNNNNNNNHHHCFFIFFNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHNNOONOONNOOHNNOONOONNOONNNNNNNNNNNNNNNNNNNNFFIINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNHNNNNHNNNHGPGPPPJFFFKPPPJJJJFFGFONNOMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNONNNNOOHOOONHNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNO","n":["READY","RUNNING","cleanup","condvar","futex","idle","init","ipc","lock","process","recv","rename","running","schedule","send","sleep","sleep","sleep_until","spawn","spawn_userspace","stop","task","task","yield_now","yield_now_wait","Cleanup","CleanupTask","Drop","Ready","Sleep","Wait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","init","init","into","into","run","run","task","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","addr","deadline","val","Condvar","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","notify_all","notify_one","try_from","try_into","type_id","wait","cleanup","wait","wake","pipe","Channel","Closed","Pipe","Receiver","Sender","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","channel_with","clone","clone","clone","clone_into","clone_into","clone_into","close","close","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","fmt","from","from","from","from","init","init","init","init","into","into","into","into","new","new_pipe","new_pipe","pipe","pipe_with","recv","recv","recv","recv","recv","recv_closed","recv_closed","recv_closed","recv_slice","recv_slice","recv_wait","recv_wait","send","send","send","send","send","send_closed","send_closed","send_closed","send_slice","send_slice","send_wait","send_wait","split","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wait_closed","wait_closed","weak_recv_slice","weak_send_slice","AutoFutex","Futex","Mutex","MutexGuard","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","lock","lock","new","new","try_from","try_from","try_into","try_into","try_lock","try_lock","type_id","type_id","unlock","unlock","SleepingTask","borrow","borrow_mut","cmp","deref","deref_mut","drop","eq","finished","from","init","into","partial_cmp","push","try_from","try_into","type_id","wake_up_completed","AllocErr","Dropping","FreeErr","InvalidAddr","InvalidAlloc","OutOfVirtMem","PROCESSES","PageAllocs","Pid","Process","ProcessExt","Ready","Running","Sleeping","TASKS_DROPPING","TASKS_READY","TASKS_RUNNING","TASKS_SLEEPING","Task","TaskInner","TaskState","Tid","address_space","alloc","alloc_at","allocs","as_any","as_str","bitmap","bootloader","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","ext","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free","from","from","from","from","from","from","from","from","from","from","hash","hash","heap_bottom","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","is_dropping","is_ready","is_running","is_sleeping","job","kernel_stack","name","nanos","new","new","new","new","new_any","next","next","next_tid","num","num","partial_cmp","partial_cmp","pid","process","processes","should_terminate","simple_ipc","state","swap_state","switch_because","thread","thread_any","threads","tid","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user_stack"],"q":[[0,"hyperion_scheduler"],[25,"hyperion_scheduler::cleanup"],[60,"hyperion_scheduler::cleanup::Cleanup"],[63,"hyperion_scheduler::condvar"],[79,"hyperion_scheduler::futex"],[82,"hyperion_scheduler::ipc"],[83,"hyperion_scheduler::ipc::pipe"],[184,"hyperion_scheduler::lock"],[218,"hyperion_scheduler::sleep"],[236,"hyperion_scheduler::task"],[443,"time::duration"],[444,"core::iter::traits::iterator"],[445,"core::ops::function"],[446,"core::marker"],[447,"alloc::sync"],[448,"core::result"],[449,"arcstr::arc_str"],[450,"core::convert"],[451,"hyperion_instant"],[452,"core::fmt"],[453,"core::fmt"],[454,"lock_api::mutex"],[455,"x86_64::addr"],[456,"core::sync::atomic"],[457,"core::clone"],[458,"core::marker"],[459,"core::cmp"],[460,"spin::mutex"],[461,"core::option"],[462,"x86_64::structures::paging::page_table"],[463,"x86_64::addr"],[464,"core::hash"],[465,"hyperion_arch_x86_64::stack"],[466,"alloc::boxed"],[467,"alloc::vec"],[468,"alloc::string"]],"d":["","","","","","","init this processors scheduling and immediately switch to …","","","","","","","spawn a new process running this closure or a function or …","","","","","spawn a new thread on the same process","spawn a new thread in the currently running process","destroy the current thread and switch to another thread","","","switch to another thread","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","post switch cleanup","if the value at <code>addr</code> is eq <code>val</code>, go to sleep","wake up threads waiting for events on this <code>addr</code>","","simple P2P 2-copy IPC channel","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","wait for the receiver to be closed","","","","","","","","","","the actual data channel","the actual data channel","wait for the sender to be closed","","","","","","","","","","","","","","","","","","","","","","","","","Sender doesn’t keep the recv side open","Receiver doesn’t keep the send side open","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Warning","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","A process, each process can have multiple ‘tasks’ …","","","","","","","","","","","","","process address space","","","a store for all allocated (and mapped) physical pages","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","extra process info added by the kernel (like file …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","process heap beginning, the end of the user process","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the task state is <code>Dropping</code>.","Returns <code>true</code> if the task state is <code>Ready</code>.","Returns <code>true</code> if the task state is <code>Running</code>.","Returns <code>true</code> if the task state is <code>Sleeping</code>.","thread_entry runs this function once, and stops the …","lazy initialized kernel-space stack, also used when …","process name","cpu time this process (all tasks) has used in nanoseconds","","","","","","","","next thread id","","","","","process id","a shared process ref, multiple tasks can point to the same …","","","naïve PID based IPC","task state, ‘is the task waiting or what?’","","","","","number of threads in this process","thread id","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lazy initialized user-space stack"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,25,22,25,22,22,22,25,22,25,22,25,22,22,25,22,25,22,25,22,25,22,22,22,25,22,25,22,25,22,62,63,62,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,0,0,0,0,0,0,0,37,34,32,33,37,34,32,33,0,0,34,32,33,34,32,33,32,33,36,37,34,32,33,37,34,32,33,37,34,32,32,33,33,34,34,37,34,32,33,37,34,32,33,37,34,32,33,37,36,37,0,0,0,37,33,36,37,37,36,37,37,33,36,37,0,37,32,36,37,37,36,37,37,32,36,37,37,34,32,33,37,34,32,33,37,34,32,33,37,34,32,33,32,33,32,33,0,0,0,0,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,28,39,0,40,40,40,40,40,40,40,0,40,40,40,40,0,40,40,40,0,0,51,0,55,55,48,0,0,0,0,0,51,51,51,0,0,0,0,0,0,0,0,7,7,7,7,49,51,52,19,7,56,52,18,54,48,55,19,51,7,56,52,18,54,48,55,19,51,18,54,48,55,19,51,18,54,48,55,19,51,18,54,52,7,56,56,52,18,54,48,55,19,19,51,7,56,52,18,54,48,55,19,51,7,7,56,56,52,18,54,48,55,19,51,18,54,48,55,51,7,18,52,18,18,54,48,55,51,7,7,56,52,18,54,48,55,19,19,51,18,54,7,7,56,52,18,54,48,55,19,51,7,56,52,18,54,48,55,19,51,51,51,51,51,56,56,7,7,7,18,54,19,19,18,54,7,18,54,18,54,7,56,0,7,7,56,19,0,19,19,7,56,18,54,48,55,19,51,18,7,56,52,18,54,48,55,19,51,7,56,52,18,54,48,55,19,51,7,56,52,18,54,48,55,19,51,56],"f":[0,0,0,0,0,[[],[[0,[[3,[],[[1,[2]]]]]]]],[-1,4,[5,6]],0,0,[[],[[8,[7]]]],[[[10,[9]]],[[13,[11,12]]]],[-1,14,[[16,[15]]]],[[],17],[-1,18,[[16,[19]]]],[[18,[10,[9]]],[[13,[14,12]]]],0,[2,14],[20,14],[-1,14,[5,6]],[[21,21],14],[[],4],0,[[],19],[[],14],[[],14],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[22,22],[[-1,-2],14,[],[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,14],[11,14],[[22,23],24],[-1,-1,[]],[-1,-1,[]],[[],11],[[],11],[-1,-2,[],[]],[-1,-2,[],[]],[25,14],[[22,19],14],[[22,19],25],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[11,-1,[]],[11,-1,[]],[11,14],[-1,-1,[]],[[],11],[-1,-2,[],[]],[[],27],[27,14],[27,14],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,26,[]],[[27,[29,[28,-1]]],[[29,[28,-1]]],[]],[[30,11,19],14],[[31,11],14],[[31,11],14],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[14,[[32,[9]],[33,[9]]]]]],[11,[[14,[[32,[9]],[33,[9]]]]]],[34,34],[[[32,[-1]]],[[32,[-1]]],35],[[[33,[-1]]],[[33,[-1]]],35],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[[32,[-1]]],14,[]],[[[33,[-1]]],14,[]],[[],36],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,14],[11,14],[11,14],[[[32,[-1]]],14,[]],[[[33,[-1]]],14,[]],[11,14],[[34,34],17],[[34,23],24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],11],[[],11],[[],11],[[],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,[[37,[-1]]],[]],[[],36],[[],[[37,[9]]]],[[],[[8,[[37,[9]]]]]],[11,[[8,[[37,[9]]]]]],[[[10,[9]]],[[13,[11,12]]]],[[[37,[-1]]],[[13,[-1,34]]],[]],[[[33,[-1]]],[[13,[-1,34]]],[]],0,0,[[[37,[-1]]],14,[]],0,0,[[[37,[-1]],[10,[-1]]],[[13,[11,34]]],38],[[[33,[-1]],[10,[-1]]],[[13,[11,34]]],38],0,0,[[18,[10,[9]]],[[13,[14,12]]]],[[[37,[-1]],-1],[[13,[14,34]]],[]],[[[32,[-1]],-1],[[13,[14,34]]],[]],0,0,[[[37,[-1]]],14,[]],0,0,[[[37,[-1]],[10,[-1]]],[[13,[14,34]]],38],[[[32,[-1]],[10,[-1]]],[[13,[14,34]]],38],0,0,[[[37,[-1]]],[[14,[[32,[-1]],[33,[-1]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[[[32,[-1]]],14,[]],[[[33,[-1]]],14,[]],[[[32,[-1]],[10,[-1]]],[[13,[11,34]]],38],[[[33,[-1]],[10,[-1]]],[[13,[14,34]]],38],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,14],[11,14],[-1,-1,[]],[-1,-1,[]],[[],11],[[],11],[-1,-2,[],[]],[-1,-2,[],[]],[28,14],[39,14],[[],28],[[],39],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[28,17],[39,17],[-1,26,[]],[-1,26,[]],[28,14],[39,14],0,[-1,-2,[],[]],[-1,-2,[],[]],[[40,40],41],[11,-1,[]],[11,-1,[]],[11,14],[[40,40],17],[[[45,[[44,[[43,[[42,[40]]]]]]]]],[[0,[[3,[],[[1,[19]]]]]]]],[-1,-1,[]],[[],11],[-1,-2,[],[]],[[40,40],[[45,[41]]]],[[20,19],14],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,26,[]],[[[45,[[44,[[43,[[42,[40]]]]]]]]],14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[7,11,46],[[13,[[14,[47,30]],48]]]],[[7,11,47,46],[[13,[30,48]]]],0,[49,50],[51,12],[52,[[44,[53]]]],[[],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[18,18],[54,54],[48,48],[55,55],[19,19],[51,51],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[18,18],41],[[54,54],41],[[],52],[11,-1,[]],[11,-1,[]],[56,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[19,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,14],[7,14],[56,14],[11,14],[11,14],[11,14],[11,14],[11,14],[11,14],[11,14],[11,14],[[18,18],17],[[54,54],17],[[48,48],17],[[55,55],17],[[51,51],17],0,[18,[[45,[[8,[7]]]]]],[[52,23],24],[[18,23],24],[[18,23],24],[[54,23],24],[[48,23],24],[[55,23],24],[[51,23],24],[[7,11,47],[[13,[14,55]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,19,[5,6]],[-1,-1,[]],[-1,-1,[]],[[18,-1],14,57],[[54,-1],14,57],0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[51,17],[51,17],[51,17],[51,17],0,0,0,0,[[18,15,58],[[8,[7]]]],[11,18],[11,54],[-1,19,[5,6]],[[[59,[5]],15],19],[[],18],[7,54],0,[18,11],[54,11],[[18,18],[[45,[41]]]],[[54,54],[[45,[41]]]],0,0,[[],[[60,[[8,[7]]]]]],0,0,0,[[19,51],51],[[19,51,22],14],[[[8,[7]],-1],19,[5,6]],[[[8,[7]],[59,[5]]],19],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,61,[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],0],"c":[],"p":[[17,"Item"],[5,"Duration",443],[10,"Iterator",444],[1,"never"],[10,"FnOnce",445],[10,"Send",446],[5,"Process",236],[5,"Arc",447],[1,"u8"],[1,"slice"],[1,"usize"],[1,"str"],[6,"Result",448],[1,"tuple"],[5,"ArcStr",449],[10,"Into",450],[1,"bool"],[5,"Pid",236],[5,"Task",236],[5,"Instant",451],[1,"u64"],[6,"Cleanup",25],[5,"Formatter",452],[8,"Result",452],[5,"CleanupTask",25],[5,"TypeId",453],[5,"Condvar",63],[5,"Futex",184],[5,"MutexGuard",454],[5,"PhysAddr",455],[5,"AtomicUsize",456],[5,"Sender",83],[5,"Receiver",83],[5,"Closed",83],[10,"Clone",457],[8,"Pipe",83],[5,"Channel",83],[10,"Copy",446],[5,"AutoFutex",184],[5,"SleepingTask",218],[6,"Ordering",458],[5,"Reverse",458],[5,"BinaryHeap",459],[5,"MutexGuard",460],[6,"Option",461],[5,"PageTableFlags",462],[5,"VirtAddr",455],[6,"AllocErr",236],[10,"ProcessExt",236],[10,"Any",453],[6,"TaskState",236],[5,"PageAllocs",236],[5,"Bitmap",463],[5,"Tid",236],[6,"FreeErr",236],[5,"TaskInner",236],[10,"Hasher",464],[5,"AddressSpace",465],[5,"Box",466],[5,"Vec",467],[5,"String",468],[15,"Wait",60],[15,"Sleep",60]],"b":[[338,"impl-Display-for-Pid"],[339,"impl-Debug-for-Pid"]]},\
"hyperion_slab_alloc":{"doc":"Slab allocator","t":"KFFFFMNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNONNNNNNNNNNNN","n":["PageFrameAllocator","PageFrames","Slab","SlabAllocator","SlabAllocatorStats","alloc","alloc","alloc","alloc","as_bytes","as_bytes_mut","as_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_len","dealloc","default","fmt","free","free","free","from","from","from","from","get_slab","into","into","into","into","is_empty","len","new","new","new","pop","push","size","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"hyperion_slab_alloc"],[56,"core::alloc::layout"],[57,"lock_api::mutex"],[58,"core::fmt"],[59,"core::fmt"],[60,"core::option"],[61,"core::result"],[62,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","Safety","Safety","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Safety","","","pop a block from the linked list","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,6,3,3,8,2,2,2,2,3,8,9,2,3,8,9,2,3,3,9,6,3,8,2,3,8,9,3,2,3,8,9,2,2,2,3,8,8,8,8,2,3,8,9,2,3,8,9,2,3,8,9],"f":[0,0,0,0,0,[1,2],[[[3,[-1,-2]],4],5,6,7],[[[3,[-1,-2]],1],5,6,7],[[[8,[-1,-2]],5,9],5,6,7],[2,[[10,[5]]]],[2,[[10,[5]]]],[2,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,1],[[[3,[-1,-2]],5,4],11,6,7],[[],[[3,[-1,-2]]],[],7],[[9,12],13],[2,11],[[[3,[-1,-2]],[14,[5]]],11,6,7],[[[8,[-1,-2]],9,[14,[5]]],11,6,7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[3,[-1,-2]],1],[[15,[[11,[5,[8,[-1,-2]]]]]]],[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,16],[2,1],[[5,1],2],[[],[[3,[-1,-2]]],[],7],[1,[[8,[-1,-2]]],[],7],[[[8,[-1,-2]],5,9],5,6,7],[[[8,[-1,-2]],[14,[5]]],11,6,7],0,[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]]],"c":[],"p":[[1,"usize"],[5,"PageFrames",0],[5,"SlabAllocator",0],[5,"Layout",56],[1,"u8"],[10,"PageFrameAllocator",0],[10,"RawMutex",57],[5,"Slab",0],[5,"SlabAllocatorStats",0],[1,"slice"],[1,"tuple"],[5,"Formatter",58],[8,"Result",58],[5,"NonNull",59],[6,"Option",60],[1,"bool"],[6,"Result",61],[5,"TypeId",62]],"b":[[6,"impl-GlobalAlloc-for-SlabAllocator%3CP,+Lock%3E"],[7,"impl-SlabAllocator%3CP,+Lock%3E"]]},\
"hyperion_static_str":{"doc":"","t":"FNNNNNNNNNNNNNNNNNN","n":["StaticStr","as_bytes","as_str","as_str_checked","borrow","borrow_mut","clone","deref","eq","fmt","fmt","from","from_utf8","from_utf8_unchecked","hash","into","try_from","try_into","type_id"],"q":[[0,"hyperion_static_str"],[19,"core::str::error"],[20,"core::result"],[21,"core::fmt"],[22,"core::fmt"],[23,"core::any"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","Safety","","Calls <code>U::from(self)</code>.","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[1,[[3,[2]]]],[1,4],[1,[[6,[4,5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[1,-1,[]],[[1,1],7],[[1,8],9],[[1,8],9],[-1,-1,[]],[[[10,[2]]],[[6,[1,5]]]],[[[10,[2]]],1],[[1,-1],11,12],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,13,[]]],"c":[],"p":[[5,"StaticStr",0],[1,"u8"],[1,"slice"],[1,"str"],[5,"Utf8Error",19],[6,"Result",20],[1,"bool"],[5,"Formatter",21],[8,"Result",21],[1,"array"],[1,"tuple"],[10,"Hasher",22],[5,"TypeId",23]],"b":[[9,"impl-Debug-for-StaticStr%3CSIZE%3E"],[10,"impl-Display-for-StaticStr%3CSIZE%3E"]]},\
"hyperion_sync":{"doc":"","t":"FNNNNQNNQNNNN","n":["TakeOnce","borrow","borrow_mut","from","into","last","new","none","once","take","try_from","try_into","type_id"],"q":[[0,"hyperion_sync"],[13,"lock_api::mutex"],[14,"core::option"],[15,"core::result"],[16,"core::any"]],"d":["","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","CPUs race and only the last one returns true","","","CPUs race and only the first one returns true","","","",""],"i":[0,1,1,1,1,0,1,1,0,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],0,[-1,[[1,[-1,-2]]],[],2],[[],[[1,[-1,-2]]],[],2],0,[[[1,[-1,-2]]],[[3,[-1]]],[],2],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]]],"c":[],"p":[[5,"TakeOnce",0],[10,"RawMutex",13],[6,"Option",14],[6,"Result",15],[5,"TypeId",16]],"b":[]},\
"hyperion_syscall":{"doc":"","t":"HHHHHCHCHHHHCHHHHCHHHHHHHHHHHHHHHHHHHTTTTPFTTTTTTTTTTTTTTPTITTTNNNNNNNNNNNNNNNNNTTTFFTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSTTFTFFFTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["accept","bind","close","connect","dup","err","exit","fs","futex_wait","futex_wake","get_pid","get_tid","id","listen","log","nanosleep","nanosleep_until","net","open","open_dir","palloc","pfree","pthread_spawn","read","recv","rename","send","socket","syscall_0","syscall_1","syscall_2","syscall_3","syscall_4","syscall_5","timestamp","write","yield_now","ALREADY_EXISTS","BAD_FILE_DESCRIPTOR","CLOSED","CONNECTION_REFUSED","Err","Error","FILESYSTEM_ERROR","INTERRUPTED","INVALID_ADDRESS","INVALID_ALLOC","INVALID_DOMAIN","INVALID_FLAGS","INVALID_TYPE","INVALID_UTF8","NOT_A_DIRECTORY","NOT_A_FILE","NOT_FOUND","NO_SUCH_PROCESS","OUT_OF_MEMORY","OUT_OF_VIRTUAL_MEMORY","Ok","PERMISSION_DENIED","Result","UNEXPECTED_EOF","UNKNOWN_PROTOCOL","WRITE_ZERO","as_str","borrow","borrow_mut","clone","cmp","decode","encode","eq","fmt","fmt","from","hash","into","partial_cmp","try_from","try_into","type_id","APPEND","CREATE","CREATE_NEW","FileDesc","FileOpenFlags","READ","READ_WRITE","TRUNC","WRITE","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","complement","contains","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","insert","intersection","intersects","into","into","into_iter","is_all","is_empty","iter","iter_names","not","partial_cmp","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","ACCEPT","BIND","CLOSE","CONNECT","DUP","EXIT","FUTEX_WAIT","FUTEX_WAKE","GET_PID","GET_TID","LISTEN","LOG","NANOSLEEP","NANOSLEEP_UNTIL","OPEN","OPEN_DIR","PALLOC","PFREE","PTHREAD_SPAWN","READ","RECV","RENAME","SEND","SOCKET","TIMESTAMP","WRITE","YIELD_NOW","LOCAL","LOCAL","Protocol","STREAM","SocketDesc","SocketDomain","SocketType","UNIX","UNIX","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","cmp","cmp","cmp","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","partial_cmp","partial_cmp","partial_cmp","partial_cmp","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"hyperion_syscall"],[37,"hyperion_syscall::err"],[80,"hyperion_syscall::fs"],[153,"hyperion_syscall::id"],[180,"hyperion_syscall::net"],[237,"core::sync::atomic"],[238,"core::ptr::non_null"],[239,"core::option"],[240,"core::cmp"],[241,"core::fmt"],[242,"core::fmt"],[243,"core::result"],[244,"core::any"],[245,"core::iter::traits::collect"],[246,"bitflags::iter"],[247,"bitflags::iter"]],"d":["accept a connection on a socket","bind a name to a socket","close a file","connect to a socket","duplicate a file descriptor","","exit the process with a code","","futex wait if value at <code>addr</code> is <code>val</code>","wake <code>num</code> threads that are sleeping on this <code>addr</code>","get the current process id","get the current thread id","","start listening for connections on a socket","print a string into kernel logs","context switch from this process and switch back when <code>nanos</code>…","context switch from this process and switch back when …","","open a file","open a directory","allocate physical pages and map to heap","deallocate physical pages and unmap from heap","spawn a new pthread for the same process","read from a file","read data from a socket","rename the current process","send data to a socket","create a socket","Safety","Safety","Safety","Safety","Safety","Safety","u128 nanoseconds since boot","write into a file","context switch from this process, no guarantees about …","","","","","Contains the error value","","","","","","","","","","","","","","","","Contains the success value","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","writes append to the file","create file if it doesn’t already exist","create file if it doesn’t already exist and err if it …","","","open file with read caps","open file with read and write caps","truncate file on open (if the file already existed)","open file with write caps","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,20,20,2,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,2,20,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,5,11,5,11,11,11,11,11,5,11,11,5,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,11,5,11,5,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,18,0,17,0,0,0,16,18,1,16,17,18,1,16,17,18,1,16,17,18,1,16,17,18,1,16,17,18,1,16,17,18,1,16,17,18,1,16,17,18,1,16,17,18,1,16,17,18,1,16,17,18,1,16,17,18],"f":[[1,[[2,[1]]]],[[1,3],[[2,[4]]]],[5,[[2,[4]]]],[[1,3],[[2,[4]]]],[[5,5],[[2,[5]]]],0,[6,7],0,[[8,9],4],[[8,9],4],[[],9],[[],9],0,[1,[[2,[4]]]],[3,[[2,[4]]]],[10,4],[10,4],0,[[3,11,9],[[2,[5]]]],[3,[[2,[5]]]],[9,[[2,[[14,[[13,[12]]]]]]]],[[[13,[12]],9],[[2,[4]]]],[9,4],[[5,[15,[12]]],[[2,[9]]]],[[1,[15,[12]],9],[[2,[9]]]],[3,[[2,[4]]]],[[1,[15,[12]],9],[[2,[4]]]],[[16,17,18],[[2,[1]]]],[9,[[2,[9]]]],[[9,9],[[2,[9]]]],[[9,9,9],[[2,[9]]]],[[9,9,9,9],[[2,[9]]]],[[9,9,9,9,9],[[2,[9]]]],[[9,9,9,9,9,9],[[2,[9]]]],[[],[[2,[19]]]],[[5,[15,[12]]],[[2,[9]]]],[[],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[20,3],[-1,-2,[],[]],[-1,-2,[],[]],[20,20],[[20,20],21],[9,[[2,[9]]]],[[[2,[9]]],9],[[20,20],22],[[20,23],24],[[20,23],24],[-1,-1,[]],[[20,-1],4,25],[-1,-2,[],[]],[[20,20],[[14,[21]]]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],0,0,0,0,0,0,0,0,0,[[],11],[[11,11],11],[[11,11],4],[[11,11],11],[[11,11],4],[11,9],[11,9],[[11,11],11],[[11,11],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,5],[11,11],[[5,5],21],[[11,11],21],[11,11],[[11,11],22],[[11,11],11],[[],11],[[5,5],22],[[11,11],22],[[11,-1],4,[[29,[],[[28,[11]]]]]],[[5,23],24],[[11,23],24],[[11,23],24],[[11,23],24],[[11,23],24],[[11,23],24],[-1,-1,[]],[-1,-1,[]],[9,[[14,[11]]]],[9,11],[9,11],[9,11],[-1,11,[[29,[],[[28,[11]]]]]],[3,[[14,[11]]]],[[11,11],4],[[11,11],11],[[11,11],22],[-1,-2,[],[]],[-1,-2,[],[]],[11,-1,[]],[11,22],[11,22],[11,[[30,[11]]]],[11,[[31,[11]]]],[11,11],[[5,5],[[14,[21]]]],[[11,11],[[14,[21]]]],[[11,11],4],[[11,11,22],4],[[11,11],11],[[11,11],4],[[11,11],11],[[11,11],4],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[[11,11],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[16,16],[17,17],[18,18],[[1,1],21],[[16,16],21],[[17,17],21],[[18,18],21],[[1,1],22],[[16,16],22],[[17,17],22],[[18,18],22],[[1,23],24],[[16,23],24],[[17,23],24],[[18,23],24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[14,[21]]]],[[16,16],[[14,[21]]]],[[17,17],[[14,[21]]]],[[18,18],[[14,[21]]]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,27,[]],[-1,27,[]],[-1,27,[]],[-1,27,[]]],"c":[],"p":[[5,"SocketDesc",180],[8,"Result",37],[1,"str"],[1,"tuple"],[5,"FileDesc",80],[1,"i64"],[1,"never"],[5,"AtomicUsize",237],[1,"usize"],[1,"u64"],[5,"FileOpenFlags",80],[1,"u8"],[5,"NonNull",238],[6,"Option",239],[1,"slice"],[5,"SocketDomain",180],[5,"SocketType",180],[5,"Protocol",180],[1,"u128"],[5,"Error",37],[6,"Ordering",240],[1,"bool"],[5,"Formatter",241],[8,"Result",241],[10,"Hasher",242],[6,"Result",243],[5,"TypeId",244],[17,"Item"],[10,"IntoIterator",245],[5,"Iter",246],[5,"IterNames",246]],"b":[[71,"impl-Debug-for-Error"],[72,"impl-Display-for-Error"],[94,"impl-FileOpenFlags"],[95,"impl-Flags-for-FileOpenFlags"],[114,"impl-LowerHex-for-FileOpenFlags"],[115,"impl-Binary-for-FileOpenFlags"],[116,"impl-Debug-for-FileOpenFlags"],[117,"impl-UpperHex-for-FileOpenFlags"],[118,"impl-Octal-for-FileOpenFlags"],[122,"impl-FileOpenFlags"],[123,"impl-Flags-for-FileOpenFlags"]]},\
"hyperion_timer":{"doc":"","t":"JJFNNNONNNNNNNNNHNNNO","n":["TIMER_DEADLINES","TIMER_HANDLER","TimerWaker","borrow","borrow_mut","cmp","deadline","deref","deref_mut","drop","eq","fmt","from","init","into","partial_cmp","provide_sleep_wake","try_from","try_into","type_id","waker"],"q":[[0,"hyperion_timer"],[21,"core::cmp"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::result"],[25,"core::any"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","interrupt provided wakeup to a sleep","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],2],0,[3,-1,[]],[3,-1,[]],[3,4],[[1,1],5],[[1,6],7],[-1,-1,[]],[[],3],[-1,-2,[],[]],[[1,1],[[8,[2]]]],[[],4],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0],"c":[],"p":[[5,"TimerWaker",0],[6,"Ordering",21],[1,"usize"],[1,"tuple"],[1,"bool"],[5,"Formatter",22],[8,"Result",22],[6,"Option",23],[6,"Result",24],[5,"TypeId",25]],"b":[]},\
"hyperion_vfs":{"doc":"","t":"ZCCCCCKKMMMNMMMNMNPPPPGIPPPPPPPNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNONNNNNNNONNNNNONNNNNNNNIPPIKKRRGIIINNNNNNNNNNNNNNNMNMNNNNNN","n":["AnyMutex","device","error","path","ramdisk","tree","DirectoryDevice","FileDevice","as_any","create_node","get_node","is_empty","len","nodes","read","read_exact","write","write_exact","AlreadyExists","Err","FilesystemError","Interrupted","IoError","IoResult","IsADirectory","NotADirectory","NotFound","Ok","PermissionDenied","UnexpectedEOF","WriteZero","as_error_source","backtrace","borrow","borrow_mut","cause","description","fmt","fmt","from","into","msg","source","to_string","try_from","try_into","type_id","Path","PathBuf","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","eq","file_name","fmt","fmt","from","from","from","from_str","into","is_absolute","is_dir","is_file","iter","join","join","new","parent","pop","set","split","to_absolute","to_owned","to_owned","try_from","try_into","type_id","type_id","Directory","File","as_any","borrow","borrow","borrow_mut","borrow_mut","children","create_node","from","from","get_node","into","into","len","name","new","new","new_empty","new_ref","nodes","parent","read","try_from","try_from","try_into","try_into","type_id","type_id","write","DirRef","Directory","File","FileRef","IntoNode","IntoRoot","Mut","Mut","Node","Root","WeakDirRef","WeakFileRef","borrow","borrow_mut","clone","clone_into","find","find_dir","find_file","from","insert","insert_dir","insert_file","install_dev","install_dev_ref","install_dev_with","into","into_node","into_node","into_root","into_root","new_root","to_owned","try_from","try_into","type_id"],"q":[[0,"hyperion_vfs"],[6,"hyperion_vfs::device"],[18,"hyperion_vfs::error"],[47,"hyperion_vfs::path"],[87,"hyperion_vfs::ramdisk"],[117,"hyperion_vfs::tree"],[153,"core::any"],[154,"lock_api::mutex"],[155,"alloc::sync"],[156,"snafu::no_std_error"],[157,"snafu::backtrace_inert"],[158,"core::option"],[159,"core::fmt"],[160,"core::fmt"],[161,"core::result"],[162,"core::any"],[163,"core::convert"],[164,"alloc::borrow"],[165,"alloc::vec"],[166,"core::convert"]],"d":["","","","","","","","","","","","","","","","","","","","Contains the error value","","","","","","","","Contains the success value","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","a directory with 0 or more files, like <code>/home/</code>","a normal file, like <code>/etc/fstab</code>","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,3,3,1,1,3,1,1,1,1,15,7,15,15,0,0,15,15,15,7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,23,24,23,23,24,24,23,24,24,24,24,24,23,23,24,23,24,24,23,24,23,23,23,23,23,24,24,23,24,24,23,23,23,24,24,24,23,24,0,0,29,29,30,29,30,30,30,29,30,30,29,30,29,30,29,30,29,30,30,30,29,29,30,29,30,29,30,29,0,5,5,0,0,0,38,37,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,37,5,38,39,5,5,5,5,5],"f":[0,0,0,0,0,0,0,0,[1,2],[[3,4,[5,[-1]]],[[7,[6]]],8],[[3,4],[[7,[[5,[-1]]]]],8],[1,9],[1,10],[3,[[7,[[11,[[12,[[11,[4]]]]]]]]]],[[1,10,[12,[13]]],[[7,[10]]]],[[1,10,[12,[13]]],[[7,[6]]]],[[1,10,[12,[13]]],[[7,[10]]]],[[1,10,[12,[13]]],[[7,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,14,[]],[15,[[17,[16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[15,[[17,[14]]]],[15,4],[[15,18],19],[[15,18],19],[-1,-1,[]],[-1,-2,[],[]],[15,4],[15,[[17,[14]]]],[-1,20,[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],0,0,[23,23],[24,23],[23,4],[-1,-2,[],[]],[-1,-2,[],[]],[24,23],[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[[-1,-2],6,[],[]],[24,-1,[]],[[24,24],9],[23,[[17,[4]]]],[[23,18],19],[[24,18],19],[4,23],[23,24],[-1,-1,[]],[4,23],[-1,-2,[],[]],[23,9],[23,9],[23,9],[23,[[0,[[26,[],[[25,[4]]]]]]]],[[23,-1],24,[[27,[23]]]],[[24,4],24],[-1,24,[[27,[23]]]],[23,[[17,[23]]]],[24,24],[[24,-1],24,[[27,[23]]]],[23,[[17,[[6,[23,4]]]]]],[[23,23],[[28,[23]]]],[23,-1,[]],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],0,0,[29,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[30,[-1]],4,[5,[-1]]],[[7,[6]]],31],[-1,-1,[]],[-1,-1,[]],[[[30,[-1]],4],[[7,[[5,[-1]]]]],31],[-1,-2,[],[]],[-1,-2,[],[]],[29,10],0,[[[32,[13]]],29],[-1,[[30,[-2]]],[[33,[[11,[4]]]]],31],[[],[[34,[-1]]],31],[-1,[[35,[-2]]],[[33,[[11,[4]]]]],31],[[[30,[-1]]],[[7,[[11,[[12,[[11,[4]]]]]]]]],31],0,[[29,10,[12,[13]]],[[7,[10]]]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[[29,10,[12,[13]]],[[7,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1]]],[[5,[-1]]],[]],[[-1,-2],6,[],[]],[[[5,[-1]],-2,9],[[7,[[5,[-1]]]]],31,[[27,[23]]]],[[[5,[-1]],-2,9],[[7,[[35,[-1]]]]],31,[[27,[23]]]],[[[5,[-1]],-2,9,9],[[7,[[34,[-1]]]]],31,[[27,[23]]]],[-1,-1,[]],[[[5,[-1]],-2,9,[5,[-1]]],[[7,[6]]],31,[[27,[23]]]],[[[5,[-1]],-2,9,[35,[-1]]],[[7,[6]]],31,[[27,[23]]]],[[[5,[-1]],-2,9,[34,[-1]]],[[7,[6]]],31,[[27,[23]]]],[[[5,[-1]],-2,-3],6,31,[[27,[23]]],1],[[[5,[-1]],-2,[34,[-1]]],6,31,[[27,[23]]]],[[[5,[-1]],-2,-3],6,31,[[27,[23]]],1],[-1,-2,[],[]],[[[37,[],[[36,[-1]]]]],[[5,[-1]]],31],[[[5,[-1]]],[[5,[-2]]],31,[]],[[[38,[],[[36,[-1]]]]],[[39,[-1]]],31],[[[39,[-1]]],[[39,[-2]]],31,[]],[[],[[5,[-1]]],31],[-1,-2,[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,22,[]]],"c":[],"p":[[10,"FileDevice",6],[10,"Any",153],[10,"DirectoryDevice",6],[1,"str"],[6,"Node",117],[1,"tuple"],[8,"IoResult",18],[10,"RawMutex",154],[1,"bool"],[1,"usize"],[5,"Arc",155],[1,"slice"],[1,"u8"],[10,"Error",156],[6,"IoError",18],[5,"Backtrace",157],[6,"Option",158],[5,"Formatter",159],[8,"Result",159],[5,"String",160],[6,"Result",161],[5,"TypeId",153],[5,"Path",47],[5,"PathBuf",47],[17,"Item"],[10,"Iterator",162],[10,"AsRef",163],[6,"Cow",164],[5,"File",87],[5,"Directory",87],[25,"AnyMutex",0],[5,"Vec",165],[10,"Into",163],[8,"FileRef",117],[8,"DirRef",117],[17,"Mut"],[10,"IntoNode",117],[10,"IntoRoot",117],[8,"Root",117]],"b":[[37,"impl-Display-for-IoError"],[38,"impl-Debug-for-IoError"]]},\
"libstd":{"doc":"","t":"FCNNNNQQNNCNCNQQCCCNNNNFICNNCNNCCNCCQNNNCCCCCCNNNCQFKFKFIFNNHMHNMNNNNNNNNNNNNNNNNNNNNNNHMMNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNKKPGPRKNNNNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPFFFPFFGFNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNCCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNOFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFGFFFFFFFPFFFFPFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGFKPKYFFFFFKPFFFPKKKPKIPKKKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMMMMMMMMNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNMNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFKFFFFFKRRRFFFFFFFFKFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHMMMMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFRFFFKFFFFFFFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHMHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFPKPKPKGKRFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNMNNNMNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFIFKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKMNFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFTTTFFJJJFFFNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNFFFKKNNNNNNMNNNNNNNNNNMNNNNNNNNNNNMNNNFFIINNNNNNNNNNNNNNNNNNNNNHHHHHCHCHHHHCHHHHCHHHHHHHHHHHHHHHHHHHTTTTPFTTTTTTTTTTTTTTPTITTTNNNNNNNNNNNNNNNNNNNNTTTFFTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSTTFTFFFTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNH","n":["CliArgs","alloc","borrow","borrow_mut","clone","clone_into","eprint","eprintln","fmt","from","fs","into","io","iter","print","println","sync","sys","thread","to_owned","try_from","try_into","type_id","PageAlloc","SlabAlloc","alloc","alloc","alloc","borrow","borrow","borrow_mut","boxed","collections","dealloc","ffi","fmt","format","free","from","into","rc","slice","str","string","sync","task","try_from","try_into","type_id","vec","vec","AllocError","Allocator","Global","GlobalAlloc","Layout","LayoutErr","LayoutError","align","align_to","alloc","alloc","alloc_zeroed","alloc_zeroed","allocate","allocate","allocate_zeroed","allocate_zeroed","array","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","dangling","dealloc","dealloc","deallocate","deallocate","default","eq","eq","eq","extend","extend_packed","fmt","fmt","fmt","fmt","fmt","fmt","for_value","for_value_raw","from","from","from","from","from_size_align","from_size_align_unchecked","grow","grow","grow_zeroed","grow_zeroed","handle_alloc_error","hash","into","into","into","into","new","pad_to_align","padding_needed_for","realloc","realloc","repeat","repeat_packed","shrink","shrink","size","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Borrow","BorrowMut","Borrowed","Cow","Owned","Owned","ToOwned","add","add","add_assign","add_assign","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","clone_into","cmp","default","deref","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","hash","into","into_owned","is_borrowed","is_owned","ne","ne","ne","ne","ne","ne","partial_cmp","to_mut","to_owned","to_owned","to_string","try_from","try_into","type_id","Box","ThinBox","allocator","as_mut","as_ref","assume_init","assume_init","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call","call_mut","call_once","cause","clone","clone","clone","clone","clone_from","clone_from","clone_into","cmp","default","default","default","default","deref","deref","deref_mut","deref_mut","description","downcast","downcast","downcast","downcast_unchecked","downcast_unchecked","downcast_unchecked","drop","drop","eq","finish","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw","from_raw_in","ge","gt","hash","into","into","into_boxed_slice","into_future","into_inner","into_iter","into_pin","into_raw","into_raw_with_allocator","into_searcher","is_contained_in","is_empty","is_prefix_of","is_suffix_of","last","le","leak","len","lt","ne","new","new","new_in","new_uninit","new_uninit_in","new_uninit_slice","new_uninit_slice_in","new_unsize","new_zeroed","new_zeroed_in","new_zeroed_slice","new_zeroed_slice_in","next","next_back","nth","nth_back","partial_cmp","pin","pin_in","poll","poll_next","provide","resume","size_hint","size_hint","source","source","strip_prefix_of","strip_suffix_of","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_uninit_slice","try_new_zeroed","try_new_zeroed_in","try_new_zeroed_slice","type_id","type_id","write","write","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_length_prefix","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","AllocError","BTreeMap","BTreeSet","BinaryHeap","CapacityOverflow","LinkedList","TryReserveError","TryReserveErrorKind","VecDeque","allocator","allocator","append","append","append","append","append","as_mut_slices","as_slice","as_slices","back","back","back_mut","back_mut","binary_heap","binary_search","binary_search_by","binary_search_by_key","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","btree_map","btree_set","capacity","capacity","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","contains","contains","contains","contains_key","cursor_back","cursor_back_mut","cursor_front","cursor_front_mut","default","default","default","default","default","difference","drain","drain","drain_sorted","drop","drop","drop","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_reserve","extend_reserve","extend_reserve","extend_reserve","extract_if","extract_if","extract_if","first","first_entry","first_key_value","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","front","front","front_mut","front_mut","get","get","get","get_key_value","get_mut","get_mut","hash","hash","hash","hash","index","index","index_mut","insert","insert","insert","intersection","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter_sorted","into_keys","into_sorted_vec","into_values","into_vec","is_disjoint","is_empty","is_empty","is_empty","is_empty","is_empty","is_subset","is_superset","iter","iter","iter","iter","iter","iter_mut","iter_mut","iter_mut","keys","kind","last","last_entry","last_key_value","len","len","len","len","len","linked_list","lower_bound","lower_bound_mut","make_contiguous","ne","new","new","new","new","new","new_in","new_in","new_in","new_in","new_in","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partition_point","peek","peek_mut","pop","pop_back","pop_back","pop_first","pop_first","pop_front","pop_front","pop_last","pop_last","push","push_back","push_back","push_front","push_front","range","range","range","range_mut","range_mut","remove","remove","remove","remove","remove_entry","replace","reserve","reserve","reserve_exact","reserve_exact","resize","resize_with","retain","retain","retain","retain","retain_mut","rotate_left","rotate_right","shrink_to","shrink_to","shrink_to_fit","shrink_to_fit","split_off","split_off","split_off","split_off","sub","swap","swap_remove_back","swap_remove_front","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve","try_reserve_exact","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","upper_bound","upper_bound_mut","values","values_mut","vec_deque","with_capacity","with_capacity","with_capacity_in","with_capacity_in","layout","BinaryHeap","Drain","DrainSorted","IntoIter","IntoIterSorted","Iter","PeekMut","allocator","allocator","allocator","allocator","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref_mut","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","last","next","next","next","next","next","next_back","next_back","next_back","pop","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","BTreeMap","Cursor","CursorMut","Entry","ExtractIf","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","OccupiedEntry","OccupiedError","Range","RangeMut","Vacant","VacantEntry","Values","ValuesMut","and_modify","as_cursor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","description","drop","entry","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get_mut","insert","insert","insert_after","insert_after_unchecked","insert_before","insert_before_unchecked","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","key","key","key","key","key","key_mut_unchecked","key_value","key_value","key_value_mut","last","last","last","last","last","last","last","last","last","len","len","len","len","len","len","len","len","max","max","max","max","max","max","min","min","min","min","min","min","move_next","move_next","move_prev","move_prev","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","or_default","or_insert","or_insert_with","or_insert_with_key","peek_next","peek_next","peek_prev","peek_prev","remove","remove_current","remove_current_and_move_back","remove_entry","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value_mut","BTreeSet","Difference","ExtractIf","Intersection","IntoIter","Iter","Range","SymmetricDifference","Union","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","last","last","len","len","max","max","min","min","min","min","min","min","next","next","next","next","next","next","next","next","next_back","next_back","next_back","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Cursor","CursorMut","ExtractIf","IntoIter","Iter","IterMut","LinkedList","as_cursor","back","back","back_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","current","current","default","default","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","front","front","front_mut","index","index","insert_after","insert_before","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","last","last","move_next","move_next","move_prev","move_prev","next","next","next","next","next_back","next_back","next_back","peek_next","peek_next","peek_prev","peek_prev","pop_back","pop_front","push_back","push_front","remove_current","remove_current_as_list","size_hint","size_hint","size_hint","size_hint","splice_after","splice_before","split_after","split_before","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Drain","IntoIter","Iter","IterMut","VecDeque","advance_back_by","advance_back_by","advance_back_by","advance_by","advance_by","advance_by","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","drop","fmt","fmt","fmt","fmt","fold","fold","fold","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","last","last","last","len","len","next","next","next","next","next_back","next_back","next_back","next_back","next_chunk","rfold","rfold","rfold","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","try_fold","try_fold","try_fold","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_rfold","try_rfold","try_rfold","type_id","type_id","type_id","type_id","CString","FromVecWithNulError","IntoStringError","NulError","as_bytes","as_bytes","as_bytes_with_nul","as_c_str","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","default","deref","description","description","drop","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw","from_vec_unchecked","from_vec_with_nul","from_vec_with_nul_unchecked","hash","index","into","into","into","into","into_boxed_c_str","into_bytes","into_bytes","into_bytes_with_nul","into_cstring","into_raw","into_string","into_vec","new","nul_position","partial_cmp","source","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","utf8_error","Alignment","Arguments","Binary","Center","Debug","Debug","DebugList","DebugMap","DebugSet","DebugStruct","DebugTuple","Display","Err","Error","Formatter","FormatterFn","Left","LowerExp","LowerHex","Octal","Ok","Pointer","Result","Right","UpperExp","UpperHex","Write","align","alternate","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","debug_list","debug_map","debug_set","debug_struct","debug_tuple","default","description","entries","entries","entries","entry","entry","entry","entry_with","entry_with","eq","eq","field","field","field_with","field_with","fill","finish","finish","finish","finish","finish","finish_non_exhaustive","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into","into","into","key","key_with","pad","pad_integral","partial_cmp","precision","sign_aware_zero_pad","sign_minus","sign_plus","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_with","width","write","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","write_str","Rc","UniqueRc","Weak","allocator","as_ptr","as_ptr","as_ref","assume_init","assume_init","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","decrement_strong_count","decrement_strong_count_in","default","default","deref","deref","deref_mut","downcast","downcast_unchecked","downgrade","downgrade","drop","drop","drop","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw","from_raw","from_raw_in","from_raw_in","ge","get_mut","get_mut_unchecked","gt","hash","increment_strong_count","increment_strong_count_in","into","into","into","into_inner","into_raw","into_raw","into_raw_and_alloc","into_rc","le","lt","make_mut","ne","new","new","new","new_cyclic","new_in","new_in","new_uninit","new_uninit_in","new_uninit_slice","new_uninit_slice_in","new_zeroed","new_zeroed_in","new_zeroed_slice","new_zeroed_slice_in","partial_cmp","pin","pin_in","ptr_eq","ptr_eq","strong_count","strong_count","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_zeroed","try_new_zeroed_in","try_unwrap","type_id","type_id","type_id","unwrap_or_clone","upgrade","weak_count","weak_count","ArrayChunks","ArrayChunksMut","ArrayWindows","Chunks","ChunksExact","ChunksExactMut","ChunksMut","Concat","EscapeAscii","GroupBy","GroupByMut","Iter","IterMut","Join","Output","Output","Output","RChunks","RChunksExact","RChunksExactMut","RChunksMut","RSplit","RSplitMut","RSplitN","RSplitNMut","SliceIndex","Split","SplitInclusive","SplitInclusiveMut","SplitMut","SplitN","SplitNMut","Windows","advance_back_by","advance_back_by","advance_by","advance_by","all","all","any","any","as_mut_slice","as_ref","as_ref","as_slice","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","concat","count","count","count","count","count","count","count","count","count","count","count","count","count","count","default","default","find","find","find_map","find_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","for_each","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut_ptr_range","from_ptr_range","from_raw_parts","from_raw_parts_mut","from_ref","get","get_mut","get_unchecked","get_unchecked_mut","index","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remainder","into_remainder","into_remainder","into_slice","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_sorted_by","join","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","len","len","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","position","position","range","remainder","remainder","remainder","rposition","rposition","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Bytes","CharIndices","Chars","EncodeUtf16","Err","EscapeDebug","EscapeDefault","EscapeUnicode","FromStr","Lines","LinesAny","MatchIndices","Matches","ParseBoolError","RMatchIndices","RMatches","RSplit","RSplitN","RSplitTerminator","Split","SplitAsciiWhitespace","SplitInclusive","SplitN","SplitTerminator","SplitWhitespace","Utf8Chunk","Utf8Chunks","Utf8Error","advance_by","all","any","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count","description","description","eq","eq","eq","error_len","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_boxed_utf8_unchecked","from_str","from_utf8","from_utf8_mut","from_utf8_unchecked","from_utf8_unchecked_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","invalid","is_empty","last","last","last","last","last","last","len","new","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth_back","offset","pattern","position","remainder","remainder","remainder","remainder","remainder","remainder","remainder","remainder","remainder","rfind","rposition","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_fold","try_fold","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","valid","valid_up_to","CharArrayRefSearcher","CharArraySearcher","CharPredicateSearcher","CharSearcher","CharSliceSearcher","Done","DoubleEndedSearcher","Match","Pattern","Reject","ReverseSearcher","SearchStep","Searcher","Searcher","StrSearcher","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","haystack","haystack","haystack","haystack","haystack","haystack","haystack","into","into","into","into","into","into","into","into_searcher","is_contained_in","is_prefix_of","is_suffix_of","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_match","next_match","next_match","next_match","next_match","next_match","next_match","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_reject","next_reject","next_reject","next_reject","next_reject","next_reject_back","next_reject_back","next_reject_back","next_reject_back","next_reject_back","strip_prefix_of","strip_suffix_of","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Drain","FromUtf16Error","FromUtf8Error","ParseError","String","ToString","add","add_assign","as_bytes","as_bytes","as_mut","as_mut_str","as_mut_vec","as_ref","as_ref","as_ref","as_ref","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","cmp","default","deref","deref_mut","description","description","drain","drop","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","extend_from_within","extend_one","extend_one","extend_one","extend_one","extend_one","extend_reserve","extend_reserve","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_raw_parts","from_str","from_utf16","from_utf16_lossy","from_utf16be","from_utf16be_lossy","from_utf16le","from_utf16le_lossy","from_utf8","from_utf8_lossy","from_utf8_unchecked","hash","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert_str","into","into","into","into","into_boxed_str","into_bytes","into_bytes","into_iter","into_raw_parts","into_searcher","is_contained_in","is_empty","is_prefix_of","is_suffix_of","last","leak","len","ne","ne","ne","new","next","next_back","partial_cmp","pop","push","push_str","remove","remove_matches","replace_range","reserve","reserve_exact","retain","shrink_to","shrink_to_fit","size_hint","split_off","strip_prefix_of","strip_suffix_of","to_owned","to_owned","to_string","to_string","to_string","to_string","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","utf8_error","with_capacity","write_char","write_str","Arc","Weak","allocator","as_ptr","as_ptr","as_ref","assume_init","assume_init","borrow","borrow","borrow","borrow_mut","borrow_mut","cause","clone","clone","clone_into","clone_into","cmp","decrement_strong_count","decrement_strong_count_in","default","default","deref","description","downcast","downcast_unchecked","downgrade","drop","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw","from_raw","from_raw_in","from_raw_in","ge","get_mut","get_mut_unchecked","gt","hash","increment_strong_count","increment_strong_count_in","into","into","into_inner","into_raw","into_raw","le","lt","make_mut","ne","new","new","new_cyclic","new_in","new_in","new_uninit","new_uninit_in","new_uninit_slice","new_uninit_slice_in","new_zeroed","new_zeroed_in","new_zeroed_slice","new_zeroed_slice_in","partial_cmp","pin","pin_in","provide","ptr_eq","ptr_eq","source","strong_count","strong_count","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_zeroed","try_new_zeroed_in","try_pin","try_pin_in","try_unwrap","type_id","type_id","unwrap_or_clone","upgrade","weak_count","weak_count","Wake","wake","wake_by_ref","Drain","ExtractIf","IntoIter","Splice","Vec","advance_back_by","advance_by","allocator","allocator","allocator","allocator","append","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_from","clone_into","clone_into","cmp","count","dedup","dedup_by","dedup_by_key","default","default","deref","deref_mut","drain","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","extend","extend","extend_from_slice","extend_from_within","extend_one","extend_one","extend_reserve","extend_reserve","extract_if","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw_parts","from_raw_parts_in","hash","index","index_mut","insert","into","into","into","into","into","into_boxed_slice","into_flattened","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_raw_parts","into_raw_parts_with_alloc","is_empty","is_empty","is_empty","keep_rest","leak","len","ne","ne","ne","ne","ne","ne","new","new_in","next","next","next","next","next_back","next_back","next_back","next_chunk","partial_cmp","pop","push","push_within_capacity","remove","reserve","reserve_exact","resize","resize_with","retain","retain_mut","set_len","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","spare_capacity_mut","splice","split_at_spare_mut","split_off","swap_remove","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in","Dir","DirEntry","FD","FD","FD","File","OpenOptions","STDERR","STDIN","STDOUT","Stderr","Stdin","Stdout","append","as_desc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","close","create","create_new","drop","file_name","flush","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into_inner","is_dir","lock","lock","lock","new","new","next_entry","open","open","open","read","read","read","size","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","write_str","BufReader","BufWriter","ConstBufReader","Read","Write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","flush","flush","from","from","from","into","into","into","new","new","new","read","read_line","read_line","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","write_fmt","write_str","Condvar","Futex","Mutex","MutexGuard","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","lock","new","notify_all","notify_one","try_from","try_from","try_into","try_into","try_lock","type_id","type_id","unlock","wait","accept","bind","close","connect","dup","err","exit","fs","futex_wait","futex_wake","get_pid","get_tid","id","listen","log","nanosleep","nanosleep_until","net","open","open_dir","palloc","pfree","pthread_spawn","read","recv","rename","send","socket","syscall_0","syscall_1","syscall_2","syscall_3","syscall_4","syscall_5","timestamp","write","yield_now","ALREADY_EXISTS","BAD_FILE_DESCRIPTOR","CLOSED","CONNECTION_REFUSED","Err","Error","FILESYSTEM_ERROR","INTERRUPTED","INVALID_ADDRESS","INVALID_ALLOC","INVALID_DOMAIN","INVALID_FLAGS","INVALID_TYPE","INVALID_UTF8","NOT_A_DIRECTORY","NOT_A_FILE","NOT_FOUND","NO_SUCH_PROCESS","OUT_OF_MEMORY","OUT_OF_VIRTUAL_MEMORY","Ok","PERMISSION_DENIED","Result","UNEXPECTED_EOF","UNKNOWN_PROTOCOL","WRITE_ZERO","as_str","borrow","borrow_mut","clone","clone_into","cmp","decode","encode","eq","fmt","fmt","from","hash","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id","APPEND","CREATE","CREATE_NEW","FileDesc","FileOpenFlags","READ","READ_WRITE","TRUNC","WRITE","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","complement","contains","difference","empty","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","insert","intersection","intersects","into","into","into_iter","is_all","is_empty","iter","iter_names","not","partial_cmp","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_into","try_into","type_id","type_id","union","ACCEPT","BIND","CLOSE","CONNECT","DUP","EXIT","FUTEX_WAIT","FUTEX_WAKE","GET_PID","GET_TID","LISTEN","LOG","NANOSLEEP","NANOSLEEP_UNTIL","OPEN","OPEN_DIR","PALLOC","PFREE","PTHREAD_SPAWN","READ","RECV","RENAME","SEND","SOCKET","TIMESTAMP","WRITE","YIELD_NOW","LOCAL","LOCAL","Protocol","STREAM","SocketDesc","SocketDomain","SocketType","UNIX","UNIX","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","spawn"],"q":[[0,"libstd"],[23,"libstd::alloc"],[51,"libstd::alloc::alloc"],[149,"libstd::alloc::borrow"],[215,"libstd::alloc::boxed"],[377,"libstd::alloc::collections"],[735,"libstd::alloc::collections::TryReserveErrorKind"],[736,"libstd::alloc::collections::binary_heap"],[832,"libstd::alloc::collections::btree_map"],[1127,"libstd::alloc::collections::btree_set"],[1259,"libstd::alloc::collections::linked_list"],[1374,"libstd::alloc::collections::vec_deque"],[1462,"libstd::alloc::ffi"],[1555,"libstd::alloc::fmt"],[1736,"libstd::alloc::rc"],[1861,"libstd::alloc::slice"],[2375,"libstd::alloc::str"],[2827,"libstd::alloc::str::pattern"],[2971,"libstd::alloc::string"],[3147,"libstd::alloc::sync"],[3262,"libstd::alloc::task"],[3265,"libstd::alloc::vec"],[3451,"libstd::fs"],[3542,"libstd::io"],[3580,"libstd::sync"],[3605,"libstd::sys"],[3642,"libstd::sys::err"],[3688,"libstd::sys::fs"],[3765,"libstd::sys::id"],[3792,"libstd::sys::net"],[3857,"libstd::thread"],[3858,"core::iter::traits::double_ended"],[3859,"core::clone"],[3860,"core::result"],[3861,"core::any"],[3862,"hyperion_slab_alloc"],[3863,"core::ptr::non_null"],[3864,"core::marker"],[3865,"core::hash"],[3866,"core::cmp"],[3867,"core::cmp"],[3868,"core::iter::traits::collect"],[3869,"core::hash"],[3870,"core::cmp"],[3871,"core::marker"],[3872,"core::ops::function"],[3873,"core::default"],[3874,"core::any"],[3875,"core::iter::traits::exact_size"],[3876,"core::iter::traits::iterator"],[3877,"core::marker"],[3878,"core::task::poll"],[3879,"core::future::future"],[3880,"core::marker"],[3881,"core::error"],[3882,"core::ops::coroutine"],[3883,"core::marker"],[3884,"core::array::iter"],[3885,"core::ops::try_trait"],[3886,"core::num::nonzero"],[3887,"core::ops::range"],[3888,"core::convert"],[3889,"bitflags::iter"],[3890,"bitflags::iter"]],"d":["","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Memory allocation APIs","","","A module for working with borrowed data.","","","The <code>Box&lt;T&gt;</code> type for heap allocation.","Collection types.","","Utilities related to FFI bindings.","Utilities for formatting and printing <code>String</code>s.","Creates a <code>String</code> using interpolation of runtime …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Single-threaded reference-counting pointers. ‘Rc’ …","Utilities for the slice primitive type.","Utilities for the <code>str</code> primitive type.","A UTF-8–encoded, growable string.","Thread-safe reference-counting pointers.","Types and Traits for working with asynchronous tasks.","","","","A contiguous growable array type with heap-allocated …","Creates a <code>Vec</code> containing the arguments.","The <code>AllocError</code> error indicates an allocation failure that …","An implementation of <code>Allocator</code> can allocate, grow, shrink, …","The global memory allocator.","A memory allocator that can be registered as the standard …","Layout of a block of memory.","","The parameters given to <code>Layout::from_size_align</code> or some …","The minimum byte alignment for a memory block of this …","Creates a layout describing the record that can hold a …","Allocate memory with the global allocator.","Allocate memory as described by the given <code>layout</code>.","Allocate zero-initialized memory with the global allocator.","Behaves like <code>alloc</code>, but also ensures that the contents are …","Attempts to allocate a block of memory.","","","Behaves like <code>allocate</code>, but also ensures that the returned …","Creates a layout describing the record for a <code>[T; n]</code>.","","","","","","","","","Creates a “by reference” adapter for this instance of …","","","","","","","","","Creates a <code>NonNull</code> that is dangling, but well-aligned for …","Deallocate memory with the global allocator.","Deallocate the block of memory at the given <code>ptr</code> pointer …","Deallocates the memory referenced by <code>ptr</code>.","","","","","","Creates a layout describing the record for <code>self</code> followed by","Creates a layout describing the record for <code>self</code> followed by","","","","","","","Produces layout describing a record that could be used to …","Produces layout describing a record that could be used to …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a <code>Layout</code> from a given <code>size</code> and <code>align</code>, or …","Creates a layout, bypassing all checks.","","Attempts to extend the memory block.","","Behaves like <code>grow</code>, but also ensures that the new contents …","Signal a memory allocation error.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a <code>Layout</code> suitable for holding a value of type <code>T</code>.","Creates a layout by rounding the size of this layout up to …","Returns the amount of padding we must insert after <code>self</code> to …","Reallocate memory with the global allocator.","Shrink or grow a block of memory to the given <code>new_size</code> in …","Creates a layout describing the record for <code>n</code> instances of …","Creates a layout describing the record for <code>n</code> instances of …","","Attempts to shrink the memory block.","The minimum size in bytes for a memory block of this …","","","","","","","","","","","","","","","","","","","A trait for borrowing data.","A trait for mutably borrowing data.","Borrowed data.","A clone-on-write smart pointer.","Owned data.","The resulting type after obtaining ownership.","A generalization of <code>Clone</code> to borrowed data.","","","","","","Immutably borrows from an owned value.","","","Mutably borrows from an owned value.","","","","Uses borrowed data to replace owned data, usually by …","","","Creates an owned Cow&lt;’a, B&gt; with the default value for …","","","","","","","","","","","Returns the argument unchanged.","Converts a <code>String</code> into an <code>Owned</code> variant. No heap …","Converts a string slice into a <code>Borrowed</code> variant. No heap …","Creates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.","Converts a <code>CString</code> into an owned <code>Cow</code> without copying or …","Converts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …","Converts a <code>String</code> reference into a <code>Borrowed</code> variant. No …","Creates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.","Converts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …","Creates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …","","","","","","Calls <code>U::from(self)</code>.","Extracts the owned data.","Returns true if the data is borrowed, i.e. if <code>to_mut</code> would …","Returns true if the data is owned, i.e. if <code>to_mut</code> would be …","","","","","","","","Acquires a mutable reference to the owned form of the data.","Creates owned data from borrowed data, usually by cloning.","","","","","","A pointer type that uniquely owns a heap allocation of …","ThinBox.","Returns a reference to the underlying allocator.","","","Converts to <code>Box&lt;[T], A&gt;</code>.","Converts to <code>Box&lt;T, A&gt;</code>.","","","","","","","","","","","Returns a new box with a <code>clone()</code> of this box’s contents.","","","","Copies <code>source</code>’s contents into <code>self</code> without creating a …","","","","Creates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.","","","","","","","","","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","","","","","","","","","","Returns the argument unchanged.","Converts the given <code>String</code> to a boxed <code>str</code> slice that is …","Converts a type of <code>Error</code> into a box of dyn <code>Error</code>.","Converts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …","Converts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …","Converts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>T</code> into a <code>Box&lt;T&gt;</code>","Converts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>","Converts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …","Convert a vector into a boxed slice.","Converts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Converts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …","Converts a <code>Cow</code> into a box of dyn <code>Error</code>.","Converts a <code>String</code> into a box of dyn <code>Error</code>.","Converts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>","Converts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>","Converts a <code>str</code> into a box of dyn <code>Error</code>.","Converts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>","Returns the argument unchanged.","","Converts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Converts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","","Constructs a box from a raw pointer.","Constructs a box from a raw pointer in the given allocator.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>","","Consumes the <code>Box</code>, returning the wrapped value.","","Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …","Consumes the <code>Box</code>, returning a wrapped raw pointer.","Consumes the <code>Box</code>, returning a wrapped raw pointer and the …","","","","","","","","Consumes and leaks the <code>Box</code>, returning a mutable reference, …","","","","Moves a type to the heap with its <code>Metadata</code> stored in the …","Allocates memory on the heap and then places <code>x</code> into it.","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents.","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents.","Constructs a new boxed slice with uninitialized contents …","Moves a type to the heap with its <code>Metadata</code> stored in the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","Constructs a new boxed slice with uninitialized contents …","","","","","","Constructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Constructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …","","","","","","","","","","","","","","","","Attempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.","Attempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.","","","Allocates memory on the heap then places <code>x</code> into it, …","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents on the …","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents. …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","","","","Writes the value and converts to <code>Box&lt;T, A&gt;</code>.","","","","","","","","","","","","","","","The memory allocator returned an error","An ordered map based on a B-Tree.","An ordered set based on a B-Tree.","A priority queue implemented with a binary heap.","Error due to the computed capacity exceeding the collection…","A doubly-linked list with owned nodes.","The error type for <code>try_reserve</code> methods.","Details of the allocation that caused a <code>TryReserveError</code>","A double-ended queue implemented with a growable ring …","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Moves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …","Moves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …","Moves all elements from <code>other</code> to the end of the list.","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Returns a pair of slices which contain, in order, the …","Returns a slice of all values in the underlying vector, in …","Returns a pair of slices which contain, in order, the …","Provides a reference to the back element, or <code>None</code> if the …","Provides a reference to the back element, or <code>None</code> if the …","Provides a mutable reference to the back element, or <code>None</code> …","Provides a mutable reference to the back element, or <code>None</code> …","A priority queue implemented with a binary heap.","Binary searches this <code>VecDeque</code> for a given element. If the …","Binary searches this <code>VecDeque</code> with a comparator function.","Binary searches this <code>VecDeque</code> with a key extraction …","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","","","An ordered map based on a B-Tree.","An ordered set based on a B-Tree.","Returns the number of elements the binary heap can hold …","Returns the number of elements the deque can hold without …","Drops all items from the binary heap.","Clears the map, removing all elements.","Clears the set, removing all elements.","Removes all elements from the <code>LinkedList</code>.","Clears the deque, removing all values.","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the set contains an element equal to the …","Returns <code>true</code> if the <code>LinkedList</code> contains an element equal …","Returns <code>true</code> if the deque contains an element equal to the …","Returns <code>true</code> if the map contains a value for the specified …","Provides a cursor at the back element.","Provides a cursor with editing operations at the back …","Provides a cursor at the front element.","Provides a cursor with editing operations at the front …","Creates an empty <code>BinaryHeap&lt;T&gt;</code>.","Creates an empty <code>BTreeMap</code>.","Creates an empty <code>BTreeSet</code>.","Creates an empty <code>LinkedList&lt;T&gt;</code>.","Creates an empty deque.","Visits the elements representing the difference, i.e., the …","Clears the binary heap, returning an iterator over the …","Removes the specified range from the deque in bulk, …","Clears the binary heap, returning an iterator over the …","","","","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator that visits all elements (key-value …","Creates an iterator that visits all elements in ascending …","Creates an iterator which uses a closure to determine if …","Returns a reference to the first element in the set, if …","Returns the first entry in the map for in-place …","Returns the first key-value pair in the map. The key in …","","","","","","","","","Converts a <code>Vec&lt;T&gt;</code> into a <code>BinaryHeap&lt;T&gt;</code>.","","Returns the argument unchanged.","Converts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;(K, V)&gt;</code>.","Returns the argument unchanged.","Converts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>[T; N]</code> into a <code>LinkedList&lt;T&gt;</code>.","Turn a <code>Vec&lt;T&gt;</code> into a <code>VecDeque&lt;T&gt;</code>.","Converts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.","Returns the argument unchanged.","","Returns the argument unchanged.","Always evaluates to <code>TryReserveErrorKind::CapacityOverflow</code>.","Returns the argument unchanged.","","","","","","Provides a reference to the front element, or <code>None</code> if the …","Provides a reference to the front element, or <code>None</code> if the …","Provides a mutable reference to the front element, or <code>None</code> …","Provides a mutable reference to the front element, or <code>None</code> …","Returns a reference to the value corresponding to the key.","Returns a reference to the element in the set, if any, …","Provides a reference to the element at the given index.","Returns the key-value pair corresponding to the supplied …","Returns a mutable reference to the value corresponding to …","Provides a mutable reference to the element at the given …","","","","","Returns a reference to the value corresponding to the …","","","Inserts a key-value pair into the map.","Adds a value to the set.","Inserts an element at <code>index</code> within the deque, shifting all …","Visits the elements representing the intersection, i.e., …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a consuming iterator, that is, one that moves each …","","","","","Gets an iterator for moving out the <code>BTreeSet</code>’s contents.","","Consumes the list into an iterator yielding elements by …","","Consumes the deque into a front-to-back iterator yielding …","","","Returns an iterator which retrieves elements in heap order.","Creates a consuming iterator visiting all the keys, in …","Consumes the <code>BinaryHeap</code> and returns a vector in sorted …","Creates a consuming iterator visiting all the values, in …","Consumes the <code>BinaryHeap</code> and returns the underlying vector …","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Checks if the binary heap is empty.","Returns <code>true</code> if the map contains no elements.","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the <code>LinkedList</code> is empty.","Returns <code>true</code> if the deque is empty.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","Returns an iterator visiting all values in the underlying …","Gets an iterator over the entries of the map, sorted by …","Gets an iterator that visits the elements in the <code>BTreeSet</code> …","Provides a forward iterator.","Returns a front-to-back iterator.","Gets a mutable iterator over the entries of the map, …","Provides a forward iterator with mutable references.","Returns a front-to-back iterator that returns mutable …","Gets an iterator over the keys of the map, in sorted order.","Details about the allocation that caused the error","Returns a reference to the last element in the set, if any.","Returns the last entry in the map for in-place …","Returns the last key-value pair in the map. The key in …","Returns the length of the binary heap.","Returns the number of elements in the map.","Returns the number of elements in the set.","Returns the length of the <code>LinkedList</code>.","Returns the number of elements in the deque.","A doubly-linked list with owned nodes.","Returns a <code>Cursor</code> pointing at the first element that is …","Returns a <code>CursorMut</code> pointing at the first element that is …","Rearranges the internal storage of this deque so it is one …","","Creates an empty <code>BinaryHeap</code> as a max-heap.","Makes a new, empty <code>BTreeMap</code>.","Makes a new, empty <code>BTreeSet</code>.","Creates an empty <code>LinkedList</code>.","Creates an empty deque.","Creates an empty <code>BinaryHeap</code> as a max-heap, using <code>A</code> as …","Makes a new empty BTreeMap with a reasonable choice for B.","Makes a new <code>BTreeSet</code> with a reasonable choice of B.","Constructs an empty <code>LinkedList&lt;T, A&gt;</code>.","Creates an empty deque.","","","","","Returns the index of the partition point according to the …","Returns the greatest item in the binary heap, or <code>None</code> if …","Returns a mutable reference to the greatest item in the …","Removes the greatest item from the binary heap and returns …","Removes the last element from a list and returns it, or …","Removes the last element from the deque and returns it, or …","Removes and returns the first element in the map. The key …","Removes the first element from the set and returns it, if …","Removes the first element and returns it, or <code>None</code> if the …","Removes the first element and returns it, or <code>None</code> if the …","Removes and returns the last element in the map. The key …","Removes the last element from the set and returns it, if …","Pushes an item onto the binary heap.","Appends an element to the back of a list.","Appends an element to the back of the deque.","Adds an element first in the list.","Prepends an element to the deque.","Constructs a double-ended iterator over a sub-range of …","Constructs a double-ended iterator over a sub-range of …","Creates an iterator that covers the specified range in the …","Constructs a mutable double-ended iterator over a …","Creates an iterator that covers the specified mutable …","Removes a key from the map, returning the value at the key …","If the set contains an element equal to the value, removes …","Removes the element at the given index and returns it.","Removes and returns the element at <code>index</code> from the deque. …","Removes a key from the map, returning the stored key and …","Adds a value to the set, replacing the existing element, …","Reserves capacity for at least <code>additional</code> elements more …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> …","Reserves the minimum capacity for at least <code>additional</code> more …","Modifies the deque in-place so that <code>len()</code> is equal to …","Modifies the deque in-place so that <code>len()</code> is equal to …","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Rotates the double-ended queue <code>n</code> places to the left.","Rotates the double-ended queue <code>n</code> places to the right.","Discards capacity with a lower bound.","Shrinks the capacity of the deque with a lower bound.","Discards as much additional capacity as possible.","Shrinks the capacity of the deque as much as possible.","Splits the collection into two at the given key. Returns …","Splits the collection into two at the value. Returns a new …","Splits the list into two at the given index. Returns …","Splits the deque into two at the given index.","Returns the difference of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>…","Swaps elements at indices <code>i</code> and <code>j</code>.","Removes an element from anywhere in the deque and returns …","Removes an element from anywhere in the deque and returns …","Visits the elements representing the symmetric difference, …","Removes and returns the element in the set, if any, that …","","","","","","","","","Shortens the deque, keeping the first <code>len</code> elements and …","","","","","","","","Tries to insert a key-value pair into the map, and returns …","","","","","","","","Tries to reserve capacity for at least <code>additional</code> elements …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","Tries to reserve the minimum capacity for at least …","","","","","","","","Visits the elements representing the union, i.e., all the …","Returns a <code>Cursor</code> pointing at the last element that is …","Returns a <code>CursorMut</code> pointing at the last element that is …","Gets an iterator over the values of the map, in order by …","Gets a mutable iterator over the values of the map, in …","A double-ended queue (deque) implemented with a growable …","Creates an empty <code>BinaryHeap</code> with at least the specified …","Creates an empty deque with space for at least <code>capacity</code> …","Creates an empty <code>BinaryHeap</code> with at least the specified …","Creates an empty deque with space for at least <code>capacity</code> …","The layout of allocation request that failed","A priority queue implemented with a binary heap.","A draining iterator over the elements of a <code>BinaryHeap</code>.","A draining iterator over the elements of a <code>BinaryHeap</code>.","An owning iterator over the elements of a <code>BinaryHeap</code>.","","An iterator over the elements of a <code>BinaryHeap</code>.","Structure wrapping a mutable reference to the greatest …","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","","","","","","","","","","","","","","","","","","","Creates an empty <code>binary_heap::IntoIter</code>.","","","","Removes heap elements in heap order.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Removes the peeked value from the heap and returns it.","","","","","","","","","","","","","","","","","","","","","","","","","","","An ordered map based on a B-Tree.","A cursor over a <code>BTreeMap</code>.","A cursor over a <code>BTreeMap</code> with editing operations.","A view into a single entry in a map, which may either be …","An iterator produced by calling <code>extract_if</code> on BTreeMap.","An owning iterator over the entries of a <code>BTreeMap</code>.","An owning iterator over the keys of a <code>BTreeMap</code>.","An owning iterator over the values of a <code>BTreeMap</code>.","An iterator over the entries of a <code>BTreeMap</code>.","A mutable iterator over the entries of a <code>BTreeMap</code>.","An iterator over the keys of a <code>BTreeMap</code>.","An occupied entry.","A view into an occupied entry in a <code>BTreeMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","An iterator over a sub-range of entries in a <code>BTreeMap</code>.","A mutable iterator over a sub-range of entries in a …","A vacant entry.","A view into a vacant entry in a <code>BTreeMap</code>. It is part of …","An iterator over the values of a <code>BTreeMap</code>.","A mutable iterator over the values of a <code>BTreeMap</code>.","Provides in-place mutable access to an occupied entry …","Returns a read-only cursor pointing to the current element.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an empty <code>btree_map::Iter</code>.","Creates an empty <code>btree_map::IterMut</code>.","Creates an empty <code>btree_map::IntoIter</code>.","Creates an empty <code>btree_map::Keys</code>.","Creates an empty <code>btree_map::Values</code>.","Creates an empty <code>btree_map::IntoKeys</code>.","Creates an empty <code>btree_map::IntoValues</code>.","Creates an empty <code>btree_map::Range</code>.","","","The entry in the map that was already occupied.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Sets the value of the entry with the <code>VacantEntry</code>’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s key,","Inserts a new element into the <code>BTreeMap</code> after the current …","Inserts a new element into the <code>BTreeMap</code> after the current …","Inserts a new element into the <code>BTreeMap</code> before the current …","Inserts a new element into the <code>BTreeMap</code> before the current …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Take ownership of the key.","Converts the entry into a mutable reference to its value.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Returns a reference to the key of the element that the …","Returns a reference to the key of the element that the …","Returns a mutable reference to the key of the element that …","Returns a reference to the key and value of the element …","Returns a reference to the key and value of the element …","Returns a reference to the key and mutable reference to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Moves the cursor to the next element of the <code>BTreeMap</code>.","Moves the cursor to the next element of the <code>BTreeMap</code>.","Moves the cursor to the previous element of the <code>BTreeMap</code>.","Moves the cursor to the previous element of the <code>BTreeMap</code>.","","","","","","","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Returns a reference to the next element.","Returns a reference to the key and value of the next …","Returns a reference to the previous element.","Returns a reference to the key and value of the previous …","Takes the value of the entry out of the map, and returns …","Removes the current element from the <code>BTreeMap</code>.","Removes the current element from the <code>BTreeMap</code>.","Take ownership of the key and value from the map.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value of the element that the …","Returns a reference to the value of the element that the …","The value which was not inserted, because the entry was …","Returns a mutable reference to the value of the element …","An ordered set based on a B-Tree.","A lazy iterator producing elements in the difference of …","An iterator produced by calling <code>extract_if</code> on BTreeSet.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>BTreeSet</code>.","An iterator over the items of a <code>BTreeSet</code>.","An iterator over a sub-range of items in a <code>BTreeSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>BTreeSet</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an empty <code>btree_set::Iter</code>.","Creates an empty <code>btree_set::IntoIter</code>.","Creates an empty <code>btree_set::Range</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A cursor over a <code>LinkedList</code>.","A cursor over a <code>LinkedList</code> with editing operations.","An iterator produced by calling <code>extract_if</code> on LinkedList.","An owning iterator over the elements of a <code>LinkedList</code>.","An iterator over the elements of a <code>LinkedList</code>.","A mutable iterator over the elements of a <code>LinkedList</code>.","A doubly-linked list with owned nodes.","Returns a read-only cursor pointing to the current element.","Provides a reference to the back element of the cursor’s …","Provides a reference to the back element of the cursor’s …","Provides a mutable reference to back element of the cursor…","","","","","","","","","","","","","","","","","","","Returns a reference to the element that the cursor is …","Returns a reference to the element that the cursor is …","Creates an empty <code>linked_list::Iter</code>.","","Creates an empty <code>linked_list::IntoIter</code>.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Provides a reference to the front element of the cursor’…","Provides a reference to the front element of the cursor’…","Provides a mutable reference to the front element of the …","Returns the cursor position index within the <code>LinkedList</code>.","Returns the cursor position index within the <code>LinkedList</code>.","Inserts a new element into the <code>LinkedList</code> after the …","Inserts a new element into the <code>LinkedList</code> before the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Moves the cursor to the next element of the <code>LinkedList</code>.","Moves the cursor to the next element of the <code>LinkedList</code>.","Moves the cursor to the previous element of the <code>LinkedList</code>.","Moves the cursor to the previous element of the <code>LinkedList</code>.","","","","","","","","Returns a reference to the next element.","Returns a reference to the next element.","Returns a reference to the previous element.","Returns a reference to the previous element.","Removes the last element from the cursor’s parent list …","Removes the first element from the cursor’s parent list …","Appends an element to the back of the cursor’s parent …","Appends an element to the front of the cursor’s parent …","Removes the current element from the <code>LinkedList</code>.","Removes the current element from the <code>LinkedList</code> without …","","","","","Inserts the elements from the given <code>LinkedList</code> after the …","Inserts the elements from the given <code>LinkedList</code> before the …","Splits the list into two after the current element. This …","Splits the list into two before the current element. This …","","","","","","","","","","","","","","","","","","","","","","A draining iterator over the elements of a <code>VecDeque</code>.","An owning iterator over the elements of a <code>VecDeque</code>.","An iterator over the elements of a <code>VecDeque</code>.","A mutable iterator over the elements of a <code>VecDeque</code>.","A double-ended queue implemented with a growable ring …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A type representing an owned, C-compatible, nul-terminated …","An error indicating that a nul byte was not in the …","An error indicating invalid UTF-8 when converting a <code>CString</code>…","An error indicating that an interior nul byte was found.","Returns the contents of this <code>CString</code> as a slice of bytes.","Returns a slice of <code>u8</code>s bytes that were attempted to …","Equivalent to <code>CString::as_bytes()</code> except that the returned …","Extracts a <code>CStr</code> slice containing the entire string.","","","","","","","","","","","","","","","","","","","","Creates an empty <code>CString</code>.","","","","","","","","","","","","","","","","Converts a Vec&lt;NonZeroU8&gt; into a <code>CString</code> without copying …","Returns the argument unchanged.","Converts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …","Converts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>CString</code>, by copying the …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Retakes ownership of a <code>CString</code> that was transferred to C …","Creates a C-compatible string by consuming a byte vector, …","Attempts to converts a Vec&lt;u8&gt; to a <code>CString</code>.","Converts a Vec&lt;u8&gt; to a <code>CString</code> without checking the …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this <code>CString</code> into a boxed <code>CStr</code>.","Consumes the <code>CString</code> and returns the underlying byte …","Returns the bytes that were attempted to convert to a …","Equivalent to <code>CString::into_bytes()</code> except that the …","Consumes this error, returning original <code>CString</code> which …","Consumes the <code>CString</code> and transfers ownership of the string …","Converts the <code>CString</code> into a <code>String</code> if it contains valid …","Consumes this error, returning the underlying vector of …","Creates a new C-compatible string from a container of …","Returns the position of the nul byte in the slice that …","","","","","","","","","","","","","","","","","","","","","","Access the underlying UTF-8 error that was the cause of …","Possible alignments returned by <code>Formatter::align</code>","This structure represents a safely precompiled version of …","<code>b</code> formatting.","Indication that contents should be center-aligned.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","Format trait for an empty format, <code>{}</code>.","Contains the error value","The error type which is returned from formatting a message …","Configuration for formatting.","Implements <code>fmt::Debug</code> and <code>fmt::Display</code> using a function.","Indication that contents should be left-aligned.","<code>e</code> formatting.","<code>x</code> formatting.","<code>o</code> formatting.","Contains the success value","<code>p</code> formatting.","The type returned by formatter methods.","Indication that contents should be right-aligned.","<code>E</code> formatting.","<code>X</code> formatting.","A trait for writing or formatting into Unicode-accepting …","Flag indicating what form of alignment was requested.","Determines if the <code>#</code> flag was specified.","Get the formatted string, if it has no arguments to be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>DebugList</code> builder designed to assist with …","Creates a <code>DebugMap</code> builder designed to assist with …","Creates a <code>DebugSet</code> builder designed to assist with …","Creates a <code>DebugStruct</code> builder designed to assist with …","Creates a <code>DebugTuple</code> builder designed to assist with …","","","Adds the contents of an iterator of entries to the set …","Adds the contents of an iterator of entries to the list …","Adds the contents of an iterator of entries to the map …","Adds a new entry to the set output.","Adds a new entry to the list output.","Adds a new entry to the map output.","Adds a new entry to the set output.","Adds a new entry to the list output.","","","Adds a new field to the generated struct output.","Adds a new field to the generated tuple struct output.","Adds a new field to the generated struct output.","Adds a new field to the generated tuple struct output.","Character used as ‘fill’ whenever there is alignment.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Marks the struct as non-exhaustive, indicating to the …","Flags for formatting","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","","","The <code>format</code> function takes an <code>Arguments</code> struct and returns …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Adds the key part of a new entry to the map output.","Adds the key part of a new entry to the map output.","This function takes a string slice and emits it to the …","Performs the correct padding for an integer which has …","","Optionally specified precision for numeric types. …","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the value part of a new entry to the map output.","Adds the value part of a new entry to the map output.","Optionally specified integer width that the output should …","The <code>write</code> function takes an output stream, and an <code>Arguments</code>…","Writes a <code>char</code> into this writer, returning whether the …","","Glue for usage of the <code>write!</code> macro with implementors of …","Writes some formatted information into this instance.","","Writes a string slice into this writer, returning whether …","","Writes some data to the underlying buffer contained within …","A single-threaded reference-counting pointer. ‘Rc’ …","A uniquely owned <code>Rc</code>","<code>Weak</code> is a version of <code>Rc</code> that holds a non-owning reference …","Returns a reference to the underlying allocator.","Provides a raw pointer to the data.","Returns a raw pointer to the object <code>T</code> pointed to by this …","","Converts to <code>Rc&lt;[T]&gt;</code>.","Converts to <code>Rc&lt;T&gt;</code>.","","","","","","","","Makes a clone of the <code>Rc</code> pointer.","Makes a clone of the <code>Weak</code> pointer that points to the same …","","","Comparison for two <code>Rc</code>s.","Decrements the strong reference count on the <code>Rc&lt;T&gt;</code> …","Decrements the strong reference count on the <code>Rc&lt;T&gt;</code> …","Creates a new <code>Rc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.","Constructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …","","","","Attempt to downcast the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.","Downcasts the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.","Creates a new <code>Weak</code> pointer to this allocation.","Creates a new weak reference to the <code>UniqueRc</code>","Drops the <code>Rc</code>.","Drops the <code>Weak</code> pointer.","","Equality for two <code>Rc</code>s.","","","","","","Allocate a reference-counted string slice and copy <code>v</code> into …","","Converts a <code>&amp;CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the contents …","Move a boxed object to a new, reference counted, …","Converts a <code>[T; N]</code> into an <code>Rc&lt;[T]&gt;</code>.","Returns the argument unchanged.","Converts a generic type <code>T</code> into an <code>Rc&lt;T&gt;</code>","Create a reference-counted pointer from a clone-on-write …","Converts a reference-counted string slice into a byte …","Allocate a reference-counted string slice and copy <code>v</code> into …","Allocate a reference-counted slice and fill it by cloning <code>v</code>…","Allocate a reference-counted slice and move <code>v</code>’s items …","Converts a <code>CString</code> into an Rc&lt;CStr&gt; by moving the <code>CString</code> …","Returns the argument unchanged.","Returns the argument unchanged.","Takes each element in the <code>Iterator</code> and collects it into an …","Constructs an <code>Rc&lt;T&gt;</code> from a raw pointer.","Converts a raw pointer previously created by <code>into_raw</code> back …","Constructs an <code>Rc&lt;T, A&gt;</code> from a raw pointer in the provided …","Converts a raw pointer previously created by <code>into_raw</code> back …","‘Greater than or equal to’ comparison for two <code>Rc</code>s.","Returns a mutable reference into the given <code>Rc</code>, if there are","Returns a mutable reference into the given <code>Rc</code>, without any …","Greater-than comparison for two <code>Rc</code>s.","","Increments the strong reference count on the <code>Rc&lt;T&gt;</code> …","Increments the strong reference count on the <code>Rc&lt;T&gt;</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner value, if the <code>Rc</code> has exactly one strong …","Consumes the <code>Rc</code>, returning the wrapped pointer.","Consumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.","Consumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.","Converts the <code>UniqueRc</code> into a regular <code>Rc</code>","‘Less than or equal to’ comparison for two <code>Rc</code>s.","Less-than comparison for two <code>Rc</code>s.","Makes a mutable reference into the given <code>Rc</code>.","Inequality for two <code>Rc</code>s.","Constructs a new <code>Rc&lt;T&gt;</code>.","Constructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …","Creates a new <code>UniqueRc</code>","Constructs a new <code>Rc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …","Constructs a new <code>Rc</code> in the provided allocator.","Constructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory, …","Constructs a new <code>Rc</code> with uninitialized contents.","Constructs a new <code>Rc</code> with uninitialized contents in the …","Constructs a new reference-counted slice with …","Constructs a new reference-counted slice with …","Constructs a new <code>Rc</code> with uninitialized contents, with the …","Constructs a new <code>Rc</code> with uninitialized contents, with the …","Constructs a new reference-counted slice with …","Constructs a new reference-counted slice with …","Partial comparison for two <code>Rc</code>s.","Constructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Constructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code> in the provided allocator. If <code>T</code>…","Returns <code>true</code> if the two <code>Rc</code>s point to the same allocation …","Returns <code>true</code> if the two <code>Weak</code>s point to the same allocation …","Gets the number of strong (<code>Rc</code>) pointers to this allocation.","Gets the number of strong (<code>Rc</code>) pointers pointing to this …","","","","","","","","","","","Constructs a new <code>Rc&lt;T&gt;</code>, returning an error if the …","Constructs a new <code>Rc&lt;T&gt;</code> in the provided allocator, …","Constructs a new <code>Rc</code> with uninitialized contents, returning …","Constructs a new <code>Rc</code> with uninitialized contents, in the …","Constructs a new <code>Rc</code> with uninitialized contents, with the …","Constructs a new <code>Rc</code> with uninitialized contents, with the …","Returns the inner value, if the <code>Rc</code> has exactly one strong …","","","","If we have the only reference to <code>T</code> then unwrap it. …","Attempts to upgrade the <code>Weak</code> pointer to an <code>Rc</code>, delaying …","Gets the number of <code>Weak</code> pointers to this allocation.","Gets the number of <code>Weak</code> pointers pointing to this …","An iterator over a slice in (non-overlapping) chunks (<code>N</code> …","An iterator over a slice in (non-overlapping) mutable …","A windowed iterator over a slice in overlapping chunks (<code>N</code> …","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) mutable …","An iterator over a slice in (non-overlapping) mutable …","Helper trait for <code>[T]::concat</code>.","An iterator over the escaped version of a byte slice.","An iterator over slice in (non-overlapping) chunks …","An iterator over slice in (non-overlapping) mutable chunks …","Immutable slice iterator","Mutable slice iterator.","Helper trait for <code>[T]::join</code>","The resulting type after concatenation","The resulting type after concatenation","The output type returned by methods.","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) mutable …","An iterator over a slice in (non-overlapping) mutable …","An iterator over subslices separated by elements that …","An iterator over the subslices of the vector which are …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","A helper trait used for indexing operations.","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","An iterator over the mutable subslices of the vector which …","An iterator over the mutable subslices of the vector which …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","An iterator over overlapping subslices of length <code>size</code>.","","","","","","","","","Views the underlying data as a mutable subslice of the …","","","Views the underlying data as a subslice of the original …","Views the underlying data as a subslice of the original …","Returns a slice which contains items not yet handled by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implementation of <code>[T]::concat</code>","","","","","","","","","","","","","","","Creates an empty slice iterator.","Creates an empty slice iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a reference to T into a slice of length 1 …","Forms a mutable slice from a pointer range.","Forms a slice from a pointer range.","Forms a slice from a pointer and a length.","Performs the same functionality as <code>from_raw_parts</code>, except …","Converts a reference to T into a slice of length 1 …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Views the underlying data as a subslice of the original …","","","","","","","","","","","Implementation of <code>[T]::join</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs bounds-checking of a range.","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over the bytes of a string slice.","An iterator over the <code>char</code>s of a string slice, and their …","An iterator over the <code>char</code>s of a string slice.","An iterator of <code>u16</code> over the string encoded as UTF-16.","The associated error which can be returned from parsing.","The return type of <code>str::escape_debug</code>.","The return type of <code>str::escape_default</code>.","The return type of <code>str::escape_unicode</code>.","Parse a value from a string","An iterator over the lines of a string, as string slices.","Created with the method <code>lines_any</code>.","Created with the method <code>match_indices</code>.","Created with the method <code>matches</code>.","An error returned when parsing a <code>bool</code> using <code>from_str</code> fails","Created with the method <code>rmatch_indices</code>.","Created with the method <code>rmatches</code>.","Created with the method <code>rsplit</code>.","Created with the method <code>rsplitn</code>.","Created with the method <code>rsplit_terminator</code>.","Created with the method <code>split</code>.","An iterator over the non-ASCII-whitespace substrings of a …","An iterator over the substrings of a string, terminated by …","Created with the method <code>splitn</code>.","Created with the method <code>split_terminator</code>.","An iterator over the non-whitespace substrings of a string,","An item returned by the <code>Utf8Chunks</code> iterator.","An iterator used to decode a slice of mostly UTF-8 bytes …","Errors which can occur when attempting to interpret a …","","","","Views the underlying data as a subslice of the original …","Views the underlying data as a subslice of the original …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Provides more information about the failure:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a boxed slice of bytes to a boxed string slice …","Parses a string <code>s</code> to return a value of this type.","Converts a slice of bytes to a string slice.","Converts a mutable slice of bytes to a mutable string …","Converts a slice of bytes to a string slice without …","Converts a slice of bytes to a string slice without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the invalid sequence that caused a failure.","","","","","","","","","Creates a new iterator to decode the bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the byte position of the next character, or the …","The string Pattern API.","","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string.","Returns remainder of the split string","Returns remainder of the split string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the next validated UTF-8 substring.","Returns the index in the given string up to which valid …","Associated type for <code>&lt;&amp;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Expresses that every byte of the haystack has been …","A marker trait to express that a <code>ReverseSearcher</code> can be …","Expresses that a match of the pattern has been found at …","A string pattern.","Expresses that <code>haystack[a..b]</code> has been rejected as a …","A reverse searcher for a string pattern.","Result of calling <code>Searcher::next()</code> or …","A searcher for a string pattern.","Associated searcher for this pattern","Associated type for <code>&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Getter for the underlying string to be searched in","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs the associated searcher from <code>self</code> and the …","Checks whether the pattern matches anywhere in the haystack","Checks whether the pattern matches at the front of the …","Checks whether the pattern matches at the back of the …","Performs the next search step starting from the front.","","","","","","","Performs the next search step starting from the back.","","","","","","","Finds the next <code>Match</code> result. See <code>next()</code>.","","","","","","","Finds the next <code>Match</code> result. See <code>next_back()</code>.","","","","","","","Finds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.","","","","","Finds the next <code>Reject</code> result. See <code>next_back()</code>.","","","","","Removes the pattern from the front of haystack, if it …","Removes the pattern from the back of haystack, if it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A draining iterator for <code>String</code>.","A possible error value when converting a <code>String</code> from a …","A possible error value when converting a <code>String</code> from a …","A type alias for <code>Infallible</code>.","A UTF-8–encoded, growable string.","A trait for converting a value to a <code>String</code>.","","","Returns a byte slice of this <code>String</code>’s contents.","Returns a slice of <code>u8</code>s bytes that were attempted to …","","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","","","","","Returns the remaining (sub)string of this iterator as a …","Extracts a string slice containing the entire <code>String</code>.","","","","","","","","","","","Returns this <code>String</code>’s capacity, in bytes.","Truncates this <code>String</code>, removing all contents.","","","","","","","Creates an empty <code>String</code>.","","","","","Removes the specified range from the string in bulk, …","","","","","","","","","","","","","Copies elements from <code>src</code> range to the end of the string.","","","","","","","","","","","","","","","Returns the argument unchanged.","Allocates an owned <code>String</code> from a single character.","Returns the argument unchanged.","Converts a clone-on-write string to an owned instance of …","Converts a <code>&amp;String</code> into a <code>String</code>.","Converts the given boxed <code>str</code> slice to a <code>String</code>. It is …","Converts a <code>&amp;mut str</code> into a <code>String</code>.","Converts a <code>&amp;str</code> into a <code>String</code>.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Creates a new <code>String</code> from a length, capacity, and pointer.","","Decode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …","Decode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing …","Decode a UTF-16BE–encoded vector <code>v</code> into a <code>String</code>, …","Decode a UTF-16BE–encoded slice <code>v</code> into a <code>String</code>, …","Decode a UTF-16LE–encoded vector <code>v</code> into a <code>String</code>, …","Decode a UTF-16LE–encoded slice <code>v</code> into a <code>String</code>, …","Converts a vector of bytes to a <code>String</code>.","Converts a slice of bytes to a string, including invalid …","Converts a vector of bytes to a <code>String</code> without checking …","","","","","","","","","","","","","","Inserts a character into this <code>String</code> at a byte position.","Inserts a string slice into this <code>String</code> at a byte position.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this <code>String</code> into a Box&lt;str&gt;.","Converts a <code>String</code> into a byte vector.","Returns the bytes that were attempted to convert to a …","","Decomposes a <code>String</code> into its raw components.","","","Returns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…","","","","Consumes and leaks the <code>String</code>, returning a mutable …","Returns the length of this <code>String</code>, in bytes, not <code>char</code>s or …","","","","Creates a new empty <code>String</code>.","","","","Removes the last character from the string buffer and …","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends a given string slice onto the end of this <code>String</code>.","Removes a <code>char</code> from this <code>String</code> at a byte position and …","Remove all matches of pattern <code>pat</code> in the <code>String</code>.","Removes the specified range in the string, and replaces it …","Reserves capacity for at least <code>additional</code> bytes more than …","Reserves the minimum capacity for at least <code>additional</code> …","Retains only the characters specified by the predicate.","Shrinks the capacity of this <code>String</code> with a lower bound.","Shrinks the capacity of this <code>String</code> to match its length.","","Splits the string into two at the given byte index.","","","","","Converts the given value to a <code>String</code>.","","","","Shortens this <code>String</code> to the specified length.","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> bytes …","Tries to reserve the minimum capacity for at least …","","","","","Fetch a <code>Utf8Error</code> to get more details about the conversion …","Creates a new empty <code>String</code> with at least the specified …","","","A thread-safe reference-counting pointer. ‘Arc’ stands …","<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference …","Returns a reference to the underlying allocator.","Provides a raw pointer to the data.","Returns a raw pointer to the object <code>T</code> pointed to by this …","","Converts to <code>Arc&lt;T&gt;</code>.","Converts to <code>Arc&lt;[T]&gt;</code>.","","","","","","","Makes a clone of the <code>Arc</code> pointer.","Makes a clone of the <code>Weak</code> pointer that points to the same …","","","Comparison for two <code>Arc</code>s.","Decrements the strong reference count on the <code>Arc&lt;T&gt;</code> …","Decrements the strong reference count on the <code>Arc&lt;T&gt;</code> …","Creates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.","Constructs a new <code>Weak&lt;T&gt;</code>, without allocating memory. …","","","Attempt to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …","Downcasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …","Creates a new <code>Weak</code> pointer to this allocation.","Drops the <code>Arc</code>.","Drops the <code>Weak</code> pointer.","Equality for two <code>Arc</code>s.","","","","","Move a boxed object to a new, reference-counted allocation.","Converts a <code>T</code> into an <code>Arc&lt;T&gt;</code>","Create an atomically reference-counted pointer from a …","Returns the argument unchanged.","Converts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.","Converts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","Converts an atomically reference-counted string slice into …","Allocate a reference-counted slice and fill it by cloning <code>v</code>…","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","Allocate a reference-counted slice and move <code>v</code>’s items …","","Converts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …","Returns the argument unchanged.","Takes each element in the <code>Iterator</code> and collects it into an …","Constructs an <code>Arc&lt;T&gt;</code> from a raw pointer.","Converts a raw pointer previously created by <code>into_raw</code> back …","Constructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.","Converts a raw pointer previously created by <code>into_raw</code> back …","‘Greater than or equal to’ comparison for two <code>Arc</code>s.","Returns a mutable reference into the given <code>Arc</code>, if there …","Returns a mutable reference into the given <code>Arc</code>, without …","Greater-than comparison for two <code>Arc</code>s.","","Increments the strong reference count on the <code>Arc&lt;T&gt;</code> …","Increments the strong reference count on the <code>Arc&lt;T&gt;</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner value, if the <code>Arc</code> has exactly one strong …","Consumes the <code>Arc</code>, returning the wrapped pointer.","Consumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.","‘Less than or equal to’ comparison for two <code>Arc</code>s.","Less-than comparison for two <code>Arc</code>s.","Makes a mutable reference into the given <code>Arc</code>.","Inequality for two <code>Arc</code>s.","Constructs a new <code>Arc&lt;T&gt;</code>.","Constructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …","Constructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …","Constructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.","Constructs a new <code>Weak&lt;T, A&gt;</code>, without allocating any …","Constructs a new <code>Arc</code> with uninitialized contents.","Constructs a new <code>Arc</code> with uninitialized contents in the …","Constructs a new atomically reference-counted slice with …","Constructs a new atomically reference-counted slice with …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new atomically reference-counted slice with …","Constructs a new atomically reference-counted slice with …","Partial comparison for two <code>Arc</code>s.","Constructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Constructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …","","Returns <code>true</code> if the two <code>Arc</code>s point to the same allocation …","Returns <code>true</code> if the two <code>Weak</code>s point to the same allocation …","","Gets the number of strong (<code>Arc</code>) pointers to this …","Gets the number of strong (<code>Arc</code>) pointers pointing to this …","","","","","","","","","Constructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …","Constructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …","Constructs a new <code>Arc</code> with uninitialized contents, …","Constructs a new <code>Arc</code> with uninitialized contents, in the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …","Constructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …","Returns the inner value, if the <code>Arc</code> has exactly one strong …","","","If we have the only reference to <code>T</code> then unwrap it. …","Attempts to upgrade the <code>Weak</code> pointer to an <code>Arc</code>, delaying …","Gets the number of <code>Weak</code> pointers to this allocation.","Gets an approximation of the number of <code>Weak</code> pointers …","The implementation of waking a task on an executor.","Wake this task.","Wake this task without consuming the waker.","A draining iterator for <code>Vec&lt;T&gt;</code>.","An iterator which uses a closure to determine if an …","An iterator that moves out of a vector.","A splicing iterator for <code>Vec</code>.","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","","","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","","","Returns an unsafe mutable pointer to the vector’s …","Returns the remaining items of this iterator as a mutable …","Extracts a mutable slice of the entire vector.","Returns a raw pointer to the vector’s buffer, or a …","","","","","Returns the remaining items of this iterator as a slice.","Returns the remaining items of this iterator as a slice.","Extracts a slice containing the entire vector.","","","","","","","","","","","","","Returns the total number of elements the vector can hold …","Clears the vector, removing all values.","","","","","","","","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","Creates an empty <code>vec::IntoIter</code>.","Creates an empty <code>Vec&lt;T&gt;</code>.","","","Removes the specified range from the vector in bulk, …","","","","","","","","","","","","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","","","","","Creates an iterator which uses a closure to determine if …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.","Returns the argument unchanged.","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Convert a boxed slice into a vector by transferring …","Convert a clone-on-write slice into a vector.","Turn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Converts a <code>CString</code> into a Vec&lt;u8&gt;.","Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Allocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a capacity, and …","Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a …","","","","Inserts an element at position <code>index</code> within the vector, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the vector into <code>Box&lt;[T]&gt;</code>.","Takes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.","","","","Creates a consuming iterator, that is, one that moves each …","","","","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","","","Returns <code>true</code> if the vector contains no elements.","Keep unyielded elements in the source <code>Vec</code>.","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","Returns the number of elements in the vector, also …","","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code>.","Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.","","","","","","","","","","Removes the last element from a vector and returns it, or …","Appends an element to the back of a collection.","Appends an element if there is sufficient spare capacity, …","Removes and returns the element at position <code>index</code> within …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> more …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of the vector as much as possible.","","","","","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given index.","Removes an element from the vector and returns it.","","","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …","Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Safety","","","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","accept a connection on a socket","bind a name to a socket","close a file","connect to a socket","duplicate a file descriptor","","exit the process with a code","","futex wait if value at <code>addr</code> is <code>val</code>","wake <code>num</code> threads that are sleeping on this <code>addr</code>","get the current process id","get the current thread id","","start listening for connections on a socket","print a string into kernel logs","context switch from this process and switch back when <code>nanos</code>…","context switch from this process and switch back when …","","open a file","open a directory","allocate physical pages and map to heap","deallocate physical pages and unmap from heap","spawn a new pthread for the same process","read from a file","read data from a socket","rename the current process","send data to a socket","create a socket","Safety","Safety","Safety","Safety","Safety","Safety","u128 nanoseconds since boot","write into a file","context switch from this process, no guarantees about …","","","","","Contains the error value","","","","","","","","","","","","","","","","Contains the success value","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","writes append to the file","create file if it doesn’t already exist","create file if it doesn’t already exist and err if it …","","","open file with read caps","open file with read and write caps","truncate file on open (if the file already existed)","open file with write caps","Get a flags value with all known bits set.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Whether all set bits in a source flags value are also set …","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,0,0,1,1,0,1,0,1,0,0,0,0,0,1,1,1,1,0,0,0,11,11,0,11,11,0,0,11,0,0,0,11,11,11,0,0,0,0,0,0,11,11,11,0,0,0,0,0,0,0,0,0,12,12,0,17,0,17,18,22,22,18,12,22,12,16,21,22,12,16,21,18,22,12,16,21,22,12,16,21,12,0,17,18,22,22,12,16,21,12,12,22,12,16,16,21,21,12,12,22,12,16,21,12,12,22,18,22,18,0,12,22,12,16,21,12,12,12,0,17,12,12,22,18,12,22,12,16,21,16,21,22,12,16,21,22,12,16,21,22,12,16,21,0,0,29,0,29,30,0,29,29,29,29,29,31,29,29,32,29,29,29,30,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,29,29,29,29,29,0,0,47,47,47,47,47,55,47,47,55,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,55,47,55,47,47,47,47,47,47,47,47,55,47,47,47,55,55,47,47,47,55,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,55,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,55,47,47,47,47,47,47,55,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,55,47,47,47,47,55,47,55,47,47,47,55,47,47,47,47,47,47,47,47,47,55,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,90,0,0,0,90,0,0,0,0,83,84,83,85,86,87,84,84,83,84,87,84,87,84,0,84,84,84,86,86,86,83,85,86,87,84,89,90,83,85,86,87,84,89,90,0,0,83,84,83,85,86,87,84,83,85,86,87,84,89,90,83,86,87,84,83,85,86,87,84,89,90,85,86,87,84,86,87,84,85,87,87,87,87,83,85,86,87,84,86,83,84,83,85,87,84,85,85,86,87,84,84,84,84,84,84,84,89,90,83,83,85,85,86,86,87,87,84,84,83,83,85,85,86,86,87,87,84,84,83,83,84,84,85,86,87,86,85,85,83,85,86,87,84,89,89,90,83,83,83,85,85,86,86,87,87,84,84,84,89,89,90,90,83,85,86,87,84,87,84,87,84,85,86,84,85,85,84,85,86,87,84,85,84,84,85,86,84,86,83,85,86,87,84,89,90,83,83,85,85,85,86,86,87,87,87,84,84,84,83,85,83,85,83,86,83,85,86,87,84,86,86,83,85,86,87,84,85,87,84,85,89,86,85,85,83,85,86,87,84,0,85,85,84,87,83,85,86,87,84,83,85,86,87,84,85,86,87,84,84,83,83,83,87,84,85,86,87,84,85,86,83,87,84,87,84,85,86,84,85,84,85,86,87,84,85,86,83,84,83,84,84,84,83,85,86,84,84,84,84,83,84,83,84,85,86,87,84,86,84,84,84,86,86,83,85,86,87,84,89,90,89,84,83,85,86,87,84,89,90,85,83,85,86,87,84,89,90,83,84,83,84,83,85,86,87,84,89,90,86,85,85,85,85,0,83,84,83,84,275,0,0,0,0,0,0,0,106,118,94,97,125,105,106,118,94,97,125,105,106,118,94,97,105,106,118,105,106,118,106,125,125,125,97,125,105,106,118,94,97,125,105,106,118,94,97,125,105,106,118,94,97,105,106,118,94,97,105,106,94,105,105,106,118,94,97,105,106,94,125,105,106,118,94,97,105,106,118,125,105,106,118,94,97,125,105,106,118,94,97,125,105,106,118,94,97,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,98,0,0,0,98,124,98,134,103,130,108,109,107,121,132,133,119,120,126,128,100,123,124,98,134,103,130,108,109,107,121,132,133,119,120,126,128,100,123,124,108,121,132,126,123,108,121,132,126,123,108,109,107,121,132,119,120,126,130,107,130,98,134,103,130,130,108,109,107,121,132,133,119,120,126,128,100,123,124,98,134,103,130,108,109,107,121,132,133,119,120,126,128,100,123,124,103,103,134,103,124,124,124,124,98,134,103,130,108,109,107,121,132,133,119,120,126,128,100,123,124,108,109,107,121,132,133,119,120,126,128,100,134,103,98,134,103,123,124,124,123,124,124,108,109,121,132,133,119,120,126,128,108,109,107,121,132,133,119,120,108,109,121,119,126,128,108,109,121,119,126,128,123,124,123,124,108,109,107,121,132,133,119,120,126,128,100,108,109,107,121,132,133,119,120,126,128,98,98,98,98,123,124,123,124,103,124,124,103,108,109,107,121,132,133,119,120,100,108,121,132,126,123,130,98,134,103,130,108,109,107,121,132,133,119,120,126,128,100,123,124,98,134,103,130,108,109,107,121,132,133,119,120,126,128,100,123,124,98,134,103,130,108,109,107,121,132,133,119,120,126,128,100,123,124,123,124,130,124,0,0,0,0,0,0,0,0,0,110,93,129,104,131,101,111,127,110,93,129,104,131,101,111,127,110,93,129,104,131,127,110,93,129,104,131,127,110,111,127,110,93,129,104,131,101,111,127,110,93,129,104,131,101,111,127,110,93,129,104,131,101,111,127,110,93,129,104,131,101,111,127,110,127,110,111,110,127,110,93,129,104,131,127,110,93,129,104,131,101,111,127,110,111,127,110,93,129,104,131,101,111,110,93,129,104,131,127,110,93,129,104,131,101,111,127,110,93,129,104,131,101,111,127,110,93,129,104,131,101,111,127,0,0,0,0,0,0,0,92,91,92,92,114,112,91,92,102,113,114,112,91,92,102,113,114,91,113,114,91,113,91,92,114,112,113,114,112,91,92,102,113,114,112,91,92,102,113,91,92,92,91,92,92,92,114,112,91,92,102,113,114,112,102,113,114,112,91,92,91,92,114,112,102,113,114,112,113,91,92,91,92,92,92,92,92,92,92,114,112,102,113,92,92,92,92,114,91,113,114,112,91,92,102,113,114,112,91,92,102,113,114,112,91,92,102,113,0,0,0,0,0,117,116,115,117,116,115,95,117,116,115,95,117,116,115,116,115,116,115,115,95,95,117,116,115,117,116,115,95,117,116,115,95,117,116,115,95,117,116,115,117,116,115,117,116,115,117,116,95,117,116,115,95,117,116,115,115,117,116,115,95,117,116,115,116,115,117,116,115,95,117,116,115,95,117,116,115,117,116,115,95,117,116,115,0,0,0,0,40,138,40,40,40,40,40,139,138,140,40,139,138,140,40,139,138,140,40,139,138,140,40,40,40,139,140,40,40,139,138,140,40,139,139,138,138,140,140,40,40,40,40,40,139,138,140,40,40,40,40,40,40,40,139,138,140,40,40,138,40,140,40,40,139,40,139,40,140,40,139,138,140,139,138,140,40,139,138,140,40,139,138,140,40,139,138,140,140,0,0,0,145,0,0,0,0,0,0,0,0,4,0,0,0,145,0,0,0,4,0,0,145,0,0,0,3,3,146,150,151,149,147,148,159,3,145,24,146,150,151,149,147,148,159,3,145,24,146,145,24,146,145,24,146,24,3,3,3,3,3,24,24,149,147,148,149,147,148,149,147,145,24,150,151,150,151,3,150,151,149,147,148,150,3,38,39,152,153,154,155,156,157,158,159,159,145,24,24,146,146,0,150,151,149,147,148,159,3,145,24,146,24,150,151,149,147,148,159,3,145,24,146,148,148,3,3,24,3,3,3,3,145,24,146,159,24,146,150,151,149,147,148,159,3,145,24,146,150,151,149,147,148,159,3,145,24,146,150,151,149,147,148,159,3,145,24,146,148,148,3,0,160,3,160,3,3,160,3,3,0,0,0,161,161,162,161,161,161,161,161,162,163,161,162,163,161,162,161,162,161,161,161,161,162,161,163,163,161,161,161,163,161,162,163,161,161,161,161,162,163,161,161,161,161,161,161,161,161,161,161,161,161,161,162,163,161,161,162,161,162,161,161,161,161,161,161,161,161,162,163,161,161,162,162,163,161,161,161,161,161,162,163,161,161,162,161,161,161,161,161,161,161,161,161,161,161,161,162,161,162,161,162,161,161,161,162,163,161,162,163,161,161,161,161,161,161,161,161,162,163,161,162,161,162,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,194,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,164,165,164,165,164,165,164,165,165,164,165,164,165,166,164,165,166,167,183,184,168,185,186,187,188,189,190,191,169,170,171,178,172,179,173,174,180,175,181,176,182,164,165,166,167,183,184,168,185,186,187,188,189,190,191,169,170,171,178,172,179,173,174,180,175,181,176,182,164,166,167,168,169,170,171,172,173,174,175,176,164,166,167,168,169,170,171,172,173,174,175,176,177,164,165,170,171,178,172,179,173,174,180,175,181,176,182,164,165,164,165,164,165,164,165,166,167,183,184,168,185,186,187,188,189,190,191,169,169,170,171,178,172,179,173,174,180,175,181,176,182,164,165,169,164,165,164,165,166,167,183,184,168,185,186,187,188,189,190,191,169,170,171,178,172,179,173,174,180,175,181,176,182,0,0,0,0,0,0,193,193,193,193,193,193,164,165,166,167,183,184,168,185,186,187,188,189,190,191,169,170,171,178,172,179,173,174,180,175,181,176,182,164,165,166,167,183,184,168,185,186,187,188,189,190,191,169,170,171,178,172,179,173,174,180,175,181,176,182,179,180,182,165,164,165,172,179,173,174,180,176,182,164,194,164,165,190,191,169,170,171,178,172,179,173,174,180,175,181,176,182,164,165,164,165,166,167,183,184,168,185,186,187,188,189,190,191,169,170,171,178,172,179,173,174,180,175,181,176,182,164,165,166,167,183,184,168,185,190,191,169,170,171,178,172,179,173,174,180,175,181,176,182,164,165,170,171,178,172,179,173,174,180,175,181,176,182,164,165,170,171,178,172,179,173,174,180,175,181,176,182,164,165,0,172,174,176,164,165,164,165,166,167,183,184,168,185,186,187,188,189,190,191,169,170,171,178,172,179,173,174,180,175,181,176,182,164,166,167,168,169,170,171,172,173,174,175,176,169,169,164,165,166,167,183,184,168,185,186,187,188,189,190,191,169,170,171,178,172,179,173,174,180,175,181,176,182,164,165,166,167,183,184,168,185,186,187,188,189,190,191,169,170,171,178,172,179,173,174,180,175,181,176,182,164,165,166,167,183,184,168,185,186,187,188,189,190,191,169,170,171,178,172,179,173,174,180,175,181,176,182,0,0,0,0,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,197,197,196,198,199,144,201,196,198,197,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,199,144,201,196,198,197,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,199,144,201,196,198,197,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,199,144,201,196,198,197,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,196,198,197,144,201,144,201,220,144,197,199,144,144,201,201,196,198,197,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,217,218,218,219,219,220,221,217,218,219,199,144,201,196,198,197,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,0,223,0,0,0,0,199,144,201,196,198,197,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,199,196,198,197,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,221,220,197,196,198,197,212,214,215,197,221,199,196,198,197,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,221,199,196,198,197,202,203,204,205,208,209,210,211,212,213,214,215,197,197,198,0,197,199,202,203,204,205,206,207,214,215,197,197,196,198,197,212,213,214,215,216,217,218,219,199,144,201,196,198,197,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,144,201,217,218,219,217,218,219,199,144,201,196,198,197,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,199,144,201,196,198,197,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,199,144,201,196,198,197,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,220,144,0,0,0,0,0,224,0,224,0,224,0,0,0,200,0,224,225,226,227,228,62,229,224,225,226,227,228,62,229,224,225,226,227,228,62,229,224,225,226,227,228,62,229,224,224,225,226,227,228,62,229,224,225,226,227,228,62,229,230,225,226,227,228,62,229,224,225,226,227,228,62,229,200,200,200,200,230,225,226,227,228,62,229,232,225,226,227,228,62,229,230,225,226,227,228,62,229,232,225,226,227,228,62,229,230,226,227,228,62,232,226,227,228,62,200,200,224,225,226,227,228,62,229,224,225,226,227,228,62,229,224,225,226,227,228,62,229,224,225,226,227,228,62,229,0,0,0,0,0,0,28,28,28,233,28,28,28,234,234,28,28,234,28,234,28,28,233,235,234,28,28,233,235,28,28,28,233,28,28,233,28,28,28,28,233,235,28,234,28,28,28,28,233,28,28,28,28,28,28,28,28,28,28,28,28,28,28,234,28,28,233,233,235,235,234,28,28,28,28,28,28,28,233,235,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,234,28,233,235,28,28,233,234,28,28,28,28,28,28,234,28,28,28,28,28,28,234,234,28,28,28,28,28,28,28,28,28,28,28,28,234,28,28,28,28,233,239,28,233,235,28,234,28,233,235,234,28,233,235,28,28,234,28,233,235,233,28,28,28,0,0,240,240,241,240,240,240,240,240,241,240,241,240,240,241,240,241,240,240,240,240,241,240,240,240,240,240,240,241,240,240,240,240,241,240,240,240,240,240,240,240,240,240,240,240,240,240,241,240,240,241,240,241,240,240,240,240,240,240,240,240,241,240,240,241,240,240,240,240,240,241,240,240,241,240,240,240,240,240,240,240,240,240,240,240,240,240,241,240,240,241,240,241,240,240,240,241,240,241,240,240,240,240,240,240,240,240,240,240,241,240,241,240,241,0,242,242,0,0,0,0,0,243,243,244,243,37,245,37,37,37,37,243,37,37,244,243,37,37,244,243,37,244,243,37,37,245,246,244,243,37,37,245,246,37,37,243,37,37,243,37,37,243,37,37,37,243,37,37,37,37,244,243,37,245,246,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,244,243,37,245,246,244,243,37,37,37,37,37,37,37,37,37,37,37,37,37,245,246,37,37,37,37,37,37,37,244,243,37,245,246,37,37,244,243,37,37,37,245,246,37,37,244,243,37,244,37,37,37,37,37,37,37,37,37,37,244,243,245,246,244,243,246,243,37,37,37,37,37,37,37,37,37,37,37,37,37,37,244,243,245,246,37,37,37,37,37,243,37,37,244,243,37,245,246,244,243,37,245,246,37,37,244,243,37,245,246,37,37,0,0,251,254,256,0,0,0,0,0,0,0,0,247,248,251,254,256,257,258,248,247,251,254,256,257,258,248,247,248,248,247,247,248,258,248,251,254,256,257,258,248,247,251,254,256,257,258,248,247,248,258,251,254,256,248,247,257,257,248,247,248,248,247,258,247,251,254,256,257,258,248,247,251,254,256,257,258,248,247,251,254,256,257,258,248,247,248,248,247,248,0,0,0,0,0,261,252,255,261,252,255,260,255,261,252,255,261,252,255,261,252,255,262,261,252,261,252,255,261,252,255,261,252,255,260,255,255,255,0,0,0,0,263,264,263,264,263,264,263,264,263,264,264,264,263,264,263,264,263,263,264,263,264,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,267,267,267,267,250,0,267,267,267,267,267,267,267,267,267,267,267,267,267,267,250,267,0,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,269,269,269,0,0,269,269,269,269,269,269,269,269,269,269,269,269,269,249,269,249,269,249,269,249,269,249,269,269,269,269,269,249,269,269,249,269,269,269,269,269,249,269,269,269,269,269,269,269,269,269,269,249,269,269,269,269,269,269,269,249,269,269,269,269,269,269,249,269,269,249,269,249,269,249,269,269,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,270,272,0,271,0,0,0,270,272,266,270,271,272,266,270,271,272,266,270,271,272,266,270,271,272,266,270,271,272,266,270,271,272,266,270,271,272,266,270,271,272,266,270,271,272,266,270,271,272,266,270,271,272,266,270,271,272,266,270,271,272,266,270,271,272,0],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],0,0,[[1,3],4],[-1,-1,[]],0,[-1,-2,[],[]],0,[1,[[0,[[7,[],[[5,[6]]]],8]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,0,0,[[11,12],13],[14,15],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[11,13,12],2],0,0,0,[15,2],[-1,-1,[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,0,0,0,0,0,0,0,0,[12,14],[[12,14],[[9,[12,16]]]],[12,13],[[17,12],13],[12,13],[[17,12],13],[[18,12],[[9,[[20,[[19,[13]]]],21]]]],[[22,12],[[9,[[20,[[19,[13]]]],21]]]],[[22,12],[[9,[[20,[[19,[13]]]],21]]]],[[18,12],[[9,[[20,[[19,[13]]]],21]]]],[14,[[9,[12,16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[18,18],[22,22],[12,12],[16,16],[21,21],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[12,[[20,[13]]]],[[13,12],2],[[17,13,12],2],[[18,[20,[13]],12],2],[[22,[20,[13]],12],2],[[],22],[[12,12],23],[[16,16],23],[[21,21],23],[[12,12],[[9,[[2,[12,14]],16]]]],[[12,12],[[9,[12,16]]]],[[22,3],[[9,[2,24]]]],[[12,3],[[9,[2,24]]]],[[16,3],[[9,[2,24]]]],[[16,3],[[9,[2,24]]]],[[21,3],[[9,[2,24]]]],[[21,3],[[9,[2,24]]]],[-1,12,25],[[],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[14,14],[[9,[12,16]]]],[[14,14],12],[[22,[20,[13]],12,12],[[9,[[20,[[19,[13]]]],21]]]],[[18,[20,[13]],12,12],[[9,[[20,[[19,[13]]]],21]]]],[[22,[20,[13]],12,12],[[9,[[20,[[19,[13]]]],21]]]],[[18,[20,[13]],12,12],[[9,[[20,[[19,[13]]]],21]]]],[12,26],[[12,-1],2,27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],12],[12,12],[[12,14],14],[[13,12,14],13],[[17,13,12,14],13],[[12,14],[[9,[[2,[12,14]],16]]]],[[12,14],[[9,[12,16]]]],[[22,[20,[13]],12,12],[[9,[[20,[[19,[13]]]],21]]]],[[18,[20,[13]],12,12],[[9,[[20,[[19,[13]]]],21]]]],[12,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,0,0,0,0,0,0,[[[29,[6]],6]],[[[29,[6]],[29,[6]]]],[[[29,[6]],[29,[6]]],2],[[[29,[6]],6],2],[[[29,[-1]]],-1,[30,25]],[31,-1,25],[-1,-2,[],[]],[[[29,[-1]]],-1,[30,25]],[32,-1,25],[-1,-2,[],[]],[[[29,[-1]]],[[29,[-1]]],[30,25]],[[[29,[-1]],[29,[-1]]],2,[30,25]],[[[30,[],[[33,[-1]]]],-1],2,31],[[-1,-2],2,[],[]],[[[29,[-1]],[29,[-1]]],34,[35,30,25]],[[],[[29,[-1]]],[30,25]],[[[29,[-1]]],-1,[30,25]],[[[29,[-2]],[29,[-1]]],23,[30,25],[[36,[-1]],30,25]],[[[29,[[19,[-2]]]],[37,[-1,-3]]],23,[],[[36,[-1]],8],18],[[[29,[6]],28],23],[[[29,[6]],6],23],[[[29,[[19,[-2]]]],[19,[-1]]],23,[],[[36,[-1]],8]],[[[29,[6]],6],23],[[[29,[[19,[-2]]]],[19,[-1]]],23,[],[[36,[-1]],8]],[[[29,[-1]],3],[[9,[2,24]]],[38,30,25]],[[[29,[-1]],3],[[9,[2,24]]],[39,30,25]],[-1,-1,[]],[28,[[29,[6]]]],[6,[[29,[6]]]],[[[37,[-1]]],[[29,[[19,[-1]]]]],8],[40,[[29,[41]]]],[40,[[29,[41]]]],[28,[[29,[6]]]],[[[19,[-1]]],[[29,[[19,[-1]]]]],8],[41,[[29,[41]]]],[[[37,[-1]]],[[29,[[19,[-1]]]]],8],[-1,[[29,[6]]],[[42,[],[[5,[6]]]]]],[-1,[[29,[6]]],[[42,[],[[5,[43]]]]]],[-2,[[29,[[19,[-1]]]]],8,[[42,[],[[5,[-1]]]]]],[-1,[[29,[6]]],[[42,[],[[5,[28]]]]]],[[[29,[-1]],-2],2,[44,30,25],27],[-1,-2,[],[]],[[[29,[-1]]],[],[30,25]],[[[29,[-1]]],23,[30,25]],[[[29,[-1]]],23,[30,25]],[[[29,[6]],6],23],[[[29,[6]],6],23],[[[29,[[19,[-2]]]],[19,[-1]]],23,[],[[36,[-1]],8]],[[[29,[[19,[-2]]]],[19,[-1]]],23,[],[[36,[-1]],8]],[[[29,[6]],28],23],[[[29,[[19,[-2]]]],[37,[-1,-3]]],23,[],[[36,[-1]],8],18],[[[29,[-1]],[29,[-1]]],[[45,[34]]],[46,30,25]],[[[29,[-1]]],[],[30,25]],[[[30,[],[[33,[-1]]]]],-1,31],[-1,-2,[],[]],[-1,28,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,0,[[[47,[-1,-2]]],-2,25,18],[[[47,[-1,-2]]],-1,25,18],[[[47,[-1,-2]]],-1,25,18],[[[47,[[19,[[48,[-1]]]],-2]]],[[47,[[19,[-1]],-2]]],[],18],[[[47,[[48,[-1]],-2]]],[[47,[-1,-2]]],[],18],[-1,-2,[],[]],[[[47,[-1,-2]]],-1,25,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[47,[-1,-2]]],-1,25,18],[[[47,[-2,-3]],-1],[],49,[[50,[-1]],25],18],[[[47,[-2,-3]],-1],[],49,[[51,[-1]],25],18],[[[47,[-2,-3]],-1],[],49,[[52,[-1]],25],18],[[[47,[-1]]],[[45,[53]]],53],[[[47,[-1,-2]]],[[47,[-1,-2]]],8,[18,8]],[[[47,[6]]],[[47,[6]]]],[[[47,[[19,[-1]],-2]]],[[47,[[19,[-1]],-2]]],8,[18,8]],[[[47,[41]]],[[47,[41]]]],[[[47,[-1,-2]],[47,[-1,-2]]],2,8,[18,8]],[[[47,[[19,[-1]],-2]],[47,[[19,[-1]],-2]]],2,8,[18,8]],[[-1,-2],2,[],[]],[[[47,[-1,-2]],[47,[-1,-2]]],34,[35,25],18],[[],[[47,[-1]]],54],[[],[[47,[41]]]],[[],[[47,[6]]]],[[],[[47,[[19,[-1]]]]],[]],[[[55,[-1]]],-1,25],[[[47,[-1,-2]]],-1,25,18],[[[55,[-1]]],-1,25],[[[47,[-1,-2]]],-1,25,18],[[[47,[-1]]],6,53],[[[47,[56,-1]]],[[9,[[47,[-2,-1]],[47,[56,-1]]]]],18,56],[[[47,[56,-1]]],[[9,[[47,[-2,-1]],[47,[56,-1]]]]],18,56],[[[47,[56,-1]]],[[9,[[47,[-2,-1]],[47,[56,-1]]]]],18,56],[[[47,[56,-1]]],[[47,[-2,-1]]],18,56],[[[47,[56,-1]]],[[47,[-2,-1]]],18,56],[[[47,[56,-1]]],[[47,[-2,-1]]],18,56],[[[55,[-1]]],2,25],[[[47,[-1,-2]]],2,25,18],[[[47,[-1,-2]],[47,[-1,-2]]],23,[36,25],18],[[[47,[-1,-2]]],57,[27,25],18],[[[55,[-1]],3],[[9,[2,24]]],[39,25]],[[[55,[-1]],3],[[9,[2,24]]],[38,25]],[[[47,[-1,-2]],3],[[9,[2,24]]],25,18],[[[47,[-1,-2]],3],[[9,[2,24]]],[39,25],18],[[[47,[-1,-2]],3],[[9,[2,24]]],[38,25],18],[-1,-1,[]],[28,[[47,[6]]]],[-1,[[47,[53]]],53],[[[29,[41]]],[[47,[41]]]],[-1,[[47,[53]]],[53,58,59]],[[[60,[-1]]],[[47,[[19,[-1]]]]],[]],[-1,[[47,[-1]]],[]],[6,[[47,[6]]]],[41,[[47,[41]]]],[[[37,[-1,-2]]],[[47,[[19,[-1]],-2]]],[],18],[[[29,[6]]],[[47,[53]]]],[40,[[47,[41]]]],[[[29,[6]]],[[47,[53]]]],[28,[[47,[53]]]],[[[29,[6]]],[[47,[6]]]],[[[47,[6,-1]]],[[47,[[19,[13]],-1]]],18],[6,[[47,[53]]]],[[[29,[[19,[-1]]]]],[[47,[[19,[-1]]]]],8],[-1,-1,[]],[26,-1,[]],[[[19,[-1]]],[[47,[[19,[-1]]]]],8],[6,[[47,[53]]]],[28,[[47,[53]]]],[-2,[[47,[[19,[-1]]]]],[],[[42,[],[[5,[-1]]]]]],[[],[[47,[-1]]],25],[-1,[[47,[-2,-1]]],18,25],[[[47,[-1,-2]],[47,[-1,-2]]],23,[46,25],18],[[[47,[-1,-2]],[47,[-1,-2]]],23,[46,25],18],[[[47,[-1,-2]],-3],2,[44,25],18,27],[-1,-2,[],[]],[-1,-2,[],[]],[[[47,[-1,-2]]],[[47,[[19,[-1]],-2]]],[],18],[-1,[],[]],[[[47,[-1,-2]]],-1,[],18],[-1,-2,[],[]],[[[47,[-1,-2]]],[[61,[[47,[-1,-2]]]]],25,18],[[[47,[-1,-2]]],[],25,18],[[[47,[-1,-2]]],[[2,[-2]]],25,18],[[-1,6],[[62,[-2]]],[],[]],[[-1,6],23,[]],[[[47,[-1,-2]]],23,[63,25],18],[[-1,6],23,[]],[[-1,6],23,[]],[[[47,[-1,-2]]],45,[64,25],18],[[[47,[-1,-2]],[47,[-1,-2]]],23,[46,25],18],[[[47,[-1,-2]]],-1,25,18],[[[47,[-1,-2]]],14,[63,25],18],[[[47,[-1,-2]],[47,[-1,-2]]],23,[46,25],18],[[[47,[-1,-2]],[47,[-1,-2]]],23,[36,25],18],[-1,[[55,[-1]]],[]],[-1,[[47,[-1]]],[]],[[-1,-2],[[47,[-1,-2]]],[],[18,18]],[[],[[47,[[48,[-1]]]]],[]],[-1,[[47,[[48,[-2]],-1]]],[18,18],[]],[14,[[47,[[19,[[48,[-1]]]]]]],[]],[[14,-1],[[47,[[19,[[48,[-2]]]],-1]]],18,[]],[-2,[[55,[-1]]],25,[[65,[-1]]]],[[],[[47,[[48,[-1]]]]],[]],[-1,[[47,[[48,[-2]],-1]]],[18,18],[]],[14,[[47,[[19,[[48,[-1]]]]]]],[]],[[14,-1],[[47,[[19,[[48,[-2]]]],-1]]],18,[]],[[[47,[-1,-2]]],45,[64,25],18],[[[47,[-1,-2]]],45,[7,25],18],[[[47,[-1,-2]],14],45,[64,25],18],[[[47,[-1,-2]],14],45,[7,25],18],[[[47,[-1,-2]],[47,[-1,-2]]],[[45,[34]]],[46,25],18],[-1,[[61,[[47,[-1]]]]],[]],[[-1,-2],[[61,[[47,[-1,-2]]]]],[],[18,18]],[[[61,[[47,[-1,-2]]]],66],67,[68,69,25],18],[[[61,[[47,[-1]]]],66],[[67,[45]]],[70,69,25]],[[[47,[-1]],71],2,53],[[[61,[[47,[-2,-3]]]],-1],72,[],[[73,[-1]],69,25],18],[[[47,[-1,-2]]],[[2,[14,[45,[14]]]]],[64,25],18],[[[47,[-1]]],[[2,[14,[45,[14]]]]],[70,69,25]],[[[55,[-1]]],[[45,[53]]],[53,25]],[[[47,[-1]]],[[45,[53]]],53],[[-1,6],[[45,[6]]],[]],[[-1,6],[[45,[6]]],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[[[47,[[19,[-1]]]]],[[9,[[47,[[60,[-1]]]]]]],[]],[[[37,[-1]]],[[9,[[47,[[60,[-1]]]]]]],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[[47,[-1]],21]]],[]],[[-1,-2],[[9,[[47,[-1,-2]],21]]],[],[18,18]],[[],[[9,[[47,[[48,[-1]]]],21]]],[]],[-1,[[9,[[47,[[48,[-2]],-1]],21]]],[18,18],[]],[14,[[9,[[47,[[19,[[48,[-1]]]]]],21]]],[]],[[],[[9,[[47,[[48,[-1]]]],21]]],[]],[-1,[[9,[[47,[[48,[-2]],-1]],21]]],[18,18],[]],[14,[[9,[[47,[[19,[[48,[-1]]]]]],21]]],[]],[-1,10,[]],[-1,10,[]],[[[47,[-1,-2]],[19,[13]]],2,[27,25],18],[[[47,[[48,[-1]],-2]],-1],[[47,[-1,-2]]],[],18],[[[47,[-1,-2]],74],2,[27,25],18],[[[47,[-1,-2]],75],2,[27,25],18],[[[47,[-1,-2]],76],2,[27,25],18],[[[47,[-1,-2]],77],2,[27,25],18],[[[47,[-1,-2]],78],2,[27,25],18],[[[47,[-1,-2]],79],2,[27,25],18],[[[47,[-1,-2]],14],2,[27,25],18],[[[47,[-1,-2]],6],2,[27,25],18],[[[47,[-1,-2]],80],2,[27,25],18],[[[47,[-1,-2]],81],2,[27,25],18],[[[47,[-1,-2]],82],2,[27,25],18],[[[47,[-1,-2]],57],2,[27,25],18],[[[47,[-1,-2]],13],2,[27,25],18],[[[47,[-1,-2]],14],2,[27,25],18],0,0,0,0,0,0,0,0,0,[[[83,[-1,-2]]],-2,[],18],[[[84,[-1,-2]]],-2,[],18],[[[83,[-1,-2]],[83,[-1,-2]]],2,35,18],[[[85,[-1,-2,-3]],[85,[-1,-2,-3]]],2,35,[],[8,18,8]],[[[86,[-1,-2]],[86,[-1,-2]]],2,35,[8,18,8]],[[[87,[-1]],[87,[-1]]],2,[]],[[[84,[-1,-2]],[84,[-1,-2]]],2,[],18],[[[84,[-1,-2]]],[[2,[[19,[-1]],[19,[-1]]]]],[],18],[[[83,[-1,-2]]],[[19,[-1]]],[],18],[[[84,[-1,-2]]],[[2,[[19,[-1]],[19,[-1]]]]],[],18],[[[87,[-1,-2]]],[[45,[-1]]],[],18],[[[84,[-1,-2]]],[[45,[-1]]],[],18],[[[87,[-1,-2]]],[[45,[-1]]],[],18],[[[84,[-1,-2]]],[[45,[-1]]],[],18],0,[[[84,[-1,-2]],-1],[[9,[14,14]]],35,18],[[[84,[-1,-2]],-3],[[9,[14,14]]],[],18,[[51,[-1],[[88,[34]]]]]],[[[84,[-1,-2]],-3,-4],[[9,[14,14]]],[],18,35,[[51,[-1],[[88,[-3]]]]]],[[[86,[-1,-2]],[86,[-1,-2]]],[[86,[-1,-2]]],[35,8],[18,8]],[[[86,[-1,-2]],[86,[-1,-2]]],[[86,[-1,-2]]],[35,8],[18,8]],[[[86,[-1,-2]],[86,[-1,-2]]],[[86,[-1,-2]]],[35,8],[18,8]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[83,[-1,-2]]],14,[],18],[[[84,[-1,-2]]],14,[],18],[[[83,[-1,-2]]],2,[],18],[[[85,[-1,-2,-3]]],2,[],[],[18,8]],[[[86,[-1,-2]]],2,[],[8,18,8]],[[[87,[-1,-2]]],2,[],18],[[[84,[-1,-2]]],2,[],18],[[[83,[-1,-2]]],[[83,[-1,-2]]],8,[18,8]],[[[85,[-1,-2,-3]]],[[85,[-1,-2,-3]]],8,8,[18,8]],[[[86,[-1,-2]]],[[86,[-1,-2]]],8,[18,8]],[[[87,[-1,-2]]],[[87,[-1,-2]]],8,[18,8]],[[[84,[-1,-2]]],[[84,[-1,-2]]],8,[18,8]],[89,89],[90,90],[[[83,[-1,-2]],[83,[-1,-2]]],2,8,[18,8]],[[[86,[-1,-2]],[86,[-1,-2]]],2,8,[18,8]],[[[87,[-1,-2]],[87,[-1,-2]]],2,8,[18,8]],[[[84,[-1,-2]],[84,[-1,-2]]],2,8,[18,8]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[85,[-1,-2,-3]],[85,[-1,-2,-3]]],34,35,35,[18,8]],[[[86,[-1,-2]],[86,[-1,-2]]],34,35,[18,8]],[[[87,[-1,-2]],[87,[-1,-2]]],34,35,18],[[[84,[-1,-2]],[84,[-1,-2]]],34,35,18],[[[86,[-2,-3]],-1],23,[35,25],[[31,[-1]],35],[18,8]],[[[87,[-1,-2]],-1],23,36,18],[[[84,[-1,-2]],-1],23,36,18],[[[85,[-2,-3,-4]],-1],23,[35,25],[[31,[-1]],35],[],[18,8]],[[[87,[-1,-2]]],[[91,[-1,-2]]],[],18],[[[87,[-1,-2]]],[[92,[-1,-2]]],[],18],[[[87,[-1,-2]]],[[91,[-1,-2]]],[],18],[[[87,[-1,-2]]],[[92,[-1,-2]]],[],18],[[],[[83,[-1]]],35],[[],[[85,[-1,-2]]],[],[]],[[],[[86,[-1]]],[]],[[],[[87,[-1]]],[]],[[],[[84,[-1]]],[]],[[[86,[-1,-2]],[86,[-1,-2]]],[[93,[-1,-2]]],35,[18,8]],[[[83,[-1,-2]]],[[94,[-1,-2]]],[],18],[[[84,[-1,-2]],-3],[[95,[-1,-2]]],[],18,[[96,[14]]]],[[[83,[-1,-2]]],[[97,[-1,-2]]],35,18],[[[85,[-1,-2,-3]]],2,[],[],[18,8]],[[[87,[-1,-2]]],2,[],18],[[[84,[-1,-2]]],2,[],18],[[[85,[-1,-2,-3]],-1],[[98,[-1,-2,-3]]],35,[],[18,8]],[[[85,[-1,-2,-3]],[85,[-1,-2,-3]]],23,36,36,[18,8]],[[[86,[-1,-2]],[86,[-1,-2]]],23,36,[18,8]],[[[87,[-1,-2]],[87,[-1,-2]]],23,36,18],[[[84,[-2,-3]],[60,[-1]]],23,[],[[36,[-1]]],18],[[[84,[-2,-3]],[60,[-1]]],23,[],[[36,[-1]]],18],[[[84,[-1,-2]],[84,[-1,-2]]],23,36,18],[[[84,[-2,-3]],[60,[-1]]],23,[],[[36,[-1]]],18],[[[84,[-2,-3]],[37,[-1,-3]]],23,[],[[36,[-1]]],18],[[[84,[-2,-3]],[19,[-1]]],23,[],[[36,[-1]]],18],[[[84,[-2,-3]],[19,[-1]]],23,[],[[36,[-1]]],18],[[89,89],23],[[90,90],23],[[[83,[-1,-2]],-3],2,35,18,[[42,[],[[5,[-1]]]]]],[[[83,[-1,-2]],-3],2,[35,99],18,[[42,[],[[5,[-1]]]]]],[[[85,[-1,-2,-3]],-4],2,[35,99],99,[18,8],[[42,[],[[5,[[2,[-1,-2]]]]]]]],[[[85,[-1,-2,-3]],-4],2,35,[],[18,8],[[42,[],[[5,[[2,[-1,-2]]]]]]]],[[[86,[-1,-2]],-3],2,35,[18,8],[[42,[],[[5,[-1]]]]]],[[[86,[-1,-2]],-3],2,[35,99],[18,8],[[42,[],[[5,[-1]]]]]],[[[87,[-1,-2]],-3],2,99,18,[[42,[],[[5,[-1]]]]]],[[[87,[-1,-2]],-3],2,[],18,[[42,[],[[5,[-1]]]]]],[[[84,[-1,-2]],-3],2,99,18,[[42,[],[[5,[-1]]]]]],[[[84,[-1,-2]],-3],2,[],18,[[42,[],[[5,[-1]]]]]],[[[83,[-1,-2]],-1],2,35,18],[[[83,[-1,-2]],-1],2,[35,99],18],[[[85,[-1,-2,-3]],[2,[-1,-2]]],2,[35,99],99,[18,8]],[[[85,[-1,-2,-3]],[2,[-1,-2]]],2,35,[],[18,8]],[[[86,[-1,-2]],-1],2,[35,99],[18,8]],[[[86,[-1,-2]],-1],2,35,[18,8]],[[[87,[-1,-2]],-1],2,[],18],[[[87,[-1,-2]],-1],2,99,18],[[[84,[-1,-2]],-1],2,[],18],[[[84,[-1,-2]],-1],2,99,18],[[[83,[-1,-2]],14],2,[35,99],18],[[[83,[-1,-2]],14],2,35,18],[[[84,[-1,-2]],14],2,[],18],[[[84,[-1,-2]],14],2,99,18],[[[85,[-1,-2,-3]],-4],[[100,[-1,-2,-4,-3]]],35,[],[18,8],[[51,[-1,-2],[[88,[23]]]]]],[[[86,[-1,-2]],-3],[[101,[-1,-3,-2]]],35,[18,8],[[51,[-1],[[88,[23]]]]]],[[[87,[-1,-2]],-3],[[102,[-1,-3,-2]]],[],18,[[51,[-1],[[88,[23]]]]]],[[[86,[-1,-2]]],[[45,[-1]]],35,[18,8]],[[[85,[-1,-2,-3]]],[[45,[[103,[-1,-2,-3]]]]],35,[],[18,8]],[[[85,[-1,-2,-3]]],[[45,[[2,[-1,-2]]]]],35,[],[18,8]],[[[83,[-1,-2]],3],[[9,[2,24]]],38,18],[[[85,[-1,-2,-3]],3],[[9,[2,24]]],38,38,[18,8]],[[[86,[-1,-2]],3],[[9,[2,24]]],38,[18,8]],[[[87,[-1,-2]],3],[[9,[2,24]]],38,18],[[[84,[-1,-2]],3],[[9,[2,24]]],38,18],[[89,3],[[9,[2,24]]]],[[89,3],[[9,[2,24]]]],[[90,3],[[9,[2,24]]]],[[[37,[-1,-2]]],[[83,[-1,-2]]],35,18],[[[60,[-1]]],[[83,[-1]]],35],[-1,-1,[]],[[[60,[[2,[-1,-2]]]]],[[85,[-1,-2]]],35,[]],[-1,-1,[]],[[[60,[-1]]],[[86,[-1]]],35],[-1,-1,[]],[-1,-1,[]],[[[60,[-1]]],[[87,[-1]]],[]],[[[37,[-1,-2]]],[[84,[-1,-2]]],[],18],[[[60,[-1]]],[[84,[-1]]],[]],[-1,-1,[]],[90,89],[-1,-1,[]],[16,90],[-1,-1,[]],[-2,[[83,[-1]]],35,[[42,[],[[5,[-1]]]]]],[-3,[[85,[-1,-2]]],35,[],[[42,[],[[5,[[2,[-1,-2]]]]]]]],[-2,[[86,[-1]]],35,[[42,[],[[5,[-1]]]]]],[-2,[[87,[-1]]],[],[[42,[],[[5,[-1]]]]]],[-2,[[84,[-1]]],[],[[42,[],[[5,[-1]]]]]],[[[87,[-1,-2]]],[[45,[-1]]],[],18],[[[84,[-1,-2]]],[[45,[-1]]],[],18],[[[87,[-1,-2]]],[[45,[-1]]],[],18],[[[84,[-1,-2]]],[[45,[-1]]],[],18],[[[85,[-2,-3,-4]],-1],[[45,[-3]]],[35,25],[[31,[-1]],35],[],[18,8]],[[[86,[-2,-3]],-1],[[45,[-2]]],[35,25],[[31,[-1]],35],[18,8]],[[[84,[-1,-2]],14],[[45,[-1]]],[],18],[[[85,[-2,-3,-4]],-1],[[45,[[2,[-2,-3]]]]],[35,25],[[31,[-1]],35],[],[18,8]],[[[85,[-2,-3,-4]],-1],[[45,[-3]]],[35,25],[[31,[-1]],35],[],[18,8]],[[[84,[-1,-2]],14],[[45,[-1]]],[],18],[[[85,[-1,-2,-3]],-4],2,44,44,[18,8],27],[[[86,[-1,-2]],-3],2,44,[18,8],27],[[[87,[-1,-2]],-3],2,44,18,27],[[[84,[-1,-2]],-3],2,44,18,27],[[[85,[-2,-3,-4]],-1],-3,[35,25],[[31,[-1]],35],[],[18,8]],[[[84,[-1,-2]],14],-1,[],18],[[[84,[-1,-2]],14],-1,[],18],[[[85,[-1,-2,-3]],-1,-2],[[45,[-2]]],35,[],[18,8]],[[[86,[-1,-2]],-1],23,35,[18,8]],[[[84,[-1,-2]],14,-1],2,[],18],[[[86,[-1,-2]],[86,[-1,-2]]],[[104,[-1,-2]]],35,[18,8]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[83,[-1,-2]]],[[105,[-1]]],[],18],[[[83,[-1,-2]]],[[106,[-1,-2]]],[],18],[[[85,[-1,-2,-3]]],[[107,[-1,-2,-3]]],[],[],[18,8]],[[[85,[-1,-2,-3]]],[[108,[-1,-2]]],[],[],[18,8]],[[[85,[-1,-2,-3]]],[[109,[-1,-2]]],[],[],[18,8]],[[[86,[-1,-2]]],[[110,[-1]]],[],[18,8]],[[[86,[-1,-2]]],[[111,[-1,-2]]],[],[18,8]],[[[87,[-1,-2]]],[[112,[-1]]],[],18],[[[87,[-1,-2]]],[[113,[-1,-2]]],[],18],[[[87,[-1,-2]]],[[114,[-1]]],[],18],[[[84,[-1,-2]]],[[115,[-1,-2]]],[],18],[[[84,[-1,-2]]],[[116,[-1]]],[],18],[[[84,[-1,-2]]],[[117,[-1]]],[],18],[[[83,[-1,-2]]],[[118,[-1,-2]]],[],18],[[[85,[-1,-2,-3]]],[[119,[-1,-2,-3]]],[],[],[18,8]],[[[83,[-1,-2]]],[[37,[-1,-2]]],35,18],[[[85,[-1,-2,-3]]],[[120,[-1,-2,-3]]],[],[],[18,8]],[[[83,[-1,-2]]],[[37,[-1,-2]]],[],18],[[[86,[-1,-2]],[86,[-1,-2]]],23,35,[18,8]],[[[83,[-1,-2]]],23,[],18],[[[85,[-1,-2,-3]]],23,[],[],[18,8]],[[[86,[-1,-2]]],23,[],[18,8]],[[[87,[-1,-2]]],23,[],18],[[[84,[-1,-2]]],23,[],18],[[[86,[-1,-2]],[86,[-1,-2]]],23,35,[18,8]],[[[86,[-1,-2]],[86,[-1,-2]]],23,35,[18,8]],[[[83,[-1,-2]]],[[105,[-1]]],[],18],[[[85,[-1,-2,-3]]],[[108,[-1,-2]]],[],[],[18,8]],[[[86,[-1,-2]]],[[110,[-1]]],[],[18,8]],[[[87,[-1,-2]]],[[114,[-1]]],[],18],[[[84,[-1,-2]]],[[116,[-1]]],[],18],[[[85,[-1,-2,-3]]],[[109,[-1,-2]]],[],[],[18,8]],[[[87,[-1,-2]]],[[112,[-1]]],[],18],[[[84,[-1,-2]]],[[117,[-1]]],[],18],[[[85,[-1,-2,-3]]],[[121,[-1,-2]]],[],[],[18,8]],[89,90],[[[86,[-1,-2]]],[[45,[-1]]],35,[18,8]],[[[85,[-1,-2,-3]]],[[45,[[103,[-1,-2,-3]]]]],35,[],[18,8]],[[[85,[-1,-2,-3]]],[[45,[[2,[-1,-2]]]]],35,[],[18,8]],[[[83,[-1,-2]]],14,[],18],[[[85,[-1,-2,-3]]],14,[],[],[18,8]],[[[86,[-1,-2]]],14,[],[18,8]],[[[87,[-1,-2]]],14,[],18],[[[84,[-1,-2]]],14,[],18],0,[[[85,[-2,-3,-4]],[122,[-1]]],[[123,[-2,-3]]],35,[[31,[-1]],35],[],[18,8]],[[[85,[-2,-3,-4]],[122,[-1]]],[[124,[-2,-3,-4]]],35,[[31,[-1]],35],[],[18,8]],[[[84,[-1,-2]]],[[19,[-1]]],[],18],[[[87,[-1,-2]],[87,[-1,-2]]],23,36,18],[[],[[83,[-1]]],35],[[],[[85,[-1,-2]]],[],[]],[[],[[86,[-1]]],[]],[[],[[87,[-1]]],[]],[[],[[84,[-1]]],[]],[-1,[[83,[-2,-1]]],18,35],[-1,[[85,[-2,-3,-1]]],[18,8],[],[]],[-1,[[86,[-2,-1]]],[18,8],[]],[-1,[[87,[-2,-1]]],18,[]],[-1,[[84,[-2,-1]]],18,[]],[[[85,[-1,-2,-3]],[85,[-1,-2,-3]]],[[45,[34]]],46,46,[18,8]],[[[86,[-1,-2]],[86,[-1,-2]]],[[45,[34]]],46,[18,8]],[[[87,[-1,-2]],[87,[-1,-2]]],[[45,[34]]],46,18],[[[84,[-1,-2]],[84,[-1,-2]]],[[45,[34]]],46,18],[[[84,[-1,-2]],-3],14,[],18,[[51,[-1],[[88,[23]]]]]],[[[83,[-1,-2]]],[[45,[-1]]],[],18],[[[83,[-1,-2]]],[[45,[[125,[-1,-2]]]]],35,18],[[[83,[-1,-2]]],[[45,[-1]]],35,18],[[[87,[-1,-2]]],[[45,[-1]]],[],18],[[[84,[-1,-2]]],[[45,[-1]]],[],18],[[[85,[-1,-2,-3]]],[[45,[[2,[-1,-2]]]]],35,[],[18,8]],[[[86,[-1,-2]]],[[45,[-1]]],35,[18,8]],[[[87,[-1,-2]]],[[45,[-1]]],[],18],[[[84,[-1,-2]]],[[45,[-1]]],[],18],[[[85,[-1,-2,-3]]],[[45,[[2,[-1,-2]]]]],35,[],[18,8]],[[[86,[-1,-2]]],[[45,[-1]]],35,[18,8]],[[[83,[-1,-2]],-1],2,35,18],[[[87,[-1,-2]],-1],2,[],18],[[[84,[-1,-2]],-1],2,[],18],[[[87,[-1,-2]],-1],2,[],18],[[[84,[-1,-2]],-1],2,[],18],[[[85,[-2,-3,-4]],-5],[[126,[-2,-3]]],[35,25],[[31,[-1]],35],[],[18,8],[[96,[-1]]]],[[[86,[-2,-3]],-4],[[127,[-2]]],[35,25],[[31,[-1]],35],[18,8],[[96,[-1]]]],[[[84,[-1,-2]],-3],[[116,[-1]]],[],18,[[96,[14]]]],[[[85,[-2,-3,-4]],-5],[[128,[-2,-3]]],[35,25],[[31,[-1]],35],[],[18,8],[[96,[-1]]]],[[[84,[-1,-2]],-3],[[117,[-1]]],[],18,[[96,[14]]]],[[[85,[-2,-3,-4]],-1],[[45,[-3]]],[35,25],[[31,[-1]],35],[],[18,8]],[[[86,[-2,-3]],-1],23,[35,25],[[31,[-1]],35],[18,8]],[[[87,[-1,-2]],14],-1,[],18],[[[84,[-1,-2]],14],[[45,[-1]]],[],18],[[[85,[-2,-3,-4]],-1],[[45,[[2,[-2,-3]]]]],[35,25],[[31,[-1]],35],[],[18,8]],[[[86,[-1,-2]],-1],[[45,[-1]]],35,[18,8]],[[[83,[-1,-2]],14],2,[],18],[[[84,[-1,-2]],14],2,[],18],[[[83,[-1,-2]],14],2,[],18],[[[84,[-1,-2]],14],2,[],18],[[[84,[-1,-2]],14,-1],2,8,18],[[[84,[-1,-2]],14,-3],2,[],18,[[51,[],[[88,[-1]]]]]],[[[83,[-1,-2]],-3],2,35,18,[[51,[-1],[[88,[23]]]]]],[[[85,[-1,-2,-3]],-4],2,35,[],[18,8],[[51,[-1,-2],[[88,[23]]]]]],[[[86,[-1,-2]],-3],2,35,[18,8],[[51,[-1],[[88,[23]]]]]],[[[84,[-1,-2]],-3],2,[],18,[[51,[-1],[[88,[23]]]]]],[[[84,[-1,-2]],-3],2,[],18,[[51,[-1],[[88,[23]]]]]],[[[84,[-1,-2]],14],2,[],18],[[[84,[-1,-2]],14],2,[],18],[[[83,[-1,-2]],14],2,[],18],[[[84,[-1,-2]],14],2,[],18],[[[83,[-1,-2]]],2,[],18],[[[84,[-1,-2]]],2,[],18],[[[85,[-2,-3,-4]],-1],[[85,[-2,-3,-4]]],[35,25],[[31,[-1]],35],[],[8,18,8]],[[[86,[-2,-3]],-1],[[86,[-2,-3]]],[35,25],[[31,[-1]],35],[8,18,8]],[[[87,[-1,-2]],14],[[87,[-1,-2]]],[],[8,18]],[[[84,[-1,-2]],14],[[84,[-1,-2]]],[],[8,18]],[[[86,[-1,-2]],[86,[-1,-2]]],[[86,[-1,-2]]],[35,8],[18,8]],[[[84,[-1,-2]],14,14],2,[],18],[[[84,[-1,-2]],14],[[45,[-1]]],[],18],[[[84,[-1,-2]],14],[[45,[-1]]],[],18],[[[86,[-1,-2]],[86,[-1,-2]]],[[129,[-1]]],35,[18,8]],[[[86,[-2,-3]],-1],[[45,[-2]]],[35,25],[[31,[-1]],35],[18,8]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[[[84,[-1,-2]],14],2,[],18],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[[[85,[-1,-2,-3]],-1,-2],[[9,[-2,[130,[-1,-2,-3]]]]],35,[],[18,8]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[[[83,[-1,-2]],14],[[9,[2,89]]],[],18],[[[84,[-1,-2]],14],[[9,[2,89]]],[],18],[[[83,[-1,-2]],14],[[9,[2,89]]],[],18],[[[84,[-1,-2]],14],[[9,[2,89]]],[],18],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[[[86,[-1,-2]],[86,[-1,-2]]],[[131,[-1]]],35,[18,8]],[[[85,[-2,-3,-4]],[122,[-1]]],[[123,[-2,-3]]],35,[[31,[-1]],35],[],[18,8]],[[[85,[-2,-3,-4]],[122,[-1]]],[[124,[-2,-3,-4]]],35,[[31,[-1]],35],[],[18,8]],[[[85,[-1,-2,-3]]],[[132,[-1,-2]]],[],[],[18,8]],[[[85,[-1,-2,-3]]],[[133,[-1,-2]]],[],[],[18,8]],0,[14,[[83,[-1]]],35],[14,[[84,[-1]]],[]],[[14,-1],[[83,[-2,-1]]],18,35],[[14,-1],[[84,[-2,-1]]],18,[]],0,0,0,0,0,0,0,0,[[[106,[-1,-2]]],-2,[],18],[[[118,[-1,-2]]],-2,[],18],[[[94,[-1,-2]]],-2,[],18],[[[97,[-1,-2]]],-2,35,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[105,[-1]]],[[105,[-1]]],[]],[[[106,[-1,-2]]],[[106,[-1,-2]]],8,[8,18]],[[[118,[-1,-2]]],[[118,[-1,-2]]],8,[8,18]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],[[106,[-1]]],[]],[[[125,[-1,-2]]],-1,35,18],[[[125,[-1,-2]]],-1,35,18],[[[125,[-1,-2]]],2,35,18],[[[97,[-1,-2]]],2,35,18],[[[125,[-1,-2]],3],[[9,[2,24]]],[35,38],18],[[[105,[-1]],3],[[9,[2,24]]],38],[[[106,[-1,-2]],3],[[9,[2,24]]],38,18],[[[118,[-1,-2]],3],[[9,[2,24]]],38,[38,18]],[[[94,[-1,-2]],3],[[9,[2,24]]],38,[38,18]],[[[97,[-1,-2]],3],[[9,[2,24]]],[38,35],[38,18]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[105,[-1]]],23,[]],[[[106,[-1,-2]]],23,[],18],[[[94,[-1,-2]]],23,[],18],[[[105,[-1]]],[[45,[-1]]],[]],[[[105,[-1]]],[[45,[-1]]],[]],[[[106,[-1,-2]]],[[45,[-1]]],[],18],[[[118,[-1,-2]]],[[45,[-1]]],35,18],[[[94,[-1,-2]]],[[45,[-1]]],[],18],[[[97,[-1,-2]]],[[45,[-1]]],35,18],[[[105,[-1]]],[[45,[-1]]],[]],[[[106,[-1,-2]]],[[45,[-1]]],[],18],[[[94,[-1,-2]]],[[45,[-1]]],[],18],[[[125,[-1,-2]]],-1,35,18],[[[105,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[106,[-1,-2]]],[[2,[14,[45,[14]]]]],[],18],[[[118,[-1,-2]]],[[2,[14,[45,[14]]]]],35,18],[[[94,[-1,-2]]],[[2,[14,[45,[14]]]]],[],18],[[[97,[-1,-2]]],[[2,[14,[45,[14]]]]],35,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[98,[-1,-2,-3]],-4],[[98,[-1,-2,-3]]],35,[],[18,8],[[52,[-2]]]],[[[124,[-1,-2,-3]]],[[123,[-1,-2]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[108,[-1,-2]]],[[108,[-1,-2]]],[],[]],[[[121,[-1,-2]]],[[121,[-1,-2]]],[],[]],[[[132,[-1,-2]]],[[132,[-1,-2]]],[],[]],[[[126,[-1,-2]]],[[126,[-1,-2]]],[],[]],[[[123,[-1,-2]]],[[123,[-1,-2]]],[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],[[108,[-1,-2]]],[],[]],[[],[[109,[-1,-2]]],[],[]],[[],[[107,[-1,-2,-3]]],[],[],[18,54,8]],[[],[[121,[-1,-2]]],[],[]],[[],[[132,[-1,-2]]],[],[]],[[],[[119,[-1,-2,-3]]],[],[],[18,54,8]],[[],[[120,[-1,-2,-3]]],[],[],[18,54,8]],[[],[[126,[-1,-2]]],[],[]],[[[130,[-1,-2]]],6,[38,35],38],[[[107,[-1,-2,-3]]],2,[],[],[18,8]],0,[[[98,[-1,-2,-3]],3],[[9,[2,24]]],[38,35],38,[18,8]],[[[134,[-1,-2,-3]],3],[[9,[2,24]]],[38,35],[],[18,8]],[[[103,[-1,-2,-3]],3],[[9,[2,24]]],[38,35],38,[18,8]],[[[130,[-1,-2,-3]],3],[[9,[2,24]]],[38,35],38,[18,8]],[[[130,[-1,-2,-3]],3],[[9,[2,24]]],[38,35],38,[18,8]],[[[108,[-1,-2]],3],[[9,[2,24]]],38,38],[[[109,[-1,-2]],3],[[9,[2,24]]],38,38],[[[107,[-1,-2,-3]],3],[[9,[2,24]]],38,38,[18,8]],[[[121,[-1,-2]],3],[[9,[2,24]]],38,[]],[[[132,[-1,-2]],3],[[9,[2,24]]],[],38],[[[133,[-1,-2]],3],[[9,[2,24]]],[],38],[[[119,[-1,-2,-3]],3],[[9,[2,24]]],38,[],[18,8]],[[[120,[-1,-2,-3]],3],[[9,[2,24]]],[],38,[18,8]],[[[126,[-1,-2]],3],[[9,[2,24]]],38,38],[[[128,[-1,-2]],3],[[9,[2,24]]],38,38],[[[100,[-1,-2,-3]],3],[[9,[2,24]]],38,38,[[51,[-1,-2],[[88,[23]]]]]],[[[123,[-1,-2]],3],[[9,[2,24]]],38,38],[[[124,[-1,-2,-3]],3],[[9,[2,24]]],38,38,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[103,[-1,-2,-3]]],-2,35,[],[18,8]],[[[103,[-1,-2,-3]]],-2,35,[],[18,8]],[[[134,[-1,-2,-3]],-2],-2,35,[],[18,8]],[[[103,[-1,-2,-3]],-2],-2,35,[],[18,8]],[[[124,[-1,-2,-3]],-1,-2],2,35,[],[18,8]],[[[124,[-1,-2,-3]],-1,-2],2,35,[],[18,8]],[[[124,[-1,-2,-3]],-1,-2],2,35,[],[18,8]],[[[124,[-1,-2,-3]],-1,-2],2,35,[],[18,8]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[134,[-1,-2,-3]]],-1,35,[],[18,8]],[[[103,[-1,-2,-3]]],-2,35,[],[18,8]],[[[98,[-1,-2,-3]]],-1,35,[],[18,8]],[[[134,[-1,-2,-3]]],-1,35,[],[18,8]],[[[103,[-1,-2,-3]]],-1,35,[],[18,8]],[[[123,[-1,-2]]],[[45,[-1]]],[],[]],[[[124,[-1,-2,-3]]],[[45,[-1]]],[],[],[]],[[[124,[-1,-2,-3]]],[[45,[-1]]],[],[],[]],[[[123,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[124,[-1,-2,-3]]],[[45,[[2,[-1,-2]]]]],[],[],[]],[[[124,[-1,-2,-3]]],[[45,[[2,[-1,-2]]]]],[],[],[]],[[[108,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[109,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[121,[-1,-2]]],[[45,[-1]]],[],[]],[[[132,[-1,-2]]],[[45,[-2]]],[],[]],[[[133,[-1,-2]]],[[45,[-2]]],[],[]],[[[119,[-1,-2,-3]]],[[45,[-1]]],[],[],[18,8]],[[[120,[-1,-2,-3]]],[[45,[-2]]],[],[],[18,8]],[[[126,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[128,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[108,[-1,-2]]],14,[],[]],[[[109,[-1,-2]]],14,[],[]],[[[107,[-1,-2,-3]]],14,[],[],[18,8]],[[[121,[-1,-2]]],14,[],[]],[[[132,[-1,-2]]],14,[],[]],[[[133,[-1,-2]]],14,[],[]],[[[119,[-1,-2,-3]]],14,[],[],[18,8]],[[[120,[-1,-2,-3]]],14,[],[],[18,8]],[[[108,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[109,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[121,[-1,-2]]],[[45,[-1]]],[],[]],[[[119,[-1,-2,-3]]],[[45,[-1]]],35,[],[18,8]],[[[126,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[128,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[108,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[109,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[121,[-1,-2]]],[[45,[-1]]],[],[]],[[[119,[-1,-2,-3]]],[[45,[-1]]],35,[],[18,8]],[[[126,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[128,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[123,[-1,-2]]],2,[],[]],[[[124,[-1,-2,-3]]],2,[],[],[]],[[[123,[-1,-2]]],2,[],[]],[[[124,[-1,-2,-3]]],2,[],[],[]],[[[108,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[109,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[107,[-1,-2,-3]]],[[45,[[2,[-1,-2]]]]],[],[],[18,8]],[[[121,[-1,-2]]],[[45,[-1]]],[],[]],[[[132,[-1,-2]]],[[45,[-2]]],[],[]],[[[133,[-1,-2]]],[[45,[-2]]],[],[]],[[[119,[-1,-2,-3]]],[[45,[-1]]],[],[],[18,8]],[[[120,[-1,-2,-3]]],[[45,[-2]]],[],[],[18,8]],[[[126,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[128,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[100,[-1,-2,-3,-4]]],[[45,[[2,[-1,-2]]]]],[],[],[[51,[-1,-2],[[88,[23]]]]],[18,8]],[[[108,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[109,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[107,[-1,-2,-3]]],[[45,[[2,[-1,-2]]]]],[],[],[18,8]],[[[121,[-1,-2]]],[[45,[-1]]],[],[]],[[[132,[-1,-2]]],[[45,[-2]]],[],[]],[[[133,[-1,-2]]],[[45,[-2]]],[],[]],[[[119,[-1,-2,-3]]],[[45,[-1]]],[],[],[18,8]],[[[120,[-1,-2,-3]]],[[45,[-2]]],[],[],[18,8]],[[[126,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[128,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[98,[-1,-2,-3]]],-2,35,54,[18,8]],[[[98,[-1,-2,-3]],-2],-2,35,[],[18,8]],[[[98,[-1,-2,-3]],-4],-2,35,[],[18,8],[[52,[],[[88,[-2]]]]]],[[[98,[-1,-2,-3]],-4],-2,35,[],[18,8],[[52,[-1],[[88,[-2]]]]]],[[[123,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[124,[-1,-2,-3]]],[[45,[[2,[-1,-2]]]]],[],[],[]],[[[123,[-1,-2]]],[[45,[[2,[-1,-2]]]]],[],[]],[[[124,[-1,-2,-3]]],[[45,[[2,[-1,-2]]]]],[],[],[]],[[[103,[-1,-2,-3]]],-2,35,[],[18,8]],[[[124,[-1,-2,-3]]],[[45,[[2,[-1,-2]]]]],35,[],[18,8]],[[[124,[-1,-2,-3]]],[[45,[[2,[-1,-2]]]]],35,[],[18,8]],[[[103,[-1,-2,-3]]],[[2,[-1,-2]]],35,[],[18,8]],[[[108,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[]],[[[109,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[]],[[[107,[-1,-2,-3]]],[[2,[14,[45,[14]]]]],[],[],[18,8]],[[[121,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[]],[[[132,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[]],[[[133,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[]],[[[119,[-1,-2,-3]]],[[2,[14,[45,[14]]]]],[],[],[18,8]],[[[120,[-1,-2,-3]]],[[2,[14,[45,[14]]]]],[],[],[18,8]],[[[100,[-1,-2,-3,-4]]],[[2,[14,[45,[14]]]]],[],[],[[51,[-1,-2],[[88,[23]]]]],[18,8]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[[[123,[-1,-2]]],[[45,[-2]]],[],[]],[[[124,[-1,-2,-3]]],[[45,[-2]]],[],[],[]],0,[[[124,[-1,-2,-3]]],[[45,[-2]]],[],[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[110,[-1]]],[[110,[-1]]],[]],[[[93,[-1,-2]]],[[93,[-1,-2]]],[],[18,8]],[[[129,[-1]]],[[129,[-1]]],[]],[[[104,[-1,-2]]],[[104,[-1,-2]]],[],[18,8]],[[[131,[-1]]],[[131,[-1]]],[]],[[[127,[-1]]],[[127,[-1]]],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],[[110,[-1]]],[]],[[],[[111,[-1,-2]]],[],[18,54,8]],[[],[[127,[-1]]],[]],[[[110,[-1]],3],[[9,[2,24]]],38],[[[93,[-1,-2]],3],[[9,[2,24]]],38,[18,8]],[[[129,[-1]],3],[[9,[2,24]]],38],[[[104,[-1,-2]],3],[[9,[2,24]]],38,[18,8]],[[[131,[-1]],3],[[9,[2,24]]],38],[[[101,[-1,-2,-3]],3],[[9,[2,24]]],38,[[51,[-1],[[88,[23]]]]],[18,8]],[[[111,[-1,-2]],3],[[9,[2,24]]],38,[38,18,8]],[[[127,[-1]],3],[[9,[2,24]]],38],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[110,[-1]]],[[45,[-1]]],[]],[[[127,[-1]]],[[45,[-1]]],[]],[[[110,[-1]]],14,[]],[[[111,[-1,-2]]],14,[],[18,8]],[[[110,[-1]]],[[45,[-1]]],[]],[[[127,[-1]]],[[45,[-1]]],[]],[[[110,[-1]]],[[45,[-1]]],[]],[[[93,[-1,-2]]],[[45,[-1]]],35,[18,8]],[[[129,[-1]]],[[45,[-1]]],35],[[[104,[-1,-2]]],[[45,[-1]]],35,[18,8]],[[[131,[-1]]],[[45,[-1]]],35],[[[127,[-1]]],[[45,[-1]]],[]],[[[110,[-1]]],[[45,[-1]]],[]],[[[93,[-1,-2]]],[[45,[-1]]],35,[18,8]],[[[129,[-1]]],[[45,[-1]]],35],[[[104,[-1,-2]]],[[45,[-1]]],35,[18,8]],[[[131,[-1]]],[[45,[-1]]],35],[[[101,[-1,-2,-3]]],[[45,[-1]]],[],[[51,[-1],[[88,[23]]]]],[18,8]],[[[111,[-1,-2]]],[[45,[-1]]],[],[18,8]],[[[127,[-1]]],[[45,[-1]]],[]],[[[110,[-1]]],[[45,[-1]]],[]],[[[111,[-1,-2]]],[[45,[-1]]],[],[18,8]],[[[127,[-1]]],[[45,[-1]]],[]],[[[110,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[93,[-1,-2]]],[[2,[14,[45,[14]]]]],35,[18,8]],[[[129,[-1]]],[[2,[14,[45,[14]]]]],35],[[[104,[-1,-2]]],[[2,[14,[45,[14]]]]],35,[18,8]],[[[131,[-1]]],[[2,[14,[45,[14]]]]],35],[[[101,[-1,-2,-3]]],[[2,[14,[45,[14]]]]],[],[[51,[-1],[[88,[23]]]]],[18,8]],[[[111,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[18,8]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,0,0,0,0,0,0,[[[92,[-1,-2]]],[[91,[-1,-2]]],[],18],[[[91,[-1,-2]]],[[45,[-1]]],[],18],[[[92,[-1,-2]]],[[45,[-1]]],[],18],[[[92,[-1,-2]]],[[45,[-1]]],[],18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[114,[-1]]],[[114,[-1]]],[]],[[[91,[-1,-2]]],[[91,[-1,-2]]],[],18],[[[113,[-1,-2]]],[[113,[-1,-2]]],8,[8,18]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[91,[-1,-2]]],[[45,[-1]]],[],18],[[[92,[-1,-2]]],[[45,[-1]]],[],18],[[],[[114,[-1]]],[]],[[],[[112,[-1]]],[]],[[],[[113,[-1]]],[]],[[[114,[-1]],3],[[9,[2,24]]],38],[[[112,[-1]],3],[[9,[2,24]]],38],[[[91,[-1,-2]],3],[[9,[2,24]]],38,18],[[[92,[-1,-2]],3],[[9,[2,24]]],38,18],[[[102,[-1,-2]],3],[[9,[2,24]]],38,[[51,[-1],[[88,[23]]]]]],[[[113,[-1,-2]],3],[[9,[2,24]]],38,18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[91,[-1,-2]]],[[45,[-1]]],[],18],[[[92,[-1,-2]]],[[45,[-1]]],[],18],[[[92,[-1,-2]]],[[45,[-1]]],[],18],[[[91,[-1,-2]]],[[45,[14]]],[],18],[[[92,[-1,-2]]],[[45,[14]]],[],18],[[[92,[-1,-2]],-1],2,[],18],[[[92,[-1,-2]],-1],2,[],18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[114,[-1]]],[[45,[-1]]],[]],[[[112,[-1]]],[[45,[-1]]],[]],[[[91,[-1,-2]]],2,[],18],[[[92,[-1,-2]]],2,[],18],[[[91,[-1,-2]]],2,[],18],[[[92,[-1,-2]]],2,[],18],[[[114,[-1]]],[[45,[-1]]],[]],[[[112,[-1]]],[[45,[-1]]],[]],[[[102,[-1,-2,-3]]],[[45,[-1]]],[],[[51,[-1],[[88,[23]]]]],18],[[[113,[-1,-2]]],[[45,[-1]]],[],18],[[[114,[-1]]],[[45,[-1]]],[]],[[[112,[-1]]],[[45,[-1]]],[]],[[[113,[-1,-2]]],[[45,[-1]]],[],18],[[[91,[-1,-2]]],[[45,[-1]]],[],18],[[[92,[-1,-2]]],[[45,[-1]]],[],18],[[[91,[-1,-2]]],[[45,[-1]]],[],18],[[[92,[-1,-2]]],[[45,[-1]]],[],18],[[[92,[-1,-2]]],[[45,[-1]]],[],18],[[[92,[-1,-2]]],[[45,[-1]]],[],18],[[[92,[-1,-2]],-1],2,[],18],[[[92,[-1,-2]],-1],2,[],18],[[[92,[-1,-2]]],[[45,[-1]]],[],18],[[[92,[-1,-2]]],[[45,[[87,[-1,-2]]]]],[],[8,18]],[[[114,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[112,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[102,[-1,-2,-3]]],[[2,[14,[45,[14]]]]],[],[[51,[-1],[[88,[23]]]]],18],[[[113,[-1,-2]]],[[2,[14,[45,[14]]]]],[],18],[[[92,[-1]],[87,[-1]]],2,[]],[[[92,[-1]],[87,[-1]]],2,[]],[[[92,[-1,-2]]],[[87,[-1,-2]]],[],[8,18]],[[[92,[-1,-2]]],[[87,[-1,-2]]],[],[8,18]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,0,0,0,0,[[[117,[-1]],14],[[9,[2,135]]],[]],[[[116,[-1]],14],[[9,[2,135]]],[]],[[[115,[-1,-2]],14],[[9,[2,135]]],[],18],[[[117,[-1]],14],[[9,[2,135]]],[]],[[[116,[-1]],14],[[9,[2,135]]],[]],[[[115,[-1,-2]],14],[[9,[2,135]]],[],18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[116,[-1]]],[[116,[-1]]],[]],[[[115,[-1,-2]]],[[115,[-1,-2]]],8,[8,18]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[115,[-1,-2]]],14,[],18],[[[95,[-1,-2]]],2,[],18],[[[95,[-1,-2]],3],[[9,[2,24]]],38,18],[[[117,[-1]],3],[[9,[2,24]]],38],[[[116,[-1]],3],[[9,[2,24]]],38],[[[115,[-1,-2]],3],[[9,[2,24]]],38,18],[[[117,[-1]],-2,-3],-2,[],[],[[51,[-2],[[88,[-2]]]]]],[[[116,[-1]],-2,-3],-2,[],[],[[51,[-2],[[88,[-2]]]]]],[[[115,[-1,-2]],-3,-4],-3,[],18,[],[[51,[-3],[[88,[-3]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[117,[-1]]],23,[]],[[[116,[-1]]],23,[]],[[[115,[-1,-2]]],23,[],18],[[[117,[-1]]],[[45,[-1]]],[]],[[[116,[-1]]],[[45,[-1]]],[]],[[[115,[-1,-2]]],45,[],18],[[[117,[-1]]],14,[]],[[[116,[-1]]],14,[]],[[[95,[-1,-2]]],[[45,[-1]]],[],18],[[[117,[-1]]],[[45,[-1]]],[]],[[[116,[-1]]],[[45,[-1]]],[]],[[[115,[-1,-2]]],[[45,[-1]]],[],18],[[[95,[-1,-2]]],[[45,[-1]]],[],18],[[[117,[-1]]],[[45,[-1]]],[]],[[[116,[-1]]],[[45,[-1]]],[]],[[[115,[-1,-2]]],[[45,[-1]]],[],18],[[[115,[-1,-2]]],[[9,[60,136]]],[],18],[[[117,[-1]],-2,-3],-2,[],[],[[51,[-2],[[88,[-2]]]]]],[[[116,[-1]],-2,-3],-2,[],[],[[51,[-2],[[88,[-2]]]]]],[[[115,[-1,-2]],-3,-4],-3,[],18,[],[[51,[-3],[[88,[-3]]]]]],[[[95,[-1,-2]]],[[2,[14,[45,[14]]]]],[],18],[[[117,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[116,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[115,[-1,-2]]],[[2,[14,[45,[14]]]]],[],18],[-1,-2,[],[]],[-1,-2,[],[]],[[[117,[-1]],-2,-4],-3,[],[],[[137,[],[[88,[-2]]]]],[[51,[-2],[[88,[-3]]]]]],[[[116,[-1]],-2,-4],-3,[],[],[[137,[],[[88,[-2]]]]],[[51,[-2],[[88,[-3]]]]]],[[[115,[-1,-2]],-3,-5],-4,[],18,[],[[137,[],[[88,[-3]]]]],[[51,[-3],[[88,[-4]]]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[[[117,[-1]],-2,-4],-3,[],[],[[137,[],[[88,[-2]]]]],[[51,[-2],[[88,[-3]]]]]],[[[116,[-1]],-2,-4],-3,[],[],[[137,[],[[88,[-2]]]]],[[51,[-2],[[88,[-3]]]]]],[[[115,[-1,-2]],-3,-5],-4,[],18,[],[[137,[],[[88,[-3]]]]],[[51,[-3],[[88,[-4]]]]]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,0,0,0,[40,[[19,[13]]]],[138,[[19,[13]]]],[40,[[19,[13]]]],[40,41],[40,41],[40,41],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,40],[139,139],[138,138],[140,140],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[40,40],34],[[],40],[40,41],[139,6],[140,6],[40,2],[[40,40],23],[[139,139],23],[[138,138],23],[[140,140],23],[[40,3],[[9,[2,24]]]],[[139,3],[[9,[2,24]]]],[[139,3],[[9,[2,24]]]],[[138,3],[[9,[2,24]]]],[[138,3],[[9,[2,24]]]],[[140,3],[[9,[2,24]]]],[[140,3],[[9,[2,24]]]],[[[37,[141]]],40],[-1,-1,[]],[[[47,[41]]],40],[[[29,[41]]],40],[41,40],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[78,40],[[[37,[13]]],40],[[[37,[13]]],[[9,[40,138]]]],[[[37,[13]]],40],[[40,-1],2,27],[[40,142],41],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,[[47,[41]]]],[40,[[37,[13]]]],[138,[[37,[13]]]],[40,[[37,[13]]]],[140,40],[40,78],[40,[[9,[28,140]]]],[139,[[37,[13]]]],[-1,[[9,[40,139]]],[[143,[[37,[13]]]]]],[139,14],[[40,40],[[45,[34]]]],[140,[[45,[53]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[140,144],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,[[45,[145]]]],[3,23],[146,[[45,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[145,145],[24,24],[146,146],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[24,24],34],[3,147],[3,148],[3,149],[[3,6],150],[[3,6],151],[[],24],[24,6],[[149,-2],149,38,[[42,[],[[5,[-1]]]]]],[[147,-2],147,38,[[42,[],[[5,[-1]]]]]],[[148,-3],148,38,38,[[42,[],[[5,[[2,[-1,-2]]]]]]]],[[149,38],149],[[147,38],147],[[148,38,38],148],[[149,-1],149,[[52,[3],[[88,[[9,[2,24]]]]]]]],[[147,-1],147,[[52,[3],[[88,[[9,[2,24]]]]]]]],[[145,145],23],[[24,24],23],[[150,6,38],150],[[151,38],151],[[150,6,-1],150,[[52,[3],[[88,[[9,[2,24]]]]]]]],[[151,-1],151,[[52,[3],[[88,[[9,[2,24]]]]]]]],[3,43],[150,[[9,[2,24]]]],[151,[[9,[2,24]]]],[149,[[9,[2,24]]]],[147,[[9,[2,24]]]],[148,[[9,[2,24]]]],[150,[[9,[2,24]]]],[3,82],[[38,3],[[9,[2,24]]]],[[39,3],[[9,[2,24]]]],[[152,3],[[9,[2,24]]]],[[153,3],[[9,[2,24]]]],[[154,3],[[9,[2,24]]]],[[155,3],[[9,[2,24]]]],[[156,3],[[9,[2,24]]]],[[157,3],[[9,[2,24]]]],[[158,3],[[9,[2,24]]]],[[[159,[-1]],3],[[9,[2,24]]],[[50,[3],[[88,[[9,[2,24]]]]]]]],[[[159,[-1]],3],[[9,[2,24]]],[[50,[3],[[88,[[9,[2,24]]]]]]]],[[145,3],[[9,[2,24]]]],[[24,3],[[9,[2,24]]]],[[24,3],[[9,[2,24]]]],[[146,3],[[9,[2,24]]]],[[146,3],[[9,[2,24]]]],[146,28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[24,-1],2,27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[148,38],148],[[148,-1],148,[[52,[3],[[88,[[9,[2,24]]]]]]]],[[3,6],[[9,[2,24]]]],[[3,23,6,6],[[9,[2,24]]]],[[24,24],[[45,[34]]]],[3,[[45,[14]]]],[3,23],[3,23],[3,23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[[148,38],148],[[148,-1],148,[[52,[3],[[88,[[9,[2,24]]]]]]]],[3,[[45,[14]]]],[[160,146],[[9,[2,24]]]],[[160,43],[[9,[2,24]]]],[[3,43],[[9,[2,24]]]],[[160,146],[[9,[2,24]]]],[[3,146],[[9,[2,24]]]],[[3,146],[[9,[2,24]]]],[[160,6],[[9,[2,24]]]],[[3,6],[[9,[2,24]]]],[[3,6],[[9,[2,24]]]],0,0,0,[[[161,[-1,-2]]],-2,[],18],[[[161,[-1,-2]]],[],25,18],[[[162,[-1,-2]]],[],25,18],[[[161,[-1,-2]]],-1,25,18],[[[161,[[19,[[48,[-1]]]],-2]]],[[161,[[19,[-1]],-2]]],[],[8,18]],[[[161,[[48,[-1]],-2]]],[[161,[-1,-2]]],[],[8,18]],[[[161,[-1,-2]]],-1,25,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[161,[-1,-2]]],[[161,[-1,-2]]],25,[18,8]],[[[162,[-1,-2]]],[[162,[-1,-2]]],25,[18,8]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[161,[-1,-2]],[161,[-1,-2]]],34,[35,25],18],[[],2],[-1,2,18],[[],[[161,[-1]]],54],[[],[[162,[-1]]],[]],[[[161,[-1,-2]]],-1,25,18],[[[163,[-1]]],-1,[]],[[[163,[-1]]],-1,[]],[[[161,[56,-1]]],[[9,[[161,[-2,-1]],[161,[56,-1]]]]],[18,8],56],[[[161,[56,-1]]],[[161,[-2,-1]]],[18,8],56],[[[161,[-1,-2]]],[[162,[-1,-2]]],25,[8,18]],[[[163,[-1]]],[[162,[-1]]],[]],[[[161,[-1,-2]]],2,25,18],[[[162,[-1,-2]]],2,25,18],[[[163,[-1]]],2,[]],[[[161,[-1,-2]],[161,[-1,-2]]],23,[36,25],18],[[[161,[-1,-2]],3],[[9,[2,24]]],[39,25],18],[[[161,[-1,-2]],3],[[9,[2,24]]],[38,25],18],[[[161,[-1,-2]],3],[[9,[2,24]]],25,18],[[[162,[-1,-2]],3],[[9,[2,24]]],25,18],[[[163,[-1]],3],[[9,[2,24]]],38],[6,[[161,[6]]]],[26,-1,[]],[41,[[161,[41]]]],[[[47,[-1,-2]]],[[161,[-1,-2]]],25,18],[[[60,[-1]]],[[161,[[19,[-1]]]]],[]],[-1,-1,[]],[-1,[[161,[-1]]],[]],[[[29,[-1]]],[[161,[-1]]],[30,25]],[[[161,[6]]],[[161,[[19,[13]]]]]],[28,[[161,[6]]]],[[[19,[-1]]],[[161,[[19,[-1]]]]],8],[[[37,[-1,-2]]],[[161,[[19,[-1]],-2]]],[],18],[40,[[161,[41]]]],[-1,-1,[]],[-1,-1,[]],[-2,[[161,[[19,[-1]]]]],[],[[42,[],[[5,[-1]]]]]],[[],[[161,[-1]]],25],[[],[[162,[-1]]],25],[-1,[[161,[-2,-1]]],18,25],[-1,[[162,[-2,-1]]],18,25],[[[161,[-1,-2]],[161,[-1,-2]]],23,[46,25],18],[[[161,[-1,-2]]],[[45,[-1]]],25,18],[[[161,[-1,-2]]],-1,25,18],[[[161,[-1,-2]],[161,[-1,-2]]],23,[46,25],18],[[[161,[-1,-2]],-3],2,[44,25],18,27],[[],2],[-1,2,[8,18]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[161,[-1,-2]]],[[45,[-1]]],[],18],[[[161,[-1,-2]]],[],25,18],[[[162,[-1,-2]]],[],25,18],[[[162,[-1,-2]]],[[2,[-2]]],25,[8,18]],[[[163,[-1]]],[[161,[-1]]],[]],[[[161,[-1,-2]],[161,[-1,-2]]],23,[46,25],18],[[[161,[-1,-2]],[161,[-1,-2]]],23,[46,25],18],[[[161,[-1,-2]]],-1,8,[18,8]],[[[161,[-1,-2]],[161,[-1,-2]]],23,[36,25],18],[-1,[[161,[-1]]],[]],[[],[[162,[-1]]],[]],[-1,[[163,[-1]]],[]],[-2,[[161,[-1]]],[],[[52,[[162,[-1]]],[[88,[-1]]]]]],[[-1,-2],[[161,[-1,-2]]],[],18],[-1,[[162,[-2,-1]]],18,[]],[[],[[161,[[48,[-1]]]]],[]],[-1,[[161,[[48,[-2]],-1]]],18,[]],[14,[[161,[[19,[[48,[-1]]]]]]],[]],[[14,-1],[[161,[[19,[[48,[-2]]]],-1]]],18,[]],[[],[[161,[[48,[-1]]]]],[]],[-1,[[161,[[48,[-2]],-1]]],18,[]],[14,[[161,[[19,[[48,[-1]]]]]]],[]],[[14,-1],[[161,[[19,[[48,[-2]]]],-1]]],18,[]],[[[161,[-1,-2]],[161,[-1,-2]]],[[45,[34]]],[46,25],18],[-1,[[61,[[161,[-1]]]]],[]],[[-1,-2],[[61,[[161,[-1,-2]]]]],[],18],[[[161,[-1,-2]],[161,[-1,-2]]],23,25,18],[[[162,[-1,-2]],[162,[-1,-2]]],23,25,18],[[[161,[-1,-2]]],14,25,18],[[[162,[-1,-2]]],14,25,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,[[9,[-2]]],[],[]],[[[161,[[19,[-1]]]]],[[9,[[161,[[60,[-1]]]]]]],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[[161,[-1]],21]]],[]],[[-1,-2],[[9,[[161,[-1,-2]],21]]],[],18],[[],[[9,[[161,[[48,[-1]]]],21]]],[]],[-1,[[9,[[161,[[48,[-2]],-1]],21]]],18,[]],[[],[[9,[[161,[[48,[-1]]]],21]]],[]],[-1,[[9,[[161,[[48,[-2]],-1]],21]]],18,[]],[[[161,[-1,-2]]],[[9,[-1,[161,[-1,-2]]]]],[],18],[-1,10,[]],[-1,10,[]],[-1,10,[]],[[[161,[-1,-2]]],-1,8,[18,8]],[[[162,[-1,-2]]],[[45,[[161,[-1,-2]]]]],25,[8,18]],[[[161,[-1,-2]]],14,25,18],[[[162,[-1,-2]]],14,25,18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[164,[-1]],14],[[9,[2,135]]],[]],[[[165,[-1]],14],[[9,[2,135]]],[]],[[[164,[-1]],14],[[9,[2,135]]],[]],[[[165,[-1]],14],[[9,[2,135]]],[]],[[[164,[-1]],-2],23,[],[[51,[],[[88,[23]]]]]],[[[165,[-1]],-2],23,[],[[51,[],[[88,[23]]]]]],[[[164,[-1]],-2],23,[],[[51,[],[[88,[23]]]]]],[[[165,[-1]],-2],23,[],[[51,[],[[88,[23]]]]]],[[[165,[-1]]],[[19,[-1]]],[]],[[[164,[-1]]],[[19,[-1]]],[]],[[[165,[-1]]],[[19,[-1]]],[]],[[[164,[-1]]],[[19,[-1]]],[]],[[[165,[-1]]],[[19,[-1]]],[]],[[[166,[-1,-2]]],[[19,[-1]]],[],[[51,[-1],[[88,[23]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[164,[-1]]],[[164,[-1]]],[]],[[[166,[-1,-2]]],[[166,[-1,-2]]],[],[8,[51,[-1],[[88,[23]]]]]],[[[167,[-1,-2]]],[[167,[-1,-2]]],[],[8,[51,[-1],[[88,[23]]]]]],[[[168,[-1,-2]]],[[168,[-1,-2]]],[],[8,[51,[-1],[[88,[23]]]]]],[169,169],[[[170,[-1]]],[[170,[-1]]],[]],[[[171,[-1]]],[[171,[-1]]],[]],[[[172,[-1]]],[[172,[-1]]],[]],[[[173,[-1]]],[[173,[-1]]],8],[[[174,[-1]]],[[174,[-1]]],[]],[[[175,[-1]]],[[175,[-1]]],[]],[[[176,[-1]]],[[176,[-1]]],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[177,[],[[88,[-1]]]]],-1,[]],[[[164,[-1]]],14,[]],[[[165,[-1]]],14,[]],[[[170,[-1]]],14,[]],[[[171,[-1]]],14,[]],[[[178,[-1]]],14,[]],[[[172,[-1]]],14,[]],[[[179,[-1]]],14,[]],[[[173,[-1]]],14,[]],[[[174,[-1]]],14,[]],[[[180,[-1]]],14,[]],[[[175,[-1]]],14,[]],[[[181,[-1]]],14,[]],[[[176,[-1]]],14,[]],[[[182,[-1]]],14,[]],[[],[[164,[-1]]],[]],[[],[[165,[-1]]],[]],[[[164,[-1]],-2],45,[],[[51,[],[[88,[23]]]]]],[[[165,[-1]],-2],45,[],[[51,[],[[88,[23]]]]]],[[[164,[-1]],-3],[[45,[-2]]],[],[],[[51,[],[[88,[[45,[-2]]]]]]]],[[[165,[-1]],-3],[[45,[-2]]],[],[],[[51,[],[[88,[[45,[-2]]]]]]]],[[[164,[-1]],3],[[9,[2,24]]],38],[[[165,[-1]],3],[[9,[2,24]]],38],[[[166,[-1,-2]],3],[[9,[2,24]]],38,[[51,[-1],[[88,[23]]]]]],[[[167,[-1,-2]],3],[[9,[2,24]]],38,[[51,[-1],[[88,[23]]]]]],[[[183,[-1,-2]],3],[[9,[2,24]]],38,[[51,[-1],[[88,[23]]]]]],[[[184,[-1,-2]],3],[[9,[2,24]]],38,[[51,[-1],[[88,[23]]]]]],[[[168,[-1,-2]],3],[[9,[2,24]]],38,[[51,[-1],[[88,[23]]]]]],[[[185,[-1,-2]],3],[[9,[2,24]]],38,[[51,[-1],[[88,[23]]]]]],[[[186,[-1,-2]],3],[[9,[2,24]]],38,[[51,[-1],[[88,[23]]]]]],[[[187,[-1,-2]],3],[[9,[2,24]]],38,[[51,[-1],[[88,[23]]]]]],[[[188,[-1,-2]],3],[[9,[2,24]]],38,[[51,[-1],[[88,[23]]]]]],[[[189,[-1,-2]],3],[[9,[2,24]]],38,[[51,[-1],[[88,[23]]]]]],[[[190,[-1,-2]],3],[[9,[2,24]]],38,[]],[[[191,[-1,-2]],3],[[9,[2,24]]],38,[]],[[169,3],[[9,[2,24]]]],[[169,3],[[9,[2,24]]]],[[[170,[-1]],3],[[9,[2,24]]],38],[[[171,[-1]],3],[[9,[2,24]]],38],[[[178,[-1]],3],[[9,[2,24]]],38],[[[172,[-1]],3],[[9,[2,24]]],38],[[[179,[-1]],3],[[9,[2,24]]],38],[[[173,[-1]],3],[[9,[2,24]]],38],[[[174,[-1]],3],[[9,[2,24]]],38],[[[180,[-1]],3],[[9,[2,24]]],38],[[[175,[-1]],3],[[9,[2,24]]],38],[[[181,[-1]],3],[[9,[2,24]]],38],[[[176,[-1]],3],[[9,[2,24]]],38],[[[182,[-1]],3],[[9,[2,24]]],38],[[[164,[-1]],-2,-3],-2,[],[],[[51,[-2],[[88,[-2]]]]]],[[[165,[-1]],-2,-3],-2,[],[],[[51,[-2],[[88,[-2]]]]]],[[169,-1,-2],-1,[],[[51,[-1],[[88,[-1]]]]]],[[[164,[-1]],-2],2,[],51],[[[165,[-1]],-2],2,[],51],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[19,[-1]]],[]],[192,[[19,[-1]]],[]],[192,[[19,[-1]]],[]],[14,[[19,[-1]]],[]],[14,[[19,[-1]]],[]],[-1,[[19,[-1]]],[]],[[[193,[],[[88,[-1]]]],-2],[[45,[-1]]],25,25],[[[193,[],[[88,[-1]]]],-2],[[45,[-1]]],25,25],[[[193,[],[[88,[-1]]]]],-1,25],[[[193,[],[[88,[-1]]]]],-1,25],[[[193,[],[[88,[-1]]]],-2],-1,25,25],[[[193,[],[[88,[-1]]]],-2],-1,25,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[179,[-1]]],[[19,[-1]]],[]],[[[180,[-1]]],[[19,[-1]]],[]],[[[182,[-1]]],[[19,[-1]]],[]],[[[165,[-1]]],[[19,[-1]]],[]],[[[164,[-1]]],23,[]],[[[165,[-1]]],23,[]],[[[172,[-1]]],23,[]],[[[179,[-1]]],23,[]],[[[173,[-1]]],23,[]],[[[174,[-1]]],23,[]],[[[180,[-1]]],23,[]],[[[176,[-1]]],23,[]],[[[182,[-1]]],23,[]],[[[164,[-1]],-2],23,[],[[51,[],[[88,[[45,[34]]]]]]]],[[[194,[],[[88,[-1]]]],-2],-1,[],[]],[[[164,[-1]]],[[45,[-1]]],[]],[[[165,[-1]]],[[45,[-1]]],[]],[[[190,[-1,-2]]],45,[],[[51,[-1,-1],[[88,[23]]]]]],[[[191,[-1,-2]]],45,[],[[51,[-1,-1],[[88,[23]]]]]],[169,[[45,[13]]]],[[[170,[-1]]],45,[]],[[[171,[-1]]],45,[]],[[[178,[-1]]],45,[]],[[[172,[-1]]],45,[]],[[[179,[-1]]],45,[]],[[[173,[-1]]],45,[]],[[[174,[-1]]],45,[]],[[[180,[-1]]],45,[]],[[[175,[-1]]],45,[]],[[[181,[-1]]],45,[]],[[[176,[-1]]],45,[]],[[[182,[-1]]],45,[]],[[[164,[-1]]],14,[]],[[[165,[-1]]],14,[]],[[[164,[-1]]],[[45,[-1]]],[]],[[[165,[-1]]],[[45,[-1]]],[]],[[[166,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[167,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[183,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[184,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[168,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[185,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[186,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[187,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[188,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[189,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[190,[-1,-2]]],45,[],[[51,[-1,-1],[[88,[23]]]]]],[[[191,[-1,-2]]],45,[],[[51,[-1,-1],[[88,[23]]]]]],[169,[[45,[13]]]],[[[170,[-1]]],[[45,[[19,[-1]]]]],[]],[[[171,[-1]]],[[45,[[19,[-1]]]]],[]],[[[178,[-1]]],[[45,[[19,[-1]]]]],[]],[[[172,[-1]]],[[45,[[19,[-1]]]]],[]],[[[179,[-1]]],[[45,[[19,[-1]]]]],[]],[[[173,[-1]]],45,[]],[[[174,[-1]]],[[45,[[60,[-1]]]]],[]],[[[180,[-1]]],[[45,[[60,[-1]]]]],[]],[[[175,[-1]]],[[45,[[19,[-1]]]]],[]],[[[181,[-1]]],[[45,[[19,[-1]]]]],[]],[[[176,[-1]]],[[45,[[19,[-1]]]]],[]],[[[182,[-1]]],[[45,[[19,[-1]]]]],[]],[[[164,[-1]]],[[45,[-1]]],[]],[[[165,[-1]]],[[45,[-1]]],[]],[[[166,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[167,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[183,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[184,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[168,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[185,[-1,-2]]],[[45,[[19,[-1]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[190,[-1,-2]]],45,[],[[51,[-1,-1],[[88,[23]]]]]],[[[191,[-1,-2]]],45,[],[[51,[-1,-1],[[88,[23]]]]]],[169,[[45,[13]]]],[[[170,[-1]]],[[45,[[19,[-1]]]]],[]],[[[171,[-1]]],[[45,[[19,[-1]]]]],[]],[[[178,[-1]]],[[45,[[19,[-1]]]]],[]],[[[172,[-1]]],[[45,[[19,[-1]]]]],[]],[[[179,[-1]]],[[45,[[19,[-1]]]]],[]],[[[173,[-1]]],[[45,[[60,[-1]]]]],[]],[[[174,[-1]]],[[45,[[60,[-1]]]]],[]],[[[180,[-1]]],[[45,[[60,[-1]]]]],[]],[[[175,[-1]]],[[45,[[19,[-1]]]]],[]],[[[181,[-1]]],[[45,[[19,[-1]]]]],[]],[[[176,[-1]]],[[45,[[19,[-1]]]]],[]],[[[182,[-1]]],[[45,[[19,[-1]]]]],[]],[[[164,[-1]],14],[[45,[-1]]],[]],[[[165,[-1]],14],[[45,[-1]]],[]],[[[170,[-1]],14],45,[]],[[[171,[-1]],14],45,[]],[[[178,[-1]],14],[[45,[[19,[-1]]]]],[]],[[[172,[-1]],14],45,[]],[[[179,[-1]],14],[[45,[[19,[-1]]]]],[]],[[[173,[-1]],14],45,[]],[[[174,[-1]],14],45,[]],[[[180,[-1]],14],45,[]],[[[175,[-1]],14],45,[]],[[[181,[-1]],14],[[45,[[19,[-1]]]]],[]],[[[176,[-1]],14],45,[]],[[[182,[-1]],14],[[45,[[19,[-1]]]]],[]],[[[164,[-1]],14],[[45,[-1]]],[]],[[[165,[-1]],14],[[45,[-1]]],[]],[[[170,[-1]],14],45,[]],[[[171,[-1]],14],45,[]],[[[178,[-1]],14],45,[]],[[[172,[-1]],14],45,[]],[[[179,[-1]],14],45,[]],[[[173,[-1]],14],[[45,[[60,[-1]]]]],[]],[[[174,[-1]],14],45,[]],[[[180,[-1]],14],45,[]],[[[175,[-1]],14],45,[]],[[[181,[-1]],14],45,[]],[[[176,[-1]],14],45,[]],[[[182,[-1]],14],45,[]],[[[164,[-1]],-2],[[45,[14]]],[],[[51,[],[[88,[23]]]]]],[[[165,[-1]],-2],[[45,[14]]],[],[[51,[],[[88,[23]]]]]],[[-1,[195,[14]]],[[192,[14]]],[[96,[14]]]],[[[172,[-1]]],[[19,[-1]]],[]],[[[174,[-1]]],[[19,[-1]]],[]],[[[176,[-1]]],[[19,[-1]]],[]],[[[164,[-1]],-2],[[45,[14]]],[],[[51,[],[[88,[23]]]]]],[[[165,[-1]],-2],[[45,[14]]],[],[[51,[],[[88,[23]]]]]],[[[164,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[165,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[166,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[167,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[183,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[184,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[168,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[185,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[186,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[187,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[188,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[189,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[[51,[-1],[[88,[23]]]]]],[[[190,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[[51,[-1,-1],[[88,[23]]]]]],[[[191,[-1,-2]]],[[2,[14,[45,[14]]]]],[],[[51,[-1,-1],[[88,[23]]]]]],[169,[[2,[14,[45,[14]]]]]],[[[170,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[171,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[178,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[172,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[179,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[173,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[174,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[180,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[175,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[181,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[176,[-1]]],[[2,[14,[45,[14]]]]],[]],[[[182,[-1]]],[[2,[14,[45,[14]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[[169,-1,-3],-2,[],[[137,[],[[88,[-1]]]]],[[51,[-1],[[88,[-2]]]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[196,14],[[9,[2,135]]]],[[197,-1],23,[[51,[],[[88,[23]]]]]],[[197,-1],23,[[51,[],[[88,[23]]]]]],[196,6],[198,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[199,[-1]]],[[199,[-1]]],200],[144,144],[201,201],[196,196],[198,198],[197,197],[[[202,[-1]]],[[202,[-1]]],200],[[[203,[-1]]],[[203,[-1]]],200],[[[204,[-1]]],[[204,[-1]]],200],[[[205,[-1]]],[[205,[-1]]],200],[[[206,[-1]]],[[206,[-1]]],200],[[[207,[-1]]],[[207,[-1]]],200],[[[208,[-1]]],[[208,[-1]]],200],[[[209,[-1]]],[[209,[-1]]],200],[[[210,[-1]]],[[210,[-1]]],200],[[[211,[-1]]],[[211,[-1]]],200],[212,212],[213,213],[214,214],[215,215],[216,216],[217,217],[218,218],[219,219],[220,220],[221,221],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[196,14],[198,14],[197,14],[144,6],[201,6],[[144,144],23],[[201,201],23],[[220,220],23],[144,[[45,[14]]]],[[197,-1],45,[[51,[],[[88,[23]]]]]],[[[199,[-1]],3],[[9,[2,24]]],200],[[144,3],[[9,[2,24]]]],[[144,3],[[9,[2,24]]]],[[201,3],[[9,[2,24]]]],[[201,3],[[9,[2,24]]]],[[196,3],[[9,[2,24]]]],[[198,3],[[9,[2,24]]]],[[197,3],[[9,[2,24]]]],[[[202,[-1]],3],[[9,[2,24]]],200],[[[203,[-1]],3],[[9,[2,24]]],200],[[[204,[-1]],3],[[9,[2,24]]],200],[[[205,[-1]],3],[[9,[2,24]]],200],[[[206,[-1]],3],[[9,[2,24]]],200],[[[207,[-1]],3],[[9,[2,24]]],200],[[[208,[-1]],3],[[9,[2,24]]],200],[[[209,[-1]],3],[[9,[2,24]]],200],[[[210,[-1]],3],[[9,[2,24]]],200],[[[211,[-1]],3],[[9,[2,24]]],200],[[212,3],[[9,[2,24]]]],[[213,3],[[9,[2,24]]]],[[214,3],[[9,[2,24]]]],[[215,3],[[9,[2,24]]]],[[216,3],[[9,[2,24]]]],[[217,3],[[9,[2,24]]]],[[217,3],[[9,[2,24]]]],[[218,3],[[9,[2,24]]]],[[218,3],[[9,[2,24]]]],[[219,3],[[9,[2,24]]]],[[219,3],[[9,[2,24]]]],[[220,3],[[9,[2,24]]]],[[221,3],[[9,[2,24]]]],[[217,-1,-2],-1,[],[[51,[-1],[[88,[-1]]]]]],[[218,-1,-2],-1,[],[[51,[-1],[[88,[-1]]]]]],[[219,-1,-2],-1,[],[[51,[-1],[[88,[-1]]]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[47,[[19,[13]]]]],[[47,[6]]]],[6,[[9,[[223,[],[[222,[-1]]]],-1]]],[]],[[[19,[13]]],[[9,[6,144]]]],[[[19,[13]]],[[9,[6,144]]]],[[[19,[13]]],6],[[[19,[13]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[220,[[19,[13]]]],[197,23],[196,[[45,[43]]]],[198,[[45,[[2,[14,43]]]]]],[197,45],[212,[[45,[6]]]],[214,[[45,[6]]]],[215,[[45,[6]]]],[197,14],[[[19,[13]]],221],[[[199,[-1]]],[[45,[6]]],200],[196,[[45,[43]]]],[198,[[45,[[2,[14,43]]]]]],[197,[[45,[13]]]],[[[202,[-1]]],[[45,[6]]],200],[[[203,[-1]]],[[45,[6]]],200],[[[204,[-1]]],[[45,[6]]],200],[[[205,[-1]]],[[45,[6]]],200],[[[206,[-1]]],[[45,[6]]],200],[[[207,[-1]]],[[45,[6]]],200],[[[208,[-1]]],[[45,[[2,[14,6]]]]],200],[[[209,[-1]]],[[45,[[2,[14,6]]]]],200],[[[210,[-1]]],[[45,[6]]],200],[[[211,[-1]]],[[45,[6]]],200],[212,[[45,[6]]]],[213,[[45,[6]]]],[214,[[45,[6]]]],[215,[[45,[6]]]],[216,[[45,[81]]]],[217,[[45,[43]]]],[218,[[45,[43]]]],[219,[[45,[43]]]],[221,[[45,[220]]]],[[[199,[-1]]],[[45,[6]]],200],[196,[[45,[43]]]],[198,[[45,[[2,[14,43]]]]]],[197,[[45,[13]]]],[[[202,[-1]]],[[45,[6]]],200],[[[203,[-1]]],[[45,[6]]],200],[[[204,[-1]]],[[45,[6]]],200],[[[205,[-1]]],[[45,[6]]],200],[[[208,[-1]]],[[45,[[2,[14,6]]]]],200],[[[209,[-1]]],[[45,[[2,[14,6]]]]],200],[[[210,[-1]]],[[45,[6]]],200],[[[211,[-1]]],[[45,[6]]],200],[212,[[45,[6]]]],[213,[[45,[6]]]],[214,[[45,[6]]]],[215,[[45,[6]]]],[[197,14],45],[[197,14],45],[198,14],0,[[197,-1],[[45,[14]]],[[51,[],[[88,[23]]]]]],[[[199,[-1]]],[[45,[6]]],200],[[[202,[-1]]],[[45,[6]]],200],[[[203,[-1]]],[[45,[6]]],200],[[[204,[-1]]],[[45,[6]]],200],[[[205,[-1]]],[[45,[6]]],200],[[[206,[-1]]],[[45,[6]]],200],[[[207,[-1]]],[[45,[6]]],200],[214,[[45,[6]]]],[215,[[45,[6]]]],[[197,-1],45,[[51,[],[[88,[23]]]]]],[[197,-1],[[45,[14]]],[[51,[],[[88,[23]]]]]],[196,[[2,[14,[45,[14]]]]]],[198,[[2,[14,[45,[14]]]]]],[197,[[2,[14,[45,[14]]]]]],[212,[[2,[14,[45,[14]]]]]],[213,[[2,[14,[45,[14]]]]]],[214,[[2,[14,[45,[14]]]]]],[215,[[2,[14,[45,[14]]]]]],[216,[[2,[14,[45,[14]]]]]],[217,[[2,[14,[45,[14]]]]]],[218,[[2,[14,[45,[14]]]]]],[219,[[2,[14,[45,[14]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[[217,-1,-3],-2,[],[[137,[],[[88,[-1]]]]],[[51,[-1],[[88,[-2]]]]]],[[218,-1,-3],-2,[],[[137,[],[[88,[-1]]]]],[[51,[-1],[[88,[-2]]]]]],[[219,-1,-3],-2,[],[[137,[],[[88,[-1]]]]],[[51,[-1],[[88,[-2]]]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[220,6],[144,14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[224,224],[225,225],[226,226],[227,227],[228,228],[[[62,[-1]]],[[62,[-1]]],[8,[51,[43],[[88,[23]]]]]],[229,229],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[224,224],23],[[224,3],[[9,[2,24]]]],[[225,3],[[9,[2,24]]]],[[226,3],[[9,[2,24]]]],[[227,3],[[9,[2,24]]]],[[228,3],[[9,[2,24]]]],[[[62,[-1]],3],[[9,[2,24]]],[[51,[43],[[88,[23]]]]]],[[229,3],[[9,[2,24]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[230,6],[225,6],[226,6],[227,6],[228,6],[[[62,[-1]]],6,[[51,[43],[[88,[23]]]]]],[229,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[200,[],[[231,[-1]]]],6],-1,230],[[[200,[],[[231,[-1]]]],6],23,230],[[[200,[],[[231,[-1]]]],6],23,230],[[[200,[],[[231,[-1]]]],6],23,230],[230,224],[225,224],[226,224],[227,224],[228,224],[[[62,[-1]]],224,[[51,[43],[[88,[23]]]]]],[229,224],[232,224],[225,224],[226,224],[227,224],[228,224],[[[62,[-1]]],224,[[51,[43],[[88,[23]]]]]],[229,224],[230,[[45,[[2,[14,14]]]]]],[225,[[45,[[2,[14,14]]]]]],[226,[[45,[[2,[14,14]]]]]],[227,[[45,[[2,[14,14]]]]]],[228,[[45,[[2,[14,14]]]]]],[[[62,[-1]]],[[45,[[2,[14,14]]]]],[[51,[43],[[88,[23]]]]]],[229,[[45,[[2,[14,14]]]]]],[232,[[45,[[2,[14,14]]]]]],[225,[[45,[[2,[14,14]]]]]],[226,[[45,[[2,[14,14]]]]]],[227,[[45,[[2,[14,14]]]]]],[228,[[45,[[2,[14,14]]]]]],[[[62,[-1]]],[[45,[[2,[14,14]]]]],[[51,[43],[[88,[23]]]]]],[229,[[45,[[2,[14,14]]]]]],[230,[[45,[[2,[14,14]]]]]],[226,[[45,[[2,[14,14]]]]]],[227,[[45,[[2,[14,14]]]]]],[228,[[45,[[2,[14,14]]]]]],[[[62,[-1]]],[[45,[[2,[14,14]]]]],[[51,[43],[[88,[23]]]]]],[232,[[45,[[2,[14,14]]]]]],[226,[[45,[[2,[14,14]]]]]],[227,[[45,[[2,[14,14]]]]]],[228,[[45,[[2,[14,14]]]]]],[[[62,[-1]]],[[45,[[2,[14,14]]]]],[[51,[43],[[88,[23]]]]]],[[[200,[],[[231,[-1]]]],6],[[45,[6]]],230],[[[200,[],[[231,[-1]]]],6],[[45,[6]]],230],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,0,0,0,0,0,[[28,6],28],[[28,6],2],[28,[[19,[13]]]],[233,[[19,[13]]]],[28,6],[28,6],[28,[[37,[13]]]],[234,6],[234,[[19,[13]]]],[28,[[19,[13]]]],[28,6],[234,6],[28,6],[-1,-2,[],[]],[28,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,14],[28,2],[28,28],[233,233],[[28,28],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[28,28],34],[[],28],[28,6],[28,6],[233,6],[235,6],[[28,-1],234,[[96,[14]]]],[234,2],[[28,[29,[6]]],23],[[28,28],23],[[28,6],23],[[28,6],23],[[233,233],23],[[28,-1],2,[[42,[],[[5,[43]]]]]],[[28,-1],2,[[42,[],[[5,[28]]]]]],[[28,-1],2,[[42,[],[[5,[6]]]]]],[[28,-1],2,[[42,[],[[5,[[47,[6]]]]]]]],[[28,-1],2,[[42,[],[[5,[[29,[6]]]]]]]],[[28,-1],2,[[42,[],[[5,[43]]]]]],[[28,-1],2,[[96,[14]]]],[[28,28],2],[[28,6],2],[[28,[29,[6]]],2],[[28,43],2],[[28,43],2],[[28,14],2],[[28,14],2],[[234,3],[[9,[2,24]]]],[[28,3],[[9,[2,24]]]],[[28,3],[[9,[2,24]]]],[[233,3],[[9,[2,24]]]],[[233,3],[[9,[2,24]]]],[[235,3],[[9,[2,24]]]],[[235,3],[[9,[2,24]]]],[-1,-1,[]],[43,28],[-1,-1,[]],[[[29,[6]]],28],[28,28],[[[47,[6]]],28],[6,28],[6,28],[-1,-1,[]],[-1,-1,[]],[-1,28,[[42,[],[[5,[43]]]]]],[-1,28,[[42,[],[[5,[[47,[6]]]]]]]],[-1,28,[[42,[],[[5,[6]]]]]],[-1,28,[[42,[],[[5,[43]]]]]],[-1,28,[[42,[],[[5,[[29,[6]]]]]]]],[-1,28,[[42,[],[[5,[28]]]]]],[[13,14,14],28],[6,[[9,[28]]]],[[[19,[81]]],[[9,[28,235]]]],[[[19,[81]]],28],[[[19,[13]]],[[9,[28,235]]]],[[[19,[13]]],28],[[[19,[13]]],[[9,[28,235]]]],[[[19,[13]]],28],[[[37,[13]]],[[9,[28,233]]]],[[[19,[13]]],[[29,[6]]]],[[[37,[13]]],28],[[28,-1],2,27],[[28,[195,[14]]],6],[[28,[236,[14]]],6],[[28,[237,[14]]],6],[[28,142],6],[[28,[192,[14]]],6],[[28,[238,[14]]],6],[[28,[195,[14]]],6],[[28,[192,[14]]],6],[[28,[237,[14]]],6],[[28,142],6],[[28,[236,[14]]],6],[[28,[238,[14]]],6],[[28,14,43],2],[[28,14,6],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[28,[[47,[6]]]],[28,[[37,[13]]]],[233,[[37,[13]]]],[-1,-2,[],[]],[28,[[2,[13,14,14]]]],[[28,6]],[[28,6],23],[28,23],[[28,6],23],[[28,6],23],[234,[[45,[43]]]],[28,6],[28,14],[[28,[29,[6]]],23],[[28,6],23],[[28,6],23],[[],28],[234,[[45,[43]]]],[234,[[45,[43]]]],[[28,28],[[45,[34]]]],[28,[[45,[43]]]],[[28,43],2],[[28,6],2],[[28,14],43],[[28,-1],2,200],[[28,-1,6],2,[[96,[14]]]],[[28,14],2],[[28,14],2],[[28,-1],2,[[51,[43],[[88,[23]]]]]],[[28,14],2],[28,2],[234,[[2,[14,[45,[14]]]]]],[[28,14],28],[[28,6],[[45,[6]]]],[[28,6],[[45,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[239,28],[-1,28,[]],[-1,28,[]],[-1,28,[]],[[28,14],2],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[[28,14],[[9,[2,89]]]],[[28,14],[[9,[2,89]]]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[233,144],[14,28],[[28,43],[[9,[2,24]]]],[[28,6],[[9,[2,24]]]],0,0,[[[240,[-1,-2]]],-2,[],18],[[[240,[-1,-2]]],[],25,18],[[[241,[-1,-2]]],[],25,18],[[[240,[-1,-2]]],-1,25,18],[[[240,[[48,[-1]],-2]]],[[240,[-1,-2]]],[],[8,18]],[[[240,[[19,[[48,[-1]]]],-2]]],[[240,[[19,[-1]],-2]]],[],[8,18]],[[[240,[-1,-2]]],-1,25,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[240,[-1]]],[[45,[53]]],[53,25]],[[[240,[-1,-2]]],[[240,[-1,-2]]],25,[18,8]],[[[241,[-1,-2]]],[[241,[-1,-2]]],25,[18,8]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[240,[-1,-2]],[240,[-1,-2]]],34,[35,25],18],[[],2],[-1,2,18],[[],[[240,[-1]]],54],[[],[[241,[-1]]],[]],[[[240,[-1,-2]]],-1,25,18],[[[240,[-1]]],6,[53,25]],[[[240,[56,-1]]],[[9,[[240,[-2,-1]],[240,[56,-1]]]]],[18,8],[56,58,59]],[[[240,[56,-1]]],[[240,[-2,-1]]],[18,8],[56,58,59]],[[[240,[-1,-2]]],[[241,[-1,-2]]],25,[8,18]],[[[240,[-1,-2]]],2,25,18],[[[241,[-1,-2]]],2,25,18],[[[240,[-1,-2]],[240,[-1,-2]]],23,[36,25],18],[[[240,[-1,-2]],3],[[9,[2,24]]],[38,25],18],[[[240,[-1,-2]],3],[[9,[2,24]]],[39,25],18],[[[240,[-1,-2]],3],[[9,[2,24]]],25,18],[[[241,[-1]],3],[[9,[2,24]]],25],[[[47,[-1,-2]]],[[240,[-1,-2]]],25,18],[-1,[[240,[-1]]],[]],[[[29,[-1]]],[[240,[-1]]],[30,25]],[-1,-1,[]],[[[60,[-1]]],[[240,[[19,[-1]]]]],[]],[41,[[240,[41]]]],[28,[[240,[6]]]],[[[240,[6]]],[[240,[[19,[13]]]]]],[[[19,[-1]]],[[240,[[19,[-1]]]]],8],[6,[[240,[6]]]],[[[37,[-1,-2]]],[[240,[[19,[-1]],-2]]],[],[18,8]],[26,-1,[]],[40,[[240,[41]]]],[-1,-1,[]],[-2,[[240,[[19,[-1]]]]],[],[[42,[],[[5,[-1]]]]]],[[],[[240,[-1]]],25],[[],[[241,[-1]]],25],[-1,[[240,[-2,-1]]],18,25],[-1,[[241,[-2,-1]]],18,25],[[[240,[-1,-2]],[240,[-1,-2]]],23,[46,25],18],[[[240,[-1,-2]]],[[45,[-1]]],25,18],[[[240,[-1,-2]]],-1,25,18],[[[240,[-1,-2]],[240,[-1,-2]]],23,[46,25],18],[[[240,[-1,-2]],-3],2,[44,25],18,27],[[],2],[-1,2,[8,18]],[-1,-2,[],[]],[-1,-2,[],[]],[[[240,[-1,-2]]],[[45,[-1]]],[],18],[[[240,[-1,-2]]],[],25,18],[[[241,[-1,-2]]],[],25,18],[[[240,[-1,-2]],[240,[-1,-2]]],23,[46,25],18],[[[240,[-1,-2]],[240,[-1,-2]]],23,[46,25],18],[[[240,[-1,-2]]],-1,8,[18,8]],[[[240,[-1,-2]],[240,[-1,-2]]],23,[36,25],18],[-1,[[240,[-1]]],[]],[[],[[241,[-1]]],[]],[-2,[[240,[-1]]],[],[[52,[[241,[-1]]],[[88,[-1]]]]]],[[-1,-2],[[240,[-1,-2]]],[],18],[-1,[[241,[-2,-1]]],18,[]],[[],[[240,[[48,[-1]]]]],[]],[-1,[[240,[[48,[-2]],-1]]],18,[]],[14,[[240,[[19,[[48,[-1]]]]]]],[]],[[14,-1],[[240,[[19,[[48,[-2]]]],-1]]],18,[]],[[],[[240,[[48,[-1]]]]],[]],[-1,[[240,[[48,[-2]],-1]]],18,[]],[14,[[240,[[19,[[48,[-1]]]]]]],[]],[[14,-1],[[240,[[19,[[48,[-2]]]],-1]]],18,[]],[[[240,[-1,-2]],[240,[-1,-2]]],[[45,[34]]],[46,25],18],[-1,[[61,[[240,[-1]]]]],[]],[[-1,-2],[[61,[[240,[-1,-2]]]]],[],18],[[[240,[-1]],71],2,[53,25]],[[[240,[-1,-2]],[240,[-1,-2]]],23,25,18],[[[241,[-1,-2]],[241,[-1,-2]]],23,25,18],[[[240,[-1]]],[[45,[53]]],[53,25]],[[[240,[-1,-2]]],14,25,18],[[[241,[-1,-2]]],14,25,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,28,[]],[[[240,[[19,[-1]],-2]]],[[9,[[240,[[60,[-1]],-2]]]]],[],[18,8]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[[240,[-1]],21]]],[]],[[-1,-2],[[9,[[240,[-1,-2]],21]]],[],18],[[],[[9,[[240,[[48,[-1]]]],21]]],[]],[-1,[[9,[[240,[[48,[-2]],-1]],21]]],18,[]],[[],[[9,[[240,[[48,[-1]]]],21]]],[]],[-1,[[9,[[240,[[48,[-2]],-1]],21]]],18,[]],[-1,[[9,[[61,[[240,[-1]]]],21]]],[]],[[-1,-2],[[9,[[61,[[240,[-1,-2]]]],21]]],[],18],[[[240,[-1,-2]]],[[9,[-1,[240,[-1,-2]]]]],[],18],[-1,10,[]],[-1,10,[]],[[[240,[-1,-2]]],-1,8,[18,8]],[[[241,[-1,-2]]],[[45,[[240,[-1,-2]]]]],25,[8,18]],[[[240,[-1,-2]]],14,25,18],[[[241,[-1,-2]]],14,25,18],0,[[[240,[242]]],2],[[[240,[242]]],2],0,0,0,0,0,[[[243,[-1,-2]],14],[[9,[2,135]]],[],18],[[[243,[-1,-2]],14],[[9,[2,135]]],[],18],[[[244,[-1,-2]]],-2,[],18],[[[243,[-1,-2]]],-2,[],18],[[[37,[-1,-2]]],-2,[],18],[[[245,[-1,-2,-3]]],-3,[],[[51,[-1],[[88,[23]]]]],18],[[[37,[-1,-2]],[37,[-1,-2]]],2,[],18],[[[37,[-1,-2]]],[[37,[-1,-2]]],[],18],[[[37,[-1,-2]]],[[19,[-1]]],[],18],[[[37,[-1,-2]]],[],[],18],[[[243,[-1,-2]]],[[19,[-1]]],[],18],[[[37,[-1,-2]]],[[19,[-1]]],[],18],[[[37,[-1,-2]]],[],[],18],[[[244,[-1,-2]]],[[19,[-1]]],[],18],[[[243,[-1,-2]]],[[19,[-1]]],[],18],[[[37,[-1,-2]]],[[19,[-1]]],[],18],[[[37,[-1,-2]]],[[37,[-1,-2]]],[],18],[[[244,[-1,-2]]],[[19,[-1]]],[],18],[[[243,[-1,-2]]],[[19,[-1]]],[],18],[[[37,[-1,-2]]],[[19,[-1]]],[],18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1,-2]]],[[19,[-1]]],[],18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1,-2]]],[[19,[-1]]],[],18],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1,-2]]],14,[],18],[[[37,[-1,-2]]],2,[],18],[[[243,[-1,-2]]],[[243,[-1,-2]]],8,[18,8]],[[[37,[-1,-2]]],[[37,[-1,-2]]],8,[18,8]],[[[37,[-1,-2]],[37,[-1,-2]]],2,8,[18,8]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[37,[-1,-2]],[37,[-1,-2]]],34,35,18],[[[243,[-1,-2]]],14,[],18],[[[37,[-1,-2]]],2,36,18],[[[37,[-1,-2]],-3],2,[],18,[[51,[-1,-1],[[88,[23]]]]]],[[[37,[-1,-2]],-4],2,[],18,36,[[51,[-1],[[88,[-3]]]]]],[[],[[243,[-1,-2]]],[],[18,54]],[[],[[37,[-1]]],[]],[[[37,[-1,-2]]],[[19,[-1]]],[],18],[[[37,[-1,-2]]],[[19,[-1]]],[],18],[[[37,[-1,-2]],-3],[[244,[-1,-2]]],[],18,[[96,[14]]]],[[[244,[-1,-2]]],2,[],18],[[[243,[-1,-2]]],2,[],18],[[[37,[-1,-2]]],2,[],18],[[[245,[-1,-2,-3]]],2,[],[[51,[-1],[[88,[23]]]]],18],[[[246,[-1,-2]]],2,64,18],[[[37,[-2,-3]],[19,[-1]]],23,[],[[36,[-1]]],18],[[[37,[-2,-3]],[60,[-1]]],23,[],[[36,[-1]]],18],[[[37,[-2,-3]],[19,[-1]]],23,[],[[36,[-1]]],18],[[[37,[-2,-3]],[60,[-1]]],23,[],[[36,[-1]]],18],[[[37,[-2,-3]],[37,[-1,-4]]],23,[],[[36,[-1]]],18,18],[[[37,[-2,-3]],[19,[-1]]],23,[],[[36,[-1]]],18],[[[37,[-1,-2]],-3],2,[],18,[[42,[],[[5,[-1]]]]]],[[[37,[-1,-2]],-3],2,99,18,[[42,[],[[5,[-1]]]]]],[[[37,[-1,-2]],[19,[-1]]],2,8,18],[[[37,[-1,-2]],-3],2,8,18,[[96,[14]]]],[[[37,[-1,-2]],-1],2,[],18],[[[37,[-1,-2]],-1],2,99,18],[[[37,[-1,-2]],14],2,99,18],[[[37,[-1,-2]],14],2,[],18],[[[37,[-1,-2]],-3],[[245,[-1,-3,-2]]],[],18,[[51,[-1],[[88,[23]]]]]],[[[244,[-1,-2]],3],[[9,[2,24]]],38,18],[[[243,[-1,-2]],3],[[9,[2,24]]],38,18],[[[37,[-1,-2]],3],[[9,[2,24]]],38,18],[[[245,[-1,-2,-3]],3],[[9,[2,24]]],38,[38,[51,[-1],[[88,[23]]]]],[38,18]],[[[246,[-1,-2]],3],[[9,[2,24]]],[38,64],[38,18]],[-1,-1,[]],[-1,-1,[]],[[[60,[-1]]],[[37,[-1]]],8],[6,[[37,[13]]]],[-1,-1,[]],[28,[[37,[13]]]],[[[60,[-1]]],[[37,[-1]]],8],[[[47,[[19,[-1]],-2]]],[[37,[-1,-2]]],[],18],[[[29,[[19,[-1]]]]],[[37,[-1]]],[]],[[[84,[-1,-2]]],[[37,[-1,-2]]],[],18],[40,[[37,[13]]]],[[[83,[-1,-2]]],[[37,[-1,-2]]],[],18],[[[60,[-1]]],[[37,[-1]]],[]],[[[19,[-1]]],[[37,[-1]]],8],[[[19,[-1]]],[[37,[-1]]],8],[-1,-1,[]],[-1,-1,[]],[-2,[[37,[-1]]],[],[[42,[],[[5,[-1]]]]]],[[14,14],[[37,[-1]]],[]],[[14,14,-1],[[37,[-2,-1]]],18,[]],[[[37,[-1,-2]],-3],2,44,18,27],[[[37,[-1,-2]],-3],[],[],18,[[193,[[19,[-1]]]]]],[[[37,[-1,-2]],-3],[],[],18,[[193,[[19,[-1]]]]]],[[[37,[-1,-2]],14,-1],2,[],18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1,-2]]],[[47,[[19,[-1]],-2]]],[],18],[[[37,[[60,[-1]],-2]]],[[37,[-1,-2]]],[],18],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1,-2]]],[],[],18],[[[37,[-1,-2]]],[],[],18],[[[37,[-1,-2]]],[],[],18],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1,-2]]],[[2,[14,14]]],[],18],[[[37,[-1,-2]]],[[2,[14,14,-2]]],[],18],[[[244,[-1,-2]]],23,[],18],[[[243,[-1,-2]]],23,[],18],[[[37,[-1,-2]]],23,[],18],[[[244,[-1,-2]]],2,[],18],[[[37,[-1,-2]]],[[19,[-1]]],[],18],[[[37,[-1,-2]]],14,[],18],[[[37,[-2,-3]],[60,[-1]]],23,[],[[36,[-1]]],18],[[[37,[-2,-3]],[19,[-1]]],23,[],[[36,[-1]]],18],[[[37,[-2,-3]],[19,[-1]]],23,[],[[36,[-1]]],18],[[[37,[-2,-3]],[37,[-1,-4]]],23,[],[[36,[-1]]],18,18],[[[37,[-2,-3]],[60,[-1]]],23,[],[[36,[-1]]],18],[[[37,[-2,-3]],[19,[-1]]],23,[],[[36,[-1]]],18],[[],[[37,[-1]]],[]],[-1,[[37,[-2,-1]]],18,[]],[[[244,[-1,-2]]],[[45,[-1]]],[],18],[[[243,[-1,-2]]],[[45,[-1]]],[],18],[[[245,[-1,-2,-3]]],[[45,[-1]]],[],[[51,[-1],[[88,[23]]]]],18],[[[246,[-1,-2]]],45,64,18],[[[244,[-1,-2]]],[[45,[-1]]],[],18],[[[243,[-1,-2]]],[[45,[-1]]],[],18],[[[246,[-1,-2]]],45,64,18],[[[243,[-1,-2]]],[[9,[[60,[-1]],[136,[-1]]]]],[],18],[[[37,[-1,-2]],[37,[-1,-3]]],[[45,[34]]],46,18,18],[[[37,[-1,-2]]],[[45,[-1]]],[],18],[[[37,[-1,-2]],-1],2,[],18],[[[37,[-1,-2]],-1],[[9,[2,-1]]],[],18],[[[37,[-1,-2]],14],-1,[],18],[[[37,[-1,-2]],14],2,[],18],[[[37,[-1,-2]],14],2,[],18],[[[37,[-1,-2]],14,-1],2,8,18],[[[37,[-1,-2]],14,-3],2,[],18,[[51,[],[[88,[-1]]]]]],[[[37,[-1,-2]],-3],2,[],18,[[51,[-1],[[88,[23]]]]]],[[[37,[-1,-2]],-3],2,[],18,[[51,[-1],[[88,[23]]]]]],[[[37,[-1,-2]],14],2,[],18],[[[37,[-1,-2]],14],2,[],18],[[[37,[-1,-2]]],2,[],18],[[[244,[-1,-2]]],[[2,[14,[45,[14]]]]],[],18],[[[243,[-1,-2]]],[[2,[14,[45,[14]]]]],[],18],[[[245,[-1,-2,-3]]],[[2,[14,[45,[14]]]]],[],[[51,[-1],[[88,[23]]]]],18],[[[246,[-1,-2]]],[[2,[14,[45,[14]]]]],64,18],[[[37,[-1,-2]]],[[19,[[48,[-1]]]]],[],18],[[[37,[-1,-2]],-3,-4],[[246,[-2]]],[],18,[[96,[14]]],[[42,[],[[5,[-1]]]]]],[[[37,[-1,-2]]],[[2,[[19,[-1]],[19,[[48,[-1]]]]]]],[],18],[[[37,[-1,-2]],14],[[37,[-1,-2]]],[],[8,18]],[[[37,[-1,-2]],14],-1,[],18],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1,-2]],14],2,[],18],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[[[37,[-1,-2]],14],[[9,[2,89]]],[],18],[[[37,[-1,-2]],14],[[9,[2,89]]],[],18],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[14,[[37,[-1]]],[]],[[14,-1],[[37,[-2,-1]]],18,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[247,23],247],[248,249],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[248,248],[248,[[250,[2]]]],[[247,23],247],[[247,23],247],[248,2],0,[248,[[250,[2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[248,249],0,[251,[[253,[[252,[248]]]]]],[254,[[253,[[255,[248]]]]]],[256,[[253,[[255,[248]]]]]],[249,248],[[],247],[257,[[45,[258]]]],[6,[[250,[257]]]],[6,[[250,[248]]]],[[247,-1],[[250,[248]]],[[259,[6]]]],[[248,[19,[13]]],[[250,[14]]]],[[248,[19,[13]]],[[250,[14]]]],[[247,23],247],0,[[247,23],247],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[[248,[19,[13]]],[[250,[14]]]],[[248,[19,[13]]],[[250,[14]]]],[[247,23],247],[[248,6],4],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[260,[[250,[2]]]],[[[255,[-1]]],[[250,[2]]],260],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[261,[-1]]],262],[[-1,[19,[13]]],[[252,[-1]]],262],[-1,[[255,[-1]]],[]],[[262,[19,[13]]],[[250,[14]]]],[[[261,[-1]],28],[[250,[14]]],262],[[[252,[-1]],28],[[250,[14]]],262],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[[260,[19,[13]]],[[250,[14]]]],[[[255,[-1]],[19,[13]]],[[250,[14]]],260],[[[255,[-1]],146],4,260],[[[255,[-1]],6],4,260],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[263,2],[[],264],[264,2],[264,2],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[263,23],[-1,10,[]],[-1,10,[]],[263,2],[[264,[265,[-1]]],[[265,[-1]]],[]],[266,[[9,[266,267]]]],[[266,6],[[9,[2,267]]]],[249,[[9,[2,267]]]],[[266,6],[[9,[2,267]]]],[[249,249],[[9,[249,267]]]],0,[77,26],0,[[268,14],2],[[268,14],2],[[],14],[[],14],0,[266,[[9,[2,267]]]],[6,[[9,[2,267]]]],[57,2],[57,2],0,[[6,269,14],[[9,[249,267]]]],[6,[[9,[249,267]]]],[14,[[9,[[45,[[20,[13]]]],267]]]],[[[20,[13]],14],[[9,[2,267]]]],[14,2],[[249,[19,[13]]],[[9,[14,267]]]],[[266,[19,[13]],14],[[9,[14,267]]]],[6,[[9,[2,267]]]],[[266,[19,[13]],14],[[9,[2,267]]]],[[270,271,272],[[9,[266,267]]]],[14,[[9,[14,267]]]],[[14,14],[[9,[14,267]]]],[[14,14,14],[[9,[14,267]]]],[[14,14,14,14],[[9,[14,267]]]],[[14,14,14,14,14],[[9,[14,267]]]],[[14,14,14,14,14,14],[[9,[14,267]]]],[[],[[9,[80,267]]]],[[249,[19,[13]]],[[9,[14,267]]]],[[],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[267,6],[-1,-2,[],[]],[-1,-2,[],[]],[267,267],[[-1,-2],2,[],[]],[[267,267],34],[14,[[9,[14,267]]]],[[[9,[14,267]]],14],[[267,267],23],[[267,3],[[9,[2,24]]]],[[267,3],[[9,[2,24]]]],[-1,-1,[]],[[267,-1],2,27],[-1,-2,[],[]],[[267,267],[[45,[34]]]],[-1,-2,[],[]],[-1,28,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,0,0,0,0,0,0,0,0,[[],269],[[269,269],269],[[269,269],2],[[269,269],269],[[269,269],2],[269,14],[269,14],[[269,269],269],[[269,269],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[249,249],[269,269],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[249,249],34],[[269,269],34],[269,269],[[269,269],23],[[269,269],269],[[],269],[[249,249],23],[[269,269],23],[[269,-1],2,[[42,[],[[5,[269]]]]]],[[249,3],[[9,[2,24]]]],[[269,3],[[9,[2,24]]]],[[269,3],[[9,[2,24]]]],[[269,3],[[9,[2,24]]]],[[269,3],[[9,[2,24]]]],[[269,3],[[9,[2,24]]]],[-1,-1,[]],[-1,-1,[]],[14,[[45,[269]]]],[14,269],[14,269],[14,269],[-1,269,[[42,[],[[5,[269]]]]]],[6,[[45,[269]]]],[[269,269],2],[[269,269],269],[[269,269],23],[-1,-2,[],[]],[-1,-2,[],[]],[269],[269,23],[269,23],[269,[[273,[269]]]],[269,[[274,[269]]]],[269,269],[[249,249],[[45,[34]]]],[[269,269],[[45,[34]]]],[[269,269],2],[[269,269,23],2],[[269,269],269],[[269,269],2],[[269,269],269],[-1,-2,[],[]],[-1,-2,[],[]],[[269,269],2],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[[269,269],269],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[266,266],[270,270],[271,271],[272,272],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[266,266],34],[[270,270],34],[[271,271],34],[[272,272],34],[[266,266],23],[[270,270],23],[[271,271],23],[[272,272],23],[[266,3],[[9,[2,24]]]],[[270,3],[[9,[2,24]]]],[[271,3],[[9,[2,24]]]],[[272,3],[[9,[2,24]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[266,266],[[45,[34]]]],[[270,270],[[45,[34]]]],[[271,271],[[45,[34]]]],[[272,272],[[45,[34]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,2,[52,58]]],"c":[56,1640,2385],"p":[[5,"CliArgs",0],[1,"tuple"],[5,"Formatter",1555],[8,"Result",1555],[17,"Item"],[1,"str"],[10,"DoubleEndedIterator",3858],[10,"Clone",3859],[6,"Result",3860],[5,"TypeId",3861],[5,"PageAlloc",23],[5,"Layout",51],[1,"u8"],[1,"usize"],[5,"PageFrames",3862],[5,"LayoutError",51],[10,"GlobalAlloc",51],[10,"Allocator",51],[1,"slice"],[5,"NonNull",3863],[5,"AllocError",51],[5,"Global",51],[1,"bool"],[5,"Error",1555],[10,"Sized",3864],[1,"never"],[10,"Hasher",3865],[5,"String",2971],[6,"Cow",149],[10,"ToOwned",149],[10,"Borrow",149],[10,"BorrowMut",149],[17,"Owned"],[6,"Ordering",3866],[10,"Ord",3866],[10,"PartialEq",3866],[5,"Vec",3265],[10,"Debug",1555],[10,"Display",1555],[5,"CString",1462],[5,"CStr",3867],[10,"IntoIterator",3868],[1,"char"],[10,"Hash",3865],[6,"Option",3869],[10,"PartialOrd",3866],[5,"Box",215],[20,"MaybeUninit",3870],[10,"Tuple",3864],[10,"Fn",3871],[10,"FnMut",3871],[10,"FnOnce",3871],[10,"Error",3872],[10,"Default",3873],[5,"ThinBox",215],[10,"Any",3861],[1,"u64"],[10,"Send",3864],[10,"Sync",3864],[1,"array"],[5,"Pin",3874],[5,"CharPredicateSearcher",2827],[10,"ExactSizeIterator",3875],[10,"Iterator",3876],[10,"Unsize",3864],[5,"Context",3877],[6,"Poll",3878],[10,"Future",3879],[10,"Unpin",3864],[10,"AsyncIterator",3880],[5,"Request",3872],[6,"CoroutineState",3881],[10,"Coroutine",3881],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[1,"isize"],[1,"u128"],[1,"u16"],[1,"u32"],[5,"BinaryHeap",377],[5,"VecDeque",377],[5,"BTreeMap",377],[5,"BTreeSet",377],[5,"LinkedList",377],[17,"Output"],[5,"TryReserveError",377],[6,"TryReserveErrorKind",377],[5,"Cursor",1259],[5,"CursorMut",1259],[5,"Difference",1127],[5,"Drain",736],[5,"Drain",1374],[10,"RangeBounds",3882],[5,"DrainSorted",736],[6,"Entry",832],[10,"Copy",3864],[5,"ExtractIf",832],[5,"ExtractIf",1127],[5,"ExtractIf",1259],[5,"OccupiedEntry",832],[5,"Intersection",1127],[5,"Iter",736],[5,"IntoIter",736],[5,"IntoIter",832],[5,"Iter",832],[5,"IterMut",832],[5,"Iter",1127],[5,"IntoIter",1127],[5,"IterMut",1259],[5,"IntoIter",1259],[5,"Iter",1259],[5,"IntoIter",1374],[5,"Iter",1374],[5,"IterMut",1374],[5,"IntoIterSorted",736],[5,"IntoKeys",832],[5,"IntoValues",832],[5,"Keys",832],[6,"Bound",3882],[5,"Cursor",832],[5,"CursorMut",832],[5,"PeekMut",736],[5,"Range",832],[5,"Range",1127],[5,"RangeMut",832],[5,"SymmetricDifference",1127],[5,"OccupiedError",832],[5,"Union",1127],[5,"Values",832],[5,"ValuesMut",832],[5,"VacantEntry",832],[5,"NonZeroUsize",3883],[5,"IntoIter",3884],[10,"Try",3885],[5,"FromVecWithNulError",1462],[5,"NulError",1462],[5,"IntoStringError",1462],[5,"NonZeroU8",3883],[5,"RangeFull",3882],[10,"Into",3886],[5,"Utf8Error",2375],[6,"Alignment",1555],[5,"Arguments",1555],[5,"DebugList",1555],[5,"DebugMap",1555],[5,"DebugSet",1555],[5,"DebugStruct",1555],[5,"DebugTuple",1555],[10,"Octal",1555],[10,"Binary",1555],[10,"LowerHex",1555],[10,"UpperHex",1555],[10,"Pointer",1555],[10,"LowerExp",1555],[10,"UpperExp",1555],[5,"FormatterFn",1555],[10,"Write",1555],[5,"Rc",1736],[5,"Weak",1736],[5,"UniqueRc",1736],[5,"Iter",1861],[5,"IterMut",1861],[5,"Split",1861],[5,"SplitInclusive",1861],[5,"RSplit",1861],[5,"EscapeAscii",1861],[5,"Windows",1861],[5,"Chunks",1861],[5,"ChunksExact",1861],[5,"ArrayWindows",1861],[5,"ArrayChunks",1861],[5,"RChunks",1861],[5,"RChunksExact",1861],[10,"Concat",1861],[5,"ChunksMut",1861],[5,"ChunksExactMut",1861],[5,"ArrayChunksMut",1861],[5,"RChunksMut",1861],[5,"RChunksExactMut",1861],[5,"SplitMut",1861],[5,"SplitInclusiveMut",1861],[5,"RSplitMut",1861],[5,"SplitN",1861],[5,"RSplitN",1861],[5,"SplitNMut",1861],[5,"RSplitNMut",1861],[5,"GroupBy",1861],[5,"GroupByMut",1861],[5,"Range",3882],[10,"SliceIndex",1861],[10,"Join",1861],[5,"RangeTo",3882],[5,"Chars",2375],[5,"Bytes",2375],[5,"CharIndices",2375],[5,"SplitInclusive",2375],[10,"Pattern",2827],[5,"ParseBoolError",2375],[5,"Split",2375],[5,"RSplit",2375],[5,"SplitTerminator",2375],[5,"RSplitTerminator",2375],[5,"SplitN",2375],[5,"RSplitN",2375],[5,"MatchIndices",2375],[5,"RMatchIndices",2375],[5,"Matches",2375],[5,"RMatches",2375],[5,"Lines",2375],[5,"LinesAny",2375],[5,"SplitWhitespace",2375],[5,"SplitAsciiWhitespace",2375],[5,"EncodeUtf16",2375],[5,"EscapeDebug",2375],[5,"EscapeDefault",2375],[5,"EscapeUnicode",2375],[5,"Utf8Chunk",2375],[5,"Utf8Chunks",2375],[17,"Err"],[10,"FromStr",2375],[6,"SearchStep",2827],[5,"CharSearcher",2827],[5,"CharArraySearcher",2827],[5,"CharArrayRefSearcher",2827],[5,"CharSliceSearcher",2827],[5,"StrSearcher",2827],[10,"Searcher",2827],[17,"Searcher"],[10,"ReverseSearcher",2827],[5,"FromUtf8Error",2971],[5,"Drain",2971],[5,"FromUtf16Error",2971],[5,"RangeToInclusive",3882],[5,"RangeFrom",3882],[5,"RangeInclusive",3882],[10,"ToString",2971],[5,"Arc",3147],[5,"Weak",3147],[10,"Wake",3262],[5,"IntoIter",3265],[5,"Drain",3265],[5,"ExtractIf",3265],[5,"Splice",3265],[5,"OpenOptions",3451],[5,"File",3451],[5,"FileDesc",3688],[8,"Result",3642],[5,"Stdin",3451],[5,"ConstBufReader",3542],[5,"MutexGuard",3887],[5,"Stdout",3451],[5,"BufWriter",3542],[5,"Stderr",3451],[5,"Dir",3451],[5,"DirEntry",3451],[10,"AsRef",3886],[10,"Write",3542],[5,"BufReader",3542],[10,"Read",3542],[5,"Futex",3580],[5,"Condvar",3580],[8,"MutexGuard",3580],[5,"SocketDesc",3792],[5,"Error",3642],[5,"AtomicUsize",3888],[5,"FileOpenFlags",3688],[5,"SocketDomain",3792],[5,"SocketType",3792],[5,"Protocol",3792],[5,"Iter",3889],[5,"IterNames",3889],[15,"AllocError",735]],"b":[[26,"impl-GlobalAlloc-for-PageAlloc"],[27,"impl-PageFrameAllocator-for-PageAlloc"],[99,"impl-Display-for-LayoutError"],[100,"impl-Debug-for-LayoutError"],[101,"impl-Debug-for-AllocError"],[102,"impl-Display-for-AllocError"],[156,"impl-Add%3C%26str%3E-for-Cow%3C\'a,+str%3E"],[157,"impl-Add-for-Cow%3C\'a,+str%3E"],[158,"impl-AddAssign-for-Cow%3C\'a,+str%3E"],[159,"impl-AddAssign%3C%26str%3E-for-Cow%3C\'a,+str%3E"],[173,"impl-PartialEq%3CCow%3C\'b,+C%3E%3E-for-Cow%3C\'a,+B%3E"],[174,"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-Cow%3C\'_,+%5BT%5D%3E"],[175,"impl-PartialEq%3CString%3E-for-Cow%3C\'a,+str%3E"],[176,"impl-PartialEq%3Cstr%3E-for-Cow%3C\'a,+str%3E"],[177,"impl-PartialEq%3C%26%5BU%5D%3E-for-Cow%3C\'_,+%5BT%5D%3E"],[178,"impl-PartialEq%3C%26str%3E-for-Cow%3C\'a,+str%3E"],[179,"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Cow%3C\'_,+%5BT%5D%3E"],[180,"impl-Debug-for-Cow%3C\'_,+B%3E"],[181,"impl-Display-for-Cow%3C\'_,+B%3E"],[183,"impl-From%3CString%3E-for-Cow%3C\'a,+str%3E"],[184,"impl-From%3C%26str%3E-for-Cow%3C\'a,+str%3E"],[185,"impl-From%3C%26Vec%3CT%3E%3E-for-Cow%3C\'a,+%5BT%5D%3E"],[186,"impl-From%3CCString%3E-for-Cow%3C\'a,+CStr%3E"],[187,"impl-From%3C%26CString%3E-for-Cow%3C\'a,+CStr%3E"],[188,"impl-From%3C%26String%3E-for-Cow%3C\'a,+str%3E"],[189,"impl-From%3C%26%5BT%5D%3E-for-Cow%3C\'a,+%5BT%5D%3E"],[190,"impl-From%3C%26CStr%3E-for-Cow%3C\'a,+CStr%3E"],[191,"impl-From%3CVec%3CT%3E%3E-for-Cow%3C\'a,+%5BT%5D%3E"],[192,"impl-FromIterator%3C%26str%3E-for-Cow%3C\'a,+str%3E"],[193,"impl-FromIterator%3Cchar%3E-for-Cow%3C\'a,+str%3E"],[194,"impl-FromIterator%3CT%3E-for-Cow%3C\'a,+%5BT%5D%3E"],[195,"impl-FromIterator%3CString%3E-for-Cow%3C\'a,+str%3E"],[201,"impl-PartialEq%3C%26str%3E-for-Cow%3C\'a,+str%3E"],[202,"impl-PartialEq%3Cstr%3E-for-Cow%3C\'a,+str%3E"],[203,"impl-PartialEq%3C%26%5BU%5D%3E-for-Cow%3C\'_,+%5BT%5D%3E"],[204,"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Cow%3C\'_,+%5BT%5D%3E"],[205,"impl-PartialEq%3CString%3E-for-Cow%3C\'a,+str%3E"],[206,"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-Cow%3C\'_,+%5BT%5D%3E"],[220,"impl-Box%3C%5BMaybeUninit%3CT%3E%5D,+A%3E"],[221,"impl-Box%3CMaybeUninit%3CT%3E,+A%3E"],[232,"impl-Clone-for-Box%3CT,+A%3E"],[233,"impl-Clone-for-Box%3Cstr%3E"],[234,"impl-Clone-for-Box%3C%5BT%5D,+A%3E"],[235,"impl-Clone-for-Box%3CCStr%3E"],[236,"impl-Clone-for-Box%3CT,+A%3E"],[237,"impl-Clone-for-Box%3C%5BT%5D,+A%3E"],[240,"impl-Default-for-Box%3CT%3E"],[241,"impl-Default-for-Box%3CCStr%3E"],[242,"impl-Default-for-Box%3Cstr%3E"],[243,"impl-Default-for-Box%3C%5BT%5D%3E"],[249,"impl-Box%3Cdyn+Any+%2B+Send,+A%3E"],[250,"impl-Box%3Cdyn+Any+%2B+Send+%2B+Sync,+A%3E"],[251,"impl-Box%3Cdyn+Any,+A%3E"],[252,"impl-Box%3Cdyn+Any+%2B+Send+%2B+Sync,+A%3E"],[253,"impl-Box%3Cdyn+Any+%2B+Send,+A%3E"],[254,"impl-Box%3Cdyn+Any,+A%3E"],[259,"impl-Display-for-ThinBox%3CT%3E"],[260,"impl-Debug-for-ThinBox%3CT%3E"],[261,"impl-Pointer-for-Box%3CT,+A%3E"],[262,"impl-Display-for-Box%3CT,+A%3E"],[263,"impl-Debug-for-Box%3CT,+A%3E"],[265,"impl-From%3CString%3E-for-Box%3Cstr%3E"],[266,"impl-From%3CE%3E-for-Box%3Cdyn+Error%3E"],[267,"impl-From%3CCow%3C\'_,+CStr%3E%3E-for-Box%3CCStr%3E"],[268,"impl-From%3CE%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E"],[269,"impl-From%3C%5BT;+N%5D%3E-for-Box%3C%5BT%5D%3E"],[270,"impl-From%3CT%3E-for-Box%3CT%3E"],[271,"impl-From%3C%26str%3E-for-Box%3Cstr%3E"],[272,"impl-From%3C%26CStr%3E-for-Box%3CCStr%3E"],[273,"impl-From%3CVec%3CT,+A%3E%3E-for-Box%3C%5BT%5D,+A%3E"],[274,"impl-From%3CCow%3C\'b,+str%3E%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E"],[275,"impl-From%3CCString%3E-for-Box%3CCStr%3E"],[276,"impl-From%3CCow%3C\'a,+str%3E%3E-for-Box%3Cdyn+Error%3E"],[277,"impl-From%3CString%3E-for-Box%3Cdyn+Error%3E"],[278,"impl-From%3CCow%3C\'_,+str%3E%3E-for-Box%3Cstr%3E"],[279,"impl-From%3CBox%3Cstr,+A%3E%3E-for-Box%3C%5Bu8%5D,+A%3E"],[280,"impl-From%3C%26str%3E-for-Box%3Cdyn+Error%3E"],[281,"impl-From%3CCow%3C\'_,+%5BT%5D%3E%3E-for-Box%3C%5BT%5D%3E"],[284,"impl-From%3C%26%5BT%5D%3E-for-Box%3C%5BT%5D%3E"],[285,"impl-From%3C%26str%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E"],[286,"impl-From%3CString%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E"],[336,"impl-Iterator-for-Box%3CI,+A%3E"],[337,"impl-AsyncIterator-for-Box%3CS%3E"],[347,"impl-TryFrom%3CBox%3C%5BT%5D%3E%3E-for-Box%3C%5BT;+N%5D%3E"],[348,"impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E"],[361,"impl-Hasher-for-Box%3CT,+A%3E"],[362,"impl-Box%3CMaybeUninit%3CT%3E,+A%3E"],[476,"impl-PartialEq%3C%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E"],[477,"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E"],[478,"impl-PartialEq-for-VecDeque%3CT,+A%3E"],[479,"impl-PartialEq%3C%26mut+%5BU;+N%5D%3E-for-VecDeque%3CT,+A%3E"],[480,"impl-PartialEq%3CVec%3CU,+A%3E%3E-for-VecDeque%3CT,+A%3E"],[481,"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-VecDeque%3CT,+A%3E"],[482,"impl-PartialEq%3C%26%5BU%5D%3E-for-VecDeque%3CT,+A%3E"],[485,"impl-Extend%3CT%3E-for-BinaryHeap%3CT,+A%3E"],[486,"impl-Extend%3C%26T%3E-for-BinaryHeap%3CT,+A%3E"],[487,"impl-Extend%3C(%26K,+%26V)%3E-for-BTreeMap%3CK,+V,+A%3E"],[488,"impl-Extend%3C(K,+V)%3E-for-BTreeMap%3CK,+V,+A%3E"],[489,"impl-Extend%3CT%3E-for-BTreeSet%3CT,+A%3E"],[490,"impl-Extend%3C%26T%3E-for-BTreeSet%3CT,+A%3E"],[491,"impl-Extend%3C%26T%3E-for-LinkedList%3CT,+A%3E"],[492,"impl-Extend%3CT%3E-for-LinkedList%3CT,+A%3E"],[493,"impl-Extend%3C%26T%3E-for-VecDeque%3CT,+A%3E"],[494,"impl-Extend%3CT%3E-for-VecDeque%3CT,+A%3E"],[495,"impl-Extend%3CT%3E-for-BinaryHeap%3CT,+A%3E"],[496,"impl-Extend%3C%26T%3E-for-BinaryHeap%3CT,+A%3E"],[497,"impl-Extend%3C(%26K,+%26V)%3E-for-BTreeMap%3CK,+V,+A%3E"],[498,"impl-Extend%3C(K,+V)%3E-for-BTreeMap%3CK,+V,+A%3E"],[499,"impl-Extend%3C%26T%3E-for-BTreeSet%3CT,+A%3E"],[500,"impl-Extend%3CT%3E-for-BTreeSet%3CT,+A%3E"],[501,"impl-Extend%3CT%3E-for-LinkedList%3CT,+A%3E"],[502,"impl-Extend%3C%26T%3E-for-LinkedList%3CT,+A%3E"],[503,"impl-Extend%3CT%3E-for-VecDeque%3CT,+A%3E"],[504,"impl-Extend%3C%26T%3E-for-VecDeque%3CT,+A%3E"],[505,"impl-Extend%3C%26T%3E-for-BinaryHeap%3CT,+A%3E"],[506,"impl-Extend%3CT%3E-for-BinaryHeap%3CT,+A%3E"],[507,"impl-Extend%3CT%3E-for-VecDeque%3CT,+A%3E"],[508,"impl-Extend%3C%26T%3E-for-VecDeque%3CT,+A%3E"],[520,"impl-Debug-for-TryReserveError"],[521,"impl-Display-for-TryReserveError"],[523,"impl-From%3CVec%3CT,+A%3E%3E-for-BinaryHeap%3CT,+A%3E"],[524,"impl-From%3C%5BT;+N%5D%3E-for-BinaryHeap%3CT%3E"],[532,"impl-From%3CVec%3CT,+A%3E%3E-for-VecDeque%3CT,+A%3E"],[533,"impl-From%3C%5BT;+N%5D%3E-for-VecDeque%3CT%3E"],[572,"impl-IntoIterator-for-%26BinaryHeap%3CT,+A%3E"],[573,"impl-IntoIterator-for-BinaryHeap%3CT,+A%3E"],[574,"impl-IntoIterator-for-BTreeMap%3CK,+V,+A%3E"],[575,"impl-IntoIterator-for-%26BTreeMap%3CK,+V,+A%3E"],[576,"impl-IntoIterator-for-%26mut+BTreeMap%3CK,+V,+A%3E"],[577,"impl-IntoIterator-for-%26BTreeSet%3CT,+A%3E"],[578,"impl-IntoIterator-for-BTreeSet%3CT,+A%3E"],[579,"impl-IntoIterator-for-%26mut+LinkedList%3CT,+A%3E"],[580,"impl-IntoIterator-for-LinkedList%3CT,+A%3E"],[581,"impl-IntoIterator-for-%26LinkedList%3CT,+A%3E"],[582,"impl-IntoIterator-for-VecDeque%3CT,+A%3E"],[583,"impl-IntoIterator-for-%26VecDeque%3CT,+A%3E"],[584,"impl-IntoIterator-for-%26mut+VecDeque%3CT,+A%3E"],[912,"impl-Display-for-OccupiedError%3C\'a,+K,+V,+A%3E"],[913,"impl-Debug-for-OccupiedError%3C\'_,+K,+V,+A%3E"],[1499,"impl-Debug-for-NulError"],[1500,"impl-Display-for-NulError"],[1501,"impl-Display-for-FromVecWithNulError"],[1502,"impl-Debug-for-FromVecWithNulError"],[1503,"impl-Debug-for-IntoStringError"],[1504,"impl-Display-for-IntoStringError"],[1505,"impl-From%3CVec%3CNonZeroU8%3E%3E-for-CString"],[1507,"impl-From%3CBox%3CCStr%3E%3E-for-CString"],[1508,"impl-From%3CCow%3C\'a,+CStr%3E%3E-for-CString"],[1509,"impl-From%3C%26CStr%3E-for-CString"],[1650,"impl-Display-for-FormatterFn%3CF%3E"],[1651,"impl-Debug-for-FormatterFn%3CF%3E"],[1653,"impl-Debug-for-Error"],[1654,"impl-Display-for-Error"],[1655,"impl-Display-for-Arguments%3C\'_%3E"],[1656,"impl-Debug-for-Arguments%3C\'_%3E"],[1731,"impl-Formatter%3C\'a%3E"],[1732,"impl-Write-for-Formatter%3C\'_%3E"],[1734,"impl-Write-for-Formatter%3C\'_%3E"],[1735,"impl-Formatter%3C\'a%3E"],[1743,"impl-Rc%3C%5BMaybeUninit%3CT%3E%5D,+A%3E"],[1744,"impl-Rc%3CMaybeUninit%3CT%3E,+A%3E"],[1772,"impl-Display-for-Rc%3CT,+A%3E"],[1773,"impl-Debug-for-Rc%3CT,+A%3E"],[1774,"impl-Pointer-for-Rc%3CT,+A%3E"],[1777,"impl-From%3C%26str%3E-for-Rc%3Cstr%3E"],[1779,"impl-From%3C%26CStr%3E-for-Rc%3CCStr%3E"],[1780,"impl-From%3CBox%3CT,+A%3E%3E-for-Rc%3CT,+A%3E"],[1781,"impl-From%3C%5BT;+N%5D%3E-for-Rc%3C%5BT%5D%3E"],[1783,"impl-From%3CT%3E-for-Rc%3CT%3E"],[1784,"impl-From%3CCow%3C\'a,+B%3E%3E-for-Rc%3CB%3E"],[1785,"impl-From%3CRc%3Cstr%3E%3E-for-Rc%3C%5Bu8%5D%3E"],[1786,"impl-From%3CString%3E-for-Rc%3Cstr%3E"],[1787,"impl-From%3C%26%5BT%5D%3E-for-Rc%3C%5BT%5D%3E"],[1788,"impl-From%3CVec%3CT,+A%3E%3E-for-Rc%3C%5BT%5D,+A%3E"],[1789,"impl-From%3CCString%3E-for-Rc%3CCStr%3E"],[2021,"impl-Debug-for-EscapeAscii%3C\'a%3E"],[2022,"impl-Display-for-EscapeAscii%3C\'a%3E"],[2523,"impl-Debug-for-Utf8Error"],[2524,"impl-Display-for-Utf8Error"],[2525,"impl-Debug-for-ParseBoolError"],[2526,"impl-Display-for-ParseBoolError"],[2545,"impl-Display-for-EscapeDebug%3C\'a%3E"],[2546,"impl-Debug-for-EscapeDebug%3C\'a%3E"],[2547,"impl-Display-for-EscapeDefault%3C\'a%3E"],[2548,"impl-Debug-for-EscapeDefault%3C\'a%3E"],[2549,"impl-Display-for-EscapeUnicode%3C\'a%3E"],[2550,"impl-Debug-for-EscapeUnicode%3C\'a%3E"],[2984,"impl-AsRef%3Cstr%3E-for-Drain%3C\'a%3E"],[2985,"impl-AsRef%3C%5Bu8%5D%3E-for-Drain%3C\'a%3E"],[2986,"impl-AsRef%3C%5Bu8%5D%3E-for-String"],[2987,"impl-AsRef%3Cstr%3E-for-String"],[3015,"impl-PartialEq%3CCow%3C\'a,+str%3E%3E-for-String"],[3016,"impl-PartialEq-for-String"],[3017,"impl-PartialEq%3Cstr%3E-for-String"],[3018,"impl-PartialEq%3C%26str%3E-for-String"],[3020,"impl-Extend%3Cchar%3E-for-String"],[3021,"impl-Extend%3CString%3E-for-String"],[3022,"impl-Extend%3C%26str%3E-for-String"],[3023,"impl-Extend%3CBox%3Cstr%3E%3E-for-String"],[3024,"impl-Extend%3CCow%3C\'a,+str%3E%3E-for-String"],[3025,"impl-Extend%3C%26char%3E-for-String"],[3027,"impl-Extend%3CString%3E-for-String"],[3028,"impl-Extend%3C%26str%3E-for-String"],[3029,"impl-Extend%3CCow%3C\'a,+str%3E%3E-for-String"],[3030,"impl-Extend%3C%26char%3E-for-String"],[3031,"impl-Extend%3Cchar%3E-for-String"],[3032,"impl-Extend%3Cchar%3E-for-String"],[3033,"impl-Extend%3C%26char%3E-for-String"],[3035,"impl-Debug-for-String"],[3036,"impl-Display-for-String"],[3037,"impl-Debug-for-FromUtf8Error"],[3038,"impl-Display-for-FromUtf8Error"],[3039,"impl-Debug-for-FromUtf16Error"],[3040,"impl-Display-for-FromUtf16Error"],[3042,"impl-From%3Cchar%3E-for-String"],[3044,"impl-From%3CCow%3C\'a,+str%3E%3E-for-String"],[3045,"impl-From%3C%26String%3E-for-String"],[3046,"impl-From%3CBox%3Cstr%3E%3E-for-String"],[3047,"impl-From%3C%26mut+str%3E-for-String"],[3048,"impl-From%3C%26str%3E-for-String"],[3051,"impl-FromIterator%3C%26char%3E-for-String"],[3052,"impl-FromIterator%3CBox%3Cstr%3E%3E-for-String"],[3053,"impl-FromIterator%3C%26str%3E-for-String"],[3054,"impl-FromIterator%3Cchar%3E-for-String"],[3055,"impl-FromIterator%3CCow%3C\'a,+str%3E%3E-for-String"],[3056,"impl-FromIterator%3CString%3E-for-String"],[3069,"impl-Index%3CRangeTo%3Cusize%3E%3E-for-String"],[3070,"impl-Index%3CRangeToInclusive%3Cusize%3E%3E-for-String"],[3071,"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-String"],[3072,"impl-Index%3CRangeFull%3E-for-String"],[3073,"impl-Index%3CRange%3Cusize%3E%3E-for-String"],[3074,"impl-Index%3CRangeInclusive%3Cusize%3E%3E-for-String"],[3075,"impl-IndexMut%3CRangeTo%3Cusize%3E%3E-for-String"],[3076,"impl-IndexMut%3CRange%3Cusize%3E%3E-for-String"],[3077,"impl-IndexMut%3CRangeFrom%3Cusize%3E%3E-for-String"],[3078,"impl-IndexMut%3CRangeFull%3E-for-String"],[3079,"impl-IndexMut%3CRangeToInclusive%3Cusize%3E%3E-for-String"],[3080,"impl-IndexMut%3CRangeInclusive%3Cusize%3E%3E-for-String"],[3100,"impl-PartialEq%3CCow%3C\'a,+str%3E%3E-for-String"],[3101,"impl-PartialEq%3C%26str%3E-for-String"],[3102,"impl-PartialEq%3Cstr%3E-for-String"],[3153,"impl-Arc%3CMaybeUninit%3CT%3E,+A%3E"],[3154,"impl-Arc%3C%5BMaybeUninit%3CT%3E%5D,+A%3E"],[3178,"impl-Debug-for-Arc%3CT,+A%3E"],[3179,"impl-Display-for-Arc%3CT,+A%3E"],[3180,"impl-Pointer-for-Arc%3CT,+A%3E"],[3182,"impl-From%3CBox%3CT,+A%3E%3E-for-Arc%3CT,+A%3E"],[3183,"impl-From%3CT%3E-for-Arc%3CT%3E"],[3184,"impl-From%3CCow%3C\'a,+B%3E%3E-for-Arc%3CB%3E"],[3186,"impl-From%3C%5BT;+N%5D%3E-for-Arc%3C%5BT%5D%3E"],[3187,"impl-From%3C%26CStr%3E-for-Arc%3CCStr%3E"],[3188,"impl-From%3CString%3E-for-Arc%3Cstr%3E"],[3189,"impl-From%3CArc%3Cstr%3E%3E-for-Arc%3C%5Bu8%5D%3E"],[3190,"impl-From%3C%26%5BT%5D%3E-for-Arc%3C%5BT%5D%3E"],[3191,"impl-From%3C%26str%3E-for-Arc%3Cstr%3E"],[3192,"impl-From%3CVec%3CT,+A%3E%3E-for-Arc%3C%5BT%5D,+A%3E"],[3194,"impl-From%3CCString%3E-for-Arc%3CCStr%3E"],[3277,"impl-AsMut%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E"],[3278,"impl-AsMut%3C%5BT%5D%3E-for-Vec%3CT,+A%3E"],[3285,"impl-AsRef%3C%5BT%5D%3E-for-Vec%3CT,+A%3E"],[3286,"impl-AsRef%3CVec%3CT,+A%3E%3E-for-Vec%3CT,+A%3E"],[3324,"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E"],[3325,"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E"],[3326,"impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E"],[3327,"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E"],[3328,"impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E"],[3329,"impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E"],[3330,"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E"],[3331,"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E"],[3334,"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E"],[3335,"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E"],[3336,"impl-Extend%3C%26T%3E-for-Vec%3CT,+A%3E"],[3337,"impl-Extend%3CT%3E-for-Vec%3CT,+A%3E"],[3346,"impl-From%3C%26%5BT;+N%5D%3E-for-Vec%3CT%3E"],[3347,"impl-From%3C%26str%3E-for-Vec%3Cu8%3E"],[3349,"impl-From%3CString%3E-for-Vec%3Cu8%3E"],[3350,"impl-From%3C%26mut+%5BT;+N%5D%3E-for-Vec%3CT%3E"],[3351,"impl-From%3CBox%3C%5BT%5D,+A%3E%3E-for-Vec%3CT,+A%3E"],[3352,"impl-From%3CCow%3C\'a,+%5BT%5D%3E%3E-for-Vec%3CT%3E"],[3353,"impl-From%3CVecDeque%3CT,+A%3E%3E-for-Vec%3CT,+A%3E"],[3354,"impl-From%3CCString%3E-for-Vec%3Cu8%3E"],[3355,"impl-From%3CBinaryHeap%3CT,+A%3E%3E-for-Vec%3CT,+A%3E"],[3356,"impl-From%3C%5BT;+N%5D%3E-for-Vec%3CT%3E"],[3357,"impl-From%3C%26mut+%5BT%5D%3E-for-Vec%3CT%3E"],[3358,"impl-From%3C%26%5BT%5D%3E-for-Vec%3CT%3E"],[3377,"impl-IntoIterator-for-%26mut+Vec%3CT,+A%3E"],[3378,"impl-IntoIterator-for-Vec%3CT,+A%3E"],[3379,"impl-IntoIterator-for-%26Vec%3CT,+A%3E"],[3390,"impl-PartialEq%3C%26%5BU;+N%5D%3E-for-Vec%3CT,+A%3E"],[3391,"impl-PartialEq%3C%26%5BU%5D%3E-for-Vec%3CT,+A%3E"],[3392,"impl-PartialEq%3C%5BU%5D%3E-for-Vec%3CT,+A%3E"],[3393,"impl-PartialEq%3CVec%3CU,+A2%3E%3E-for-Vec%3CT,+A1%3E"],[3394,"impl-PartialEq%3C%5BU;+N%5D%3E-for-Vec%3CT,+A%3E"],[3395,"impl-PartialEq%3C%26mut+%5BU%5D%3E-for-Vec%3CT,+A%3E"],[3512,"impl-Read-for-File"],[3513,"impl-File"],[3538,"impl-File"],[3539,"impl-Write-for-File"],[3677,"impl-Display-for-Error"],[3678,"impl-Debug-for-Error"],[3702,"impl-FileOpenFlags"],[3703,"impl-Flags-for-FileOpenFlags"],[3724,"impl-Octal-for-FileOpenFlags"],[3725,"impl-Debug-for-FileOpenFlags"],[3726,"impl-Binary-for-FileOpenFlags"],[3727,"impl-UpperHex-for-FileOpenFlags"],[3728,"impl-LowerHex-for-FileOpenFlags"],[3732,"impl-FileOpenFlags"],[3733,"impl-Flags-for-FileOpenFlags"]],"a":{"{:?}":[1559],"{}":[1566]}},\
"sample_elf":{"doc":"","t":"HHHHHH","n":["_test_duplicate_stdin","_test_userspace_mutex","handle_client","main","run_client","run_server"],"q":[[0,"sample_elf"],[6,"libstd::fs"],[7,"hyperion_syscall::net"],[8,"hyperion_syscall::err"],[9,"libstd"]],"d":["","","","","",""],"i":[0,0,0,0,0,0],"f":[[[],1],[[],2],[[3,4],[[5,[2]]]],[6,2],[[],[[5,[2]]]],[[],[[5,[2]]]]],"c":[],"p":[[5,"File",6],[1,"tuple"],[1,"usize"],[5,"SocketDesc",7],[8,"Result",8],[5,"CliArgs",9]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
