(function() {var type_impls = {
"ringbuf":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Producer%3CT,+R%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#32-172\">source</a><a href=\"#impl-Producer%3CT,+R%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T, R: <a class=\"trait\" href=\"ringbuf/ring_buffer/trait.RbRef.html\" title=\"trait ringbuf::ring_buffer::RbRef\">RbRef</a>&gt; <a class=\"struct\" href=\"ringbuf/producer/struct.Producer.html\" title=\"struct ringbuf::producer::Producer\">Producer</a>&lt;T, R&gt;<span class=\"where fmt-newline\">where\n    R::<a class=\"associatedtype\" href=\"ringbuf/ring_buffer/trait.RbRef.html#associatedtype.Rb\" title=\"type ringbuf::ring_buffer::RbRef::Rb\">Rb</a>: <a class=\"trait\" href=\"ringbuf/ring_buffer/trait.RbWrite.html\" title=\"trait ringbuf::ring_buffer::RbWrite\">RbWrite</a>&lt;T&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#41-46\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.new\" class=\"fn\">new</a>(target: R) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates producer from the ring buffer reference.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>There must be only one producer containing the same ring buffer reference.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rb\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#50-52\">source</a><h4 class=\"code-header\">pub fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.rb\" class=\"fn\">rb</a>(&amp;self) -&gt; &amp;R::<a class=\"associatedtype\" href=\"ringbuf/ring_buffer/trait.RbRef.html#associatedtype.Rb\" title=\"type ringbuf::ring_buffer::RbRef::Rb\">Rb</a></h4></section></summary><div class=\"docblock\"><p>Returns reference to the underlying ring buffer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_rb_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#55-57\">source</a><h4 class=\"code-header\">pub fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.into_rb_ref\" class=\"fn\">into_rb_ref</a>(self) -&gt; R</h4></section></summary><div class=\"docblock\"><p>Consumes <code>self</code> and returns underlying ring buffer reference.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.postponed\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#60-62\">source</a><h4 class=\"code-header\">pub fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.postponed\" class=\"fn\">postponed</a>(&amp;mut self) -&gt; <a class=\"type\" href=\"ringbuf/producer/type.PostponedProducer.html\" title=\"type ringbuf::producer::PostponedProducer\">PostponedProducer</a>&lt;T, &amp;R::<a class=\"associatedtype\" href=\"ringbuf/ring_buffer/trait.RbRef.html#associatedtype.Rb\" title=\"type ringbuf::ring_buffer::RbRef::Rb\">Rb</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns postponed producer that borrows <a href=\"ringbuf/producer/struct.Producer.html\" title=\"struct ringbuf::producer::Producer\"><code>Self</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_postponed\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#65-67\">source</a><h4 class=\"code-header\">pub fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.into_postponed\" class=\"fn\">into_postponed</a>(self) -&gt; <a class=\"type\" href=\"ringbuf/producer/type.PostponedProducer.html\" title=\"type ringbuf::producer::PostponedProducer\">PostponedProducer</a>&lt;T, R&gt;</h4></section></summary><div class=\"docblock\"><p>Transforms <a href=\"ringbuf/producer/struct.Producer.html\" title=\"struct ringbuf::producer::Producer\"><code>Self</code></a> into postponed producer.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#73-75\">source</a><h4 class=\"code-header\">pub fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns capacity of the ring buffer.</p>\n<p>The capacity of the buffer is constant.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#79-81\">source</a><h4 class=\"code-header\">pub fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the ring buffer is empty.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_full\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#87-89\">source</a><h4 class=\"code-header\">pub fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.is_full\" class=\"fn\">is_full</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the ring buffer is full.</p>\n<p><em>The result may become irrelevant at any time because of concurring consumer activity.</em></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#95-97\">source</a><h4 class=\"code-header\">pub fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>The number of items stored in the buffer.</p>\n<p><em>Actual number may be less than the returned value because of concurring consumer activity.</em></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.free_len\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#103-105\">source</a><h4 class=\"code-header\">pub fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.free_len\" class=\"fn\">free_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>The number of remaining free places in the buffer.</p>\n<p><em>Actual number may be greater than the returning value because of concurring consumer activity.</em></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.free_space_as_slices\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#118-122\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.free_space_as_slices\" class=\"fn\">free_space_as_slices</a>(\n    &amp;mut self\n) -&gt; (&amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;], &amp;mut [<a class=\"union\" href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;])</h4></section></summary><div class=\"docblock\"><p>Provides a direct access to the ring buffer vacant memory.\nReturns a pair of slices of uninitialized memory, the second one may be empty.</p>\n<h5 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h5>\n<p>Vacant memory is uninitialized. Initialized items must be put starting from the beginning of first slice.\nWhen first slice is fully filled then items must be put to the beginning of the second slice.</p>\n<p><em>This method must be followed by <code>Self::advance</code> call with the number of items being put previously as argument.</em>\n<em>No other mutating calls allowed before that.</em></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.advance\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#130-132\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.advance\" class=\"fn\">advance</a>(&amp;mut self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Moves <code>tail</code> counter by <code>count</code> places.</p>\n<h5 id=\"safety-2\"><a href=\"#safety-2\">Safety</a></h5>\n<p>First <code>count</code> items in free space must be initialized.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#137-150\">source</a><h4 class=\"code-header\">pub fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, elem: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, T&gt;</h4></section></summary><div class=\"docblock\"><p>Appends an item to the ring buffer.</p>\n<p>On failure returns an <code>Err</code> containing the item that hasnโt been appended.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#159-171\">source</a><h4 class=\"code-header\">pub fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.push_iter\" class=\"fn\">push_iter</a>&lt;I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = T&gt;&gt;(&amp;mut self, iter: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Appends items from an iterator to the ring buffer.\nElements that havenโt been added to the ring buffer remain in the iterator.</p>\n<p>Returns count of items been appended to the ring buffer.</p>\n<p><em>Inserted items are committed to the ring buffer all at once in the end,</em>\n<em>e.g. when buffer is full or iterator has ended.</em></p>\n</div></details></div></details>",0,"ringbuf::alias::StaticProducer","ringbuf::alias::HeapProducer","ringbuf::producer::PostponedProducer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Producer%3CT,+R%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#174-202\">source</a><a href=\"#impl-Producer%3CT,+R%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>, R: <a class=\"trait\" href=\"ringbuf/ring_buffer/trait.RbRef.html\" title=\"trait ringbuf::ring_buffer::RbRef\">RbRef</a>&gt; <a class=\"struct\" href=\"ringbuf/producer/struct.Producer.html\" title=\"struct ringbuf::producer::Producer\">Producer</a>&lt;T, R&gt;<span class=\"where fmt-newline\">where\n    R::<a class=\"associatedtype\" href=\"ringbuf/ring_buffer/trait.RbRef.html#associatedtype.Rb\" title=\"type ringbuf::ring_buffer::RbRef::Rb\">Rb</a>: <a class=\"trait\" href=\"ringbuf/ring_buffer/trait.RbWrite.html\" title=\"trait ringbuf::ring_buffer::RbWrite\">RbWrite</a>&lt;T&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#182-201\">source</a><h4 class=\"code-header\">pub fn <a href=\"ringbuf/producer/struct.Producer.html#tymethod.push_slice\" class=\"fn\">push_slice</a>(&amp;mut self, elems: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.slice.html\">[T]</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Appends items from slice to the ring buffer.\nElements must be <a href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\"><code>Copy</code></a>.</p>\n<p>Returns count of items been appended to the ring buffer.</p>\n</div></details></div></details>",0,"ringbuf::alias::StaticProducer","ringbuf::alias::HeapProducer","ringbuf::producer::PostponedProducer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-Producer%3Cu8,+R%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#286-298\">source</a><a href=\"#impl-Write-for-Producer%3Cu8,+R%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;R: <a class=\"trait\" href=\"ringbuf/ring_buffer/trait.RbRef.html\" title=\"trait ringbuf::ring_buffer::RbRef\">RbRef</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Write.html\" title=\"trait core::fmt::Write\">Write</a> for <a class=\"struct\" href=\"ringbuf/producer/struct.Producer.html\" title=\"struct ringbuf::producer::Producer\">Producer</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>, R&gt;<span class=\"where fmt-newline\">where\n    R::<a class=\"associatedtype\" href=\"ringbuf/ring_buffer/trait.RbRef.html#associatedtype.Rb\" title=\"type ringbuf::ring_buffer::RbRef::Rb\">Rb</a>: <a class=\"trait\" href=\"ringbuf/ring_buffer/trait.RbWrite.html\" title=\"trait ringbuf::ring_buffer::RbWrite\">RbWrite</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.u8.html\">u8</a>&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/ringbuf/producer.rs.html#290-297\">source</a><a href=\"#method.write_str\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Write.html#tymethod.write_str\" class=\"fn\">write_str</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.str.html\">str</a>) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Writes a string slice into this writer, returning whether the write\nsucceeded. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Write.html#tymethod.write_str\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_char\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/mod.rs.html#166\">source</a></span><a href=\"#method.write_char\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Write.html#method.write_char\" class=\"fn\">write_char</a>(&amp;mut self, c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a <a href=\"https://doc.rust-lang.org/nightly/core/primitive.char.html\" title=\"primitive char\"><code>char</code></a> into this writer, returning whether the write succeeded. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Write.html#method.write_char\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/mod.rs.html#194\">source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, args: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Glue for usage of the <a href=\"https://doc.rust-lang.org/nightly/core/macro.write.html\" title=\"macro core::write\"><code>write!</code></a> macro with implementors of this trait. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Write.html#method.write_fmt\">Read more</a></div></details></div></details>","Write","ringbuf::alias::StaticProducer","ringbuf::alias::HeapProducer","ringbuf::producer::PostponedProducer"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()